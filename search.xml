<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ajax</title>
    <url>/2022/08/22/Ajax/</url>
    <content><![CDATA[<h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><h3 id="解决跨域"><a href="#解决跨域" class="headerlink" title="解决跨域"></a>解决跨域</h3><p>1.设置跨域属性的响应头</p>
<ul>
<li>response.setHeader(‘Access-Controll-Allow-Origin’.’*’);</li>
</ul>
<p>2.jsonp（利用一些h5标签可以跨域的特性发送请求）</p>
<ul>
<li>发送jsonp请求</li>
</ul>
<h3 id="发送异步请求"><a href="#发送异步请求" class="headerlink" title="发送异步请求"></a>发送异步请求</h3><h3 id="Get请求"><a href="#Get请求" class="headerlink" title="Get请求"></a>Get请求</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;http://127.0.0.1:8000/server?a=100&amp;b=100&#x27;</span>);</span><br><span class="line"><span class="comment">//设置响应体数据的类型</span></span><br><span class="line">xhr.responseType = <span class="string">&#x27;json&#x27;</span>;</span><br><span class="line"><span class="comment">//设置请求头</span></span><br><span class="line">xhr.setRequestHeader(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span><br><span class="line">xhr.send();</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(xhr.response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Post请求"><a href="#Post请求" class="headerlink" title="Post请求"></a>Post请求</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;http://127.0.0.1:8000/server&#x27;</span>);</span><br><span class="line"><span class="comment">//设置响应体数据的类型</span></span><br><span class="line">xhr.responseType = <span class="string">&#x27;json&#x27;</span>;</span><br><span class="line"><span class="comment">//设置请求头</span></span><br><span class="line">xhr.setRequestHeader(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span><br><span class="line">xhr.send(<span class="string">&#x27;a=100&amp;b=100&#x27;</span>);</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(xhr.response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="请求处理"><a href="#请求处理" class="headerlink" title="请求处理"></a>请求处理</h3><h4 id="请求超时"><a href="#请求超时" class="headerlink" title="请求超时"></a>请求超时</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//超时设置</span></span><br><span class="line">xhr.timeout = <span class="number">2000</span>;</span><br><span class="line"><span class="comment">//超时回调</span></span><br><span class="line">xhr.ontimeout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;请稍后重试！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//网络异常回调</span></span><br><span class="line">xhr.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;你的网络似乎出了问题！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="取消请求"><a href="#取消请求" class="headerlink" title="取消请求"></a>取消请求</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//取消请求的发送</span></span><br><span class="line">xhr.abort();</span><br></pre></td></tr></table></figure>
<h4 id="解决请求重复发送"><a href="#解决请求重复发送" class="headerlink" title="解决请求重复发送"></a>解决请求重复发送</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> isSending = <span class="literal">false</span>;</span><br><span class="line">btn[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isSending) x.abort();</span><br><span class="line">	<span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"> 	isSending = <span class="literal">true</span>;  </span><br><span class="line">    xhr.open(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;http://127.0.0.1:8000/server&#x27;</span>);</span><br><span class="line">	xhr.send();	</span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">            isSending = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="jQuery发送异步请求"><a href="#jQuery发送异步请求" class="headerlink" title="jQuery发送异步请求"></a>jQuery发送异步请求</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.get(<span class="string">&#x27;http://127.0.0.0:8080/server&#x27;</span>,&#123;<span class="attr">a</span>:<span class="number">100</span>,<span class="attr">b</span>:<span class="number">200</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;<span class="built_in">console</span>.log(data);&#125;,<span class="string">&#x27;json&#x27;</span>);</span><br><span class="line">$.post(<span class="string">&#x27;http://127.0.0.0:8080/server&#x27;</span>,&#123;<span class="attr">a</span>:<span class="number">100</span>,<span class="attr">b</span>:<span class="number">200</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;<span class="built_in">console</span>.log(data);&#125;,<span class="string">&#x27;json&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>通用方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url:<span class="string">&#x27;http://127.0.0.0:8080/server&#x27;</span>,</span><br><span class="line">    data:&#123;<span class="attr">a</span>:<span class="number">100</span>,<span class="attr">b</span>:<span class="number">200</span>&#125;,</span><br><span class="line">    type:<span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    dataType:<span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">    success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;,</span><br><span class="line">    timeout:<span class="number">2000</span>,<span class="comment">//超时时间</span></span><br><span class="line">    error:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;请稍后重试！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Ajax</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Axios</title>
    <url>/2022/08/24/Axios/</url>
    <content><![CDATA[<h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h1><p>axios是一个基于promise的网络请求库，作用于node.js和浏览器中，它是 isomorphic 的(即同一套代码可以运行在浏览器和node.js中)。在服务端它使用原生node.js http模块, 而在客户端 (浏览端) 则使用XMLHttpRequest。</p>
<h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><ol>
<li>使用npm安装：<code>$ npm install axios</code></li>
<li>使用 cdn：<code>&lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/axios/0.27.2/axios.min.js&quot;&gt;&lt;/script&gt;</code></li>
</ol>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="comment">//获取按钮</span></span><br><span class="line">        <span class="keyword">const</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一个</span></span><br><span class="line">        btns[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">//发送 AJAX 请求</span></span><br><span class="line">            axios(&#123;</span><br><span class="line">                <span class="comment">//请求类型</span></span><br><span class="line">                method: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">                <span class="comment">//URL</span></span><br><span class="line">                url: <span class="string">&#x27;http://localhost:3000/posts/1&#x27;</span>,</span><br><span class="line">            &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(response);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加一篇新的文章</span></span><br><span class="line">        btns[<span class="number">1</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">//发送 AJAX 请求</span></span><br><span class="line">            axios(&#123;</span><br><span class="line">                <span class="comment">//请求类型</span></span><br><span class="line">                method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">                <span class="comment">//URL</span></span><br><span class="line">                url: <span class="string">&#x27;http://localhost:3000/posts&#x27;</span>,</span><br><span class="line">                <span class="comment">//设置请求体</span></span><br><span class="line">                data: &#123;</span><br><span class="line">                    title: <span class="string">&quot;今天天气不错, 还挺风和日丽的&quot;</span>,</span><br><span class="line">                    author: <span class="string">&quot;张三&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(response);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更新数据</span></span><br><span class="line">        btns[<span class="number">2</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">//发送 AJAX 请求</span></span><br><span class="line">            axios(&#123;</span><br><span class="line">                <span class="comment">//请求类型</span></span><br><span class="line">                method: <span class="string">&#x27;PUT&#x27;</span>,</span><br><span class="line">                <span class="comment">//URL</span></span><br><span class="line">                url: <span class="string">&#x27;http://localhost:3000/posts/2&#x27;</span>,</span><br><span class="line">                <span class="comment">//设置请求体</span></span><br><span class="line">                data: &#123;</span><br><span class="line">                    title: <span class="string">&quot;今天天气不错, 还挺风和日丽的&quot;</span>,</span><br><span class="line">                    author: <span class="string">&quot;李四&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(response);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除数据</span></span><br><span class="line">        btns[<span class="number">3</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">//发送 AJAX 请求</span></span><br><span class="line">            axios(&#123;</span><br><span class="line">                <span class="comment">//请求类型</span></span><br><span class="line">                method: <span class="string">&#x27;delete&#x27;</span>,</span><br><span class="line">                <span class="comment">//URL</span></span><br><span class="line">                url: <span class="string">&#x27;http://localhost:3000/posts/2&#x27;</span>,</span><br><span class="line">            &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(response);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">		</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="其他使用"><a href="#其他使用" class="headerlink" title="其他使用"></a>其他使用</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//发送 GET 请求</span></span><br><span class="line">btns[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// axios()</span></span><br><span class="line">    axios.request(&#123;</span><br><span class="line">        method:<span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">        url: <span class="string">&#x27;http://localhost:3000/comments&#x27;</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(response);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送 POST 请求</span></span><br><span class="line">btns[<span class="number">1</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// axios()</span></span><br><span class="line">    axios.post(</span><br><span class="line">        <span class="string">&#x27;http://localhost:3000/comments&#x27;</span>, </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;body&quot;</span>: <span class="string">&quot;喜大普奔&quot;</span>,</span><br><span class="line">            <span class="string">&quot;postId&quot;</span>: <span class="number">2</span></span><br><span class="line">        &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(response);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//并发多个请求</span></span><br><span class="line">btns[<span class="number">3</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//发送 AJAX 请求</span></span><br><span class="line">    axios.all([axios(&#123;</span><br><span class="line">                <span class="comment">//请求类型</span></span><br><span class="line">                method: <span class="string">&#x27;delete&#x27;</span>,</span><br><span class="line">                <span class="comment">//URL</span></span><br><span class="line">                url: <span class="string">&#x27;http://localhost:3000/posts/2&#x27;</span>,</span><br><span class="line">            &#125;),</span><br><span class="line">               axios(&#123;</span><br><span class="line">                <span class="comment">//请求类型</span></span><br><span class="line">                method: <span class="string">&#x27;PUT&#x27;</span>,</span><br><span class="line">                <span class="comment">//URL</span></span><br><span class="line">                url: <span class="string">&#x27;http://localhost:3000/posts/2&#x27;</span>,</span><br><span class="line">                <span class="comment">//设置请求体</span></span><br><span class="line">                data: &#123;</span><br><span class="line">                    title: <span class="string">&quot;今天天气不错, 还挺风和日丽的&quot;</span>,</span><br><span class="line">                    author: <span class="string">&quot;李四&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">    ])then(axios.spread(<span class="function">(<span class="params">res1,res2</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res1);</span><br><span class="line">        <span class="built_in">console</span>.log(res2);</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>其余详细使用见<a href="https://github.com/axios/axios#features">官方文档</a></p>
</blockquote>
<h2 id="axios响应结果结构"><a href="#axios响应结果结构" class="headerlink" title="axios响应结果结构"></a>axios响应结果结构</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// `data` 响应体的结果，由服务器提供的响应</span></span><br><span class="line">  data: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `status` 来自服务器响应的 HTTP 状态码</span></span><br><span class="line">  status: <span class="number">200</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `statusText` 来自服务器响应的 HTTP 状态信息</span></span><br><span class="line">  statusText: <span class="string">&#x27;OK&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `headers` 服务器响应的头信息</span></span><br><span class="line">  headers: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">   <span class="comment">// `config` 是为请求提供的配置信息对象</span></span><br><span class="line">  config: &#123;&#125;,</span><br><span class="line">      </span><br><span class="line">   <span class="comment">// &#x27;request&#x27;原生的AJAX对象</span></span><br><span class="line">  request: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//默认配置</span></span><br><span class="line">axios.defaults.method = <span class="string">&#x27;GET&#x27;</span>;<span class="comment">//设置默认的请求类型为 GET</span></span><br><span class="line">axios.defaults.baseURL = <span class="string">&#x27;http://localhost:3000&#x27;</span>;<span class="comment">//设置基础 URL</span></span><br><span class="line">axios.defaults.params = &#123;<span class="attr">id</span>:<span class="number">100</span>&#125;; <span class="comment">//设置请求参数</span></span><br><span class="line">axios.defaults.timeout = <span class="number">3000</span>;<span class="comment">// 超时时间</span></span><br><span class="line"></span><br><span class="line">btns[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    axios(&#123;</span><br><span class="line">        url: <span class="string">&#x27;/posts&#x27;</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(response);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="创建实例对象发送请求"><a href="#创建实例对象发送请求" class="headerlink" title="创建实例对象发送请求"></a>创建实例对象发送请求</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="comment">//创建实例对象  /getJoke</span></span><br><span class="line">        <span class="keyword">const</span> duanzi = axios.create(&#123;</span><br><span class="line">            baseURL: <span class="string">&#x27;https://api.apiopen.top&#x27;</span>,</span><br><span class="line">            timeout: <span class="number">2000</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里  duanzi 与 axios 对象的功能几近是一样的</span></span><br><span class="line">        <span class="comment">// duanzi(&#123;</span></span><br><span class="line">        <span class="comment">//     url: &#x27;/getJoke&#x27;,</span></span><br><span class="line">        <span class="comment">// &#125;).then(response =&gt; &#123;</span></span><br><span class="line">        <span class="comment">//     console.log(response);</span></span><br><span class="line">        <span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line">        duanzi.get(<span class="string">&#x27;/getJoke&#x27;</span>).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(response.data)</span><br><span class="line">        &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="comment">// Promise</span></span><br><span class="line">        <span class="comment">// 设置请求拦截器  config 配置对象</span></span><br><span class="line">        axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;请求拦截器 成功 - 1号&#x27;</span>);</span><br><span class="line">            <span class="comment">//修改 config 中的参数</span></span><br><span class="line">            config.params = &#123;<span class="attr">a</span>:<span class="number">100</span>&#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> config;</span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;请求拦截器 失败 - 1号&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;请求拦截器 成功 - 2号&#x27;</span>);</span><br><span class="line">            <span class="comment">//修改 config 中的参数</span></span><br><span class="line">            config.timeout = <span class="number">2000</span>;</span><br><span class="line">            <span class="keyword">return</span> config;</span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;请求拦截器 失败 - 2号&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置响应拦截器</span></span><br><span class="line">        axios.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;响应拦截器 成功 1号&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> response.data;</span><br><span class="line">            <span class="comment">// return response;</span></span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;响应拦截器 失败 1号&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        axios.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;响应拦截器 成功 2号&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> response;</span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;响应拦截器 失败 2号&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送请求</span></span><br><span class="line">        axios(&#123;</span><br><span class="line">            method: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">            url: <span class="string">&#x27;http://localhost:3000/posts&#x27;</span></span><br><span class="line">        &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;自定义回调处理成功的结果&#x27;</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(response);</span><br><span class="line">        &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="取消请求"><a href="#取消请求" class="headerlink" title="取消请求"></a>取消请求</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取按钮</span></span><br><span class="line"><span class="keyword">const</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="comment">//2.声明全局变量</span></span><br><span class="line"><span class="keyword">let</span> cancel = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//发送请求</span></span><br><span class="line">btns[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//检测上一次的请求是否已经完成</span></span><br><span class="line">    <span class="keyword">if</span>(cancel !== <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">//取消上一次的请求</span></span><br><span class="line">        cancel();</span><br><span class="line">    &#125;</span><br><span class="line">    axios(&#123;</span><br><span class="line">        method: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">        url: <span class="string">&#x27;http://localhost:3000/posts&#x27;</span>,</span><br><span class="line">        <span class="comment">//1. 添加配置对象的属性</span></span><br><span class="line">        cancelToken: <span class="keyword">new</span> axios.CancelToken(<span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123;</span><br><span class="line">            <span class="comment">//3. 将 c 的值赋值给 cancel</span></span><br><span class="line">            cancel = c;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(response);</span><br><span class="line">        <span class="comment">//将 cancel 的值初始化</span></span><br><span class="line">        cancel = <span class="literal">null</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定第二个事件取消请求</span></span><br><span class="line">btns[<span class="number">1</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    cancel();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Axios</tag>
      </tags>
  </entry>
  <entry>
    <title>Git的介绍与简单使用</title>
    <url>/2021/02/25/Git%E7%9A%84%E4%BB%8B%E7%BB%8D%E4%B8%8E%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Git的介绍和简单使用"><a href="#Git的介绍和简单使用" class="headerlink" title="Git的介绍和简单使用"></a>Git的介绍和简单使用</h1><h2 id="Git的概述"><a href="#Git的概述" class="headerlink" title="Git的概述"></a>Git的概述</h2><ul>
<li><p>Git的描述：Git是一个开源的分布式版本控制系统</p>
</li>
<li><p>作用：可以有效、高速地处理从很小到非常大的项目版本管理。</p>
</li>
<li><p>优点：</p>
<ul>
<li><p>适合分布式开发，强调个体。</p>
</li>
<li><p>公共服务器压力和数据量都不会太大。</p>
</li>
<li><p>速度快、灵活。</p>
</li>
<li><p>任意两个开发者之间可以很容易的解决冲突。</p>
</li>
<li><p>离线工作。</p>
</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>代码保密性差，一旦开发者把整个库克隆下来就可以完全公开所有代码和版本信息。</li>
</ul>
</li>
</ul>
<h2 id="Git的安装"><a href="#Git的安装" class="headerlink" title="Git的安装"></a>Git的安装</h2><p>在<a href="https://git-scm.com/">官网</a>下载，然后一直next即可。</p>
<h2 id="Git的本地结构"><a href="#Git的本地结构" class="headerlink" title="Git的本地结构"></a>Git的本地结构</h2><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Iooooot/photos@master/blogAboutPic/161425125317.png" alt="image-20210225184154025">    </p>
<h2 id="Git的基本命令"><a href="#Git的基本命令" class="headerlink" title="Git的基本命令"></a>Git的基本命令</h2><ul>
<li><p>初始化本地仓库：git init</p>
</li>
<li><p>添加文件：git add</p>
</li>
<li><p>提交文件： git commit -m “备注” </p>
</li>
<li><p>查看本地仓库状态：git status</p>
</li>
<li><p>查看提交日志：</p>
<ul>
<li>git log</li>
<li>git log –pretty=oneline</li>
<li>git log –oneline</li>
<li>git reflog (常用)</li>
</ul>
</li>
<li><p>进入历史版本：git reset –hard 版本号 (hard 可以换成mixed 暂存区和本地库同步调整,soft 只有本地库调整)</p>
</li>
<li><p>比对工作区和暂存区：git diff </p>
</li>
<li><p>创建分支：git branch 分支名</p>
</li>
<li><p>查看分支：git branch -v</p>
</li>
<li><p>切换分支：git checkout 分支名</p>
</li>
<li><p>删除分支：git branch –D 分支名</p>
</li>
<li><p>合并分支：git merge 分支名</p>
</li>
<li><p>推送操作：git push 远程仓库地址 分支名</p>
</li>
<li><p>克隆操作：git clone 远程仓库地址</p>
</li>
<li><p>给远程仓库地址起别名：git remote add 别名 地址</p>
</li>
<li><p>查看别名：git remote -v</p>
</li>
</ul>
<h2 id="SSH免密登录"><a href="#SSH免密登录" class="headerlink" title="SSH免密登录"></a>SSH免密登录</h2><ol>
<li><p>进入用户主目录：cd ~</p>
</li>
<li><p>再创建ssh目录：ssh-keygen -t rsa -C (输入github邮箱)</p>
</li>
<li><p>打开id_rad.pub文件将内容复制</p>
</li>
<li><p>粘贴到github 的settings中添加</p>
</li>
</ol>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>分布式</tag>
        <tag>版本控制</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript</title>
    <url>/2022/08/19/JavaScript/</url>
    <content><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul>
<li>Number：默认值0<ul>
<li>具体细节：<ul>
<li>0开头8进制</li>
<li>0b二进制</li>
<li>默认是10进制</li>
<li>0x表示16进制</li>
<li>Number.MAX_VALUE数字型最大值</li>
<li>Number.MIN_VALUE最小值</li>
<li>Infinity无穷大</li>
<li>-Infinity无穷小</li>
<li>NaN非数字</li>
</ul>
</li>
<li>相关函数：<ul>
<li>isNaN：判断是否是非数字</li>
</ul>
</li>
</ul>
</li>
<li>Boolean：默认值false</li>
<li>String：默认值””<ul>
<li>length属性：返回长度</li>
</ul>
</li>
<li>Undefined：默认值undefined</li>
<li>Null：默认值null</li>
</ul>
<h3 id="类型函数"><a href="#类型函数" class="headerlink" title="类型函数"></a>类型函数</h3><ul>
<li><p>typeof()：判断类型</p>
</li>
<li><p>toString()：转换字符串</p>
</li>
<li><p>String()：转成字符串</p>
</li>
<li><p>parseInt()：转换为数字型</p>
</li>
<li><p>parseFloat()：转换为浮点型</p>
</li>
<li><p>Number()：转换为数字型</p>
</li>
<li><p>Boolean()：转换为布尔值</p>
</li>
</ul>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="创建方式"><a href="#创建方式" class="headerlink" title="创建方式:"></a>创建方式:</h4><ul>
<li>new出来：new Array()</li>
<li>利用字面量：let arr = [1,2,”1231”,true];</li>
</ul>
<h4 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h4><ul>
<li>利用索引（索引号从0开始）：数组名[索引号]</li>
</ul>
<h4 id="获取长度"><a href="#获取长度" class="headerlink" title="获取长度"></a>获取长度</h4><ul>
<li>arr.length：获取数组长度</li>
</ul>
<h4 id="判断是否为数组"><a href="#判断是否为数组" class="headerlink" title="判断是否为数组"></a>判断是否为数组</h4><ul>
<li>arr instanceof Array;</li>
<li>Array.isArray();</li>
</ul>
<h4 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h4><ul>
<li>arr.push()：添加元素，返回数组长度</li>
<li>arr.pop()：删除最后一个元素，并返回删除的元素值</li>
<li>arr.unshift()：向数组开头添加元素，返回数组长度</li>
<li>arr.shift()：删除数组的第一个元素，返回第一个删除的值</li>
<li>arr.reverse()：翻转数组</li>
<li>arr.sort(function(a,b){return a-b})：数组排序升序</li>
<li>arr.indexOf()：查找元素索引,查不到返回-1</li>
<li>arr.lastIndexOf()：在数组中的最后一个索引</li>
<li>arr.toString()：转换为字符串</li>
<li>arr.join(‘分隔符’):以分隔符转换为字符串</li>
</ul>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="申明方式"><a href="#申明方式" class="headerlink" title="申明方式"></a>申明方式</h4><ul>
<li>直接申明：function 函数名(){}</li>
<li>利用变量名：var 变量名 = function(){}</li>
</ul>
<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul>
<li>arguments：可以接收函数的参数（以伪数组的形式）</li>
</ul>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><h4 id="创建方式-1"><a href="#创建方式-1" class="headerlink" title="创建方式"></a>创建方式</h4><ul>
<li>利用字面量：var obj = {name:”11”,age=18,hello:function(){}};</li>
<li>new一个：var obj = new Object();obj.name=”111”;</li>
<li>利用构造函数：function gg(name,age){this.name=name,this.age=age};</li>
</ul>
<h4 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h4><ul>
<li>利用for循环：for(var k : obj){console.log(k)};</li>
</ul>
<h3 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h3><h4 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h4><ul>
<li>Math.PI：圆周率</li>
<li>Math.max()：输出最大值</li>
<li>Math.min()：返回最小值</li>
<li>Math.floor()：向下取整</li>
<li>Math.ceil()：向上取整</li>
<li>Math.round：四舍五入</li>
<li>Math.abs()：最对值</li>
<li>Math.random()：返回随机的小数[0~1)</li>
</ul>
<h4 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h4><ul>
<li>构造函数：new Date()/new Date(“2000-10-1 8:8:8”)/new Date(2000,10,1);</li>
<li>格式化日期：通过get获取日期并利用字符串拼接输出</li>
<li>获取总毫秒数：date.valueOf()/Date.now()</li>
</ul>
<h4 id="字符串对象"><a href="#字符串对象" class="headerlink" title="字符串对象"></a>字符串对象</h4><ul>
<li>str.indexOf(‘x’)：返回字符索引</li>
<li>str.charAt(index)：返回该位置上的字符</li>
<li>str.charCodeAt(index)：返回该位置字符的ASCII码</li>
<li>str[index]：获取该位字符</li>
<li>concat(str1,str2,…)：拼接字符串</li>
<li>substr(start,length)：截取字符串</li>
<li>slice(start,end)：截取到end位置，end不取</li>
<li>substring(start,end)：基本和slice一致单不接受负值</li>
<li>replace(‘被替换的字符’,’替换为的字符’):替换字符</li>
<li>split(‘分隔符’):将字符串以分隔符分割</li>
</ul>
<h3 id="操作DOM"><a href="#操作DOM" class="headerlink" title="操作DOM"></a>操作DOM</h3><h4 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h4><ul>
<li>getElementById：以id获取元素</li>
<li>getElementsByTagName：以标签名获取元素</li>
<li>getElementsByClassName：根据类名元素集合</li>
<li>quertSelector(‘选择器’)：以选择器直接选择</li>
<li>document.body：直接获取body标签</li>
<li>document.documentElement：获取html标签</li>
<li>元素.parentNode：获取父节点</li>
<li>元素.childNodes：获取所有子节点，如果只需要元素节点，需要判断nodeType==1</li>
<li>元素.children：只获取所有子元素节点</li>
<li>元素.firstElementChild：获取第一个子元素</li>
<li>元素.lastElementChild：获取最后一个子元素</li>
<li>元素.nextSibling：获取下一个兄弟节点包括文本节点</li>
<li>元素.previousSibling：获取上一个兄弟节点包括文本节点</li>
<li>元素.nextElementSibling：获取下一个兄弟节点不包括文本节点</li>
<li>元素.previousElementSibling：获取上一个兄弟节点不包括文本节点</li>
</ul>
<h4 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h4><h5 id="传统方式"><a href="#传统方式" class="headerlink" title="传统方式"></a>传统方式</h5><ul>
<li>元素.onclick = function(){}：绑定点击事件</li>
<li>元素.onclick=null：解绑事件</li>
<li>onmouseover：鼠标经过触发</li>
<li>mouseenter：鼠标进入不会冒泡</li>
<li>onmouseout：鼠标离开触发</li>
<li>onfocus：获得鼠标焦点触发</li>
<li>onblur：失去鼠标焦点触发</li>
<li>onmousemove：鼠标移动触发</li>
<li>onmouseup：鼠标弹起触发</li>
<li>onmousedown：鼠标按下触发</li>
<li>contextmenu：文本操作菜单</li>
<li>selectstart：禁止选择文字</li>
</ul>
<h5 id="方法监听注册事件"><a href="#方法监听注册事件" class="headerlink" title="方法监听注册事件"></a>方法监听注册事件</h5><p>同一个元素同一个事件可以添加多个监听器</p>
<ul>
<li>元素.addEventListener(type,listener[useCapture])<ul>
<li>type：事件类型，不需要加on</li>
<li>listener：回调函数</li>
</ul>
</li>
<li>元素.removeEventListener(type,listener[useCapture])</li>
</ul>
<h5 id="修改属性"><a href="#修改属性" class="headerlink" title="修改属性"></a>修改属性</h5><ul>
<li>innerText：修改标签文本内容</li>
<li>innerHtml（常用）：修改标签的结构内容</li>
<li>src：修改src属性</li>
<li>href：修改href</li>
<li>表单属性：type、value、checked、selected、disabled</li>
<li>修改样式属性：元素.style.样式属性=’修改的值’</li>
<li>修改类名属性:元素.className=”修改的类名”</li>
<li>元素.属性：获取内置属性</li>
<li>元素.getAttribute(‘’)：获取自定义属性</li>
<li>元素.setAttribute(‘属性’,’值’)：设置自定义属性值</li>
<li>元素.removeAttribute()：移除属性</li>
<li>元素.dataset.属性名：获取data-属性的值</li>
</ul>
<h5 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h5><ul>
<li><p>document.createElement(‘标签名’)：创建节点（效率远远比innerHtml快的多）但是可以利用数组先存好，再添加到innerHtml中更快</p>
</li>
<li><p>元素.appendChild()：在父节点的子节点末尾添加节点</p>
</li>
<li><p>元素.insertBefore(child,指定元素)：在父节点的指定元素前面添加节点</p>
</li>
<li><p>元素.removeChild()：移除元素</p>
</li>
<li><p>元素.cloneNode(false/true)：复制当前节点(false为浅拷贝，true为深拷贝复制内容)</p>
</li>
</ul>
<h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><p>event就是一个事件对象写到我们侦听函数的小括号里面当形参来看；事件对象只有有了事件才会存在，它是系统给我们自动创建的，不需要我们传递参数；事件对象是我们事件的一系列相关数据的集合跟事件相关的比如鼠标点击里面就包含了鼠标的相长信息，鼠标坐标啊，如果是键盘事件里面就包含的键盘事件的信息比如判断用户按下了那个键</p>
<ul>
<li>target：触发该事件的元素</li>
<li>this：返回绑定的对象</li>
<li>type：事件类型</li>
<li>preventDefalut：阻止默认行为如跳转等/或者用return false；</li>
<li>stopPropagation：阻止冒泡行为</li>
<li>pageX：鼠标在页面文档的x坐标</li>
<li>pageY：鼠标在页面文档的y坐标</li>
<li>keyCode：获取相应键的ASCII码值</li>
</ul>
<h3 id="Window对象"><a href="#Window对象" class="headerlink" title="Window对象"></a>Window对象</h3><h4 id="相关事件"><a href="#相关事件" class="headerlink" title="相关事件"></a>相关事件</h4><ul>
<li>window.onload：页面加载事件</li>
<li>window.onresize：调整窗口大小加载事件（window.innerWidth获取窗口宽度）</li>
<li>scroll(x,y)：滚动到指定位置</li>
</ul>
<h4 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h4><ul>
<li>window.setTimeout（调用函数，延迟毫秒值）;</li>
<li>window.clearTimeout(timeoutId)：停止定时器</li>
<li>window.setInterval（调用函数，延迟毫秒值）：会循环调用</li>
<li>window.clearInterval(IntervalId)：停止定时器</li>
</ul>
<h4 id="Localtion对象"><a href="#Localtion对象" class="headerlink" title="Localtion对象"></a>Localtion对象</h4><ul>
<li>href：该页面的url地址</li>
<li>host：主机名</li>
<li>port：端口</li>
<li>pathname：路径</li>
<li>search：返回参数</li>
<li>hash：片段</li>
<li>assign：进行页面跳转记录历史可以后退</li>
<li>replace：不记录历史不能后退</li>
<li>reload()：刷新页面，如果带了true这个参数会强制刷新</li>
</ul>
<h4 id="Navigator"><a href="#Navigator" class="headerlink" title="Navigator"></a>Navigator</h4><ul>
<li>userAgent：可以判断使用什么端访问</li>
</ul>
<h4 id="History"><a href="#History" class="headerlink" title="History"></a>History</h4><ul>
<li>back()：后退功能</li>
<li>forward()：前进功能</li>
<li>go(参数)：前进后退功能，后退为负数</li>
</ul>
<h4 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h4><ul>
<li><p>元素.offsetTop：返回元素</p>
</li>
<li><p>元素.offsetParent返回作为该元嘉带有足位的父级元素如果父烟都设有定位则返回body</p>
</li>
<li><p>元素.offsetTop返回元素相对带有定位父元素上方的偏移</p>
</li>
<li><p>元素.offsetLeft返回元素相对带有定位父元素左边的偏移</p>
</li>
<li><p>元素.offsetWidth返回自身包括padding，边框。内容区的宽度，返回数值不带单位</p>
</li>
<li><p>元素.offsetHeight返回自身包括adding。边框、内容区的亮度，返回数值不带单位</p>
</li>
<li><p>元素.clientTop：返回元素上边框的大小</p>
</li>
<li><p>元素.clientLeft：返回元素左边框的大小</p>
</li>
<li><p>元素.clientWidth：返回自身报考padding、内容区的宽度，不包含边框</p>
</li>
<li><p>元素.clientHeight：返回自身报考padding、内容区的高度，不包含边框</p>
</li>
<li><p>元素.srcollTop：返回被卷去的上侧距离，返回数值不带单位</p>
</li>
<li><p>元素.scrollLeft：返回被卷去的左侧距离，返回数值不带单位</p>
</li>
<li><p>元素.srollWiddth：返回自身实际宽度，不含边框，返回数值不带单位</p>
</li>
<li><p>元素.srollHeight：返回自身实际高度，不含边框，返回数值不带单位</p>
</li>
<li><p>window.pageYOffset：获取页面被卷去的高度</p>
</li>
</ul>
<h3 id="存储对象"><a href="#存储对象" class="headerlink" title="存储对象"></a>存储对象</h3><h4 id="SessionStorage"><a href="#SessionStorage" class="headerlink" title="SessionStorage"></a>SessionStorage</h4><p>会话级别，关闭浏览器失效</p>
<ul>
<li>setItem(key,value)：存储数据</li>
<li>getItem(key)：获取数据</li>
<li>removeItem(key)：移除数据</li>
</ul>
<h4 id="LocalStorage"><a href="#LocalStorage" class="headerlink" title="LocalStorage"></a>LocalStorage</h4><p>永久生效，除非手动删除</p>
<ul>
<li>setItem(key,value)：存储数据</li>
<li>getItem(key)：获取数据</li>
<li>removeItem(key)：移除数据</li>
</ul>
<h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><h3 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h3><ul>
<li>let变量：修饰局部变量</li>
<li>const：声明常量，不能修改</li>
<li>解构赋值：let{name,age} = {name:”1”,age=2};</li>
<li>模板字符串：<code>里面直接写字符串$&#123;里面写拼接的变量&#125;</code> </li>
<li>对象得简写：{name:name,age:age}简写为{name,age}</li>
<li>箭头函数：()=&gt;{};注意this指向该函数定义的位置</li>
<li>…args：rest参数根argments一样</li>
<li>…运算符：将数组以逗号分割，</li>
<li>Number.EPSILON：表示js的最小精度可以用来比较浮点数</li>
<li>isFinite()：判断是否是有限数</li>
<li>isInteger()：判断是否是整数</li>
<li>Object.is()：判断两个值是否想等，和===差不多</li>
<li>Object.assign()：对象合并</li>
</ul>
<h3 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h3><ul>
<li>new Set()：构造set集合</li>
<li>set.has(‘’)：是否包含</li>
</ul>
<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><ul>
<li>new Map()</li>
<li>m.set(“key”,”value”)：添加元素</li>
<li>m.delete(“key”)：删除元素</li>
<li>m.get(key)：获取元素</li>
<li>m.clear()：清空map集合</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 学习路线</title>
    <url>/2021/02/21/Java%20%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
    <content><![CDATA[<h1 id="个人-Java学习路线"><a href="#个人-Java学习路线" class="headerlink" title="个人 Java学习路线"></a>个人 Java学习路线</h1><p>很喜欢学完一个东西就去看看其他人的学习路线，所以也看了很多，总结出了这个学习路线。</p>
<p>建议学习过程中多记笔记，写完后可以找项目练练手巩固复习一下所学技术(以免有所忘记)。</p>
<h2 id="1-编程基础部分"><a href="#1-编程基础部分" class="headerlink" title="1.编程基础部分"></a>1.编程基础部分</h2><ul>
<li>计算机组成原理</li>
<li>操作系统</li>
<li>计算机网络</li>
<li>数据结构与算法(这个尤为的重要，但也需要很长时间的积累)</li>
</ul>
<h2 id="2-JavaSE部分"><a href="#2-JavaSE部分" class="headerlink" title="2.JavaSE部分"></a>2.JavaSE部分</h2><ul>
<li>java语法基础</li>
<li>面向对象 (一种思想 封装继承多态)</li>
<li>接口</li>
<li>集合</li>
<li>多线程</li>
<li>异常</li>
<li>I/O</li>
<li>注解</li>
<li>反射</li>
</ul>
<p>推荐 <a href="https://www.bilibili.com/video/BV18b411t7Nc?p=1">b站宋红康</a></p>
<h2 id="3-数据库基础"><a href="#3-数据库基础" class="headerlink" title="3.数据库基础"></a>3.数据库基础</h2><ul>
<li>MySQL/Oracle (建议先学mysql)  <a href="https://www.bilibili.com/video/BV1Vy4y1z7EX">动力节点老杜mysql</a></li>
<li>JDBC</li>
</ul>
<h2 id="4-web部分"><a href="#4-web部分" class="headerlink" title="4.web部分"></a>4.web部分</h2><ul>
<li>前端三剑客<ul>
<li>HTML</li>
<li>CSS</li>
<li>JS</li>
</ul>
</li>
<li>javaWeb<ul>
<li><p>Servlet</p>
</li>
<li><p>jsp(了解即可)</p>
</li>
<li><p>Cookie/Session</p>
</li>
<li><p>Filter/Listener</p>
</li>
<li><p>AJAX</p>
</li>
<li><p>JSON</p>
<p>推荐 <a href="https://www.bilibili.com/video/BV1Y7411K7zz?from=search&seid=1929395653889243288">尚硅谷javaweb</a></p>
</li>
</ul>
</li>
</ul>
<h2 id="4-学习框架前的准备"><a href="#4-学习框架前的准备" class="headerlink" title="4.学习框架前的准备"></a>4.学习框架前的准备</h2><ul>
<li>设计模式</li>
<li>项目管理工具：Maven</li>
<li>版本控制工具：Git</li>
</ul>
<h2 id="5-基础框架"><a href="#5-基础框架" class="headerlink" title="5.基础框架"></a>5.基础框架</h2><ul>
<li><p>Spring  <a href="https://www.bilibili.com/video/BV1Sb411s7vP">黑马spring</a></p>
</li>
<li><p> SpringMVC  <a href="https://www.bilibili.com/video/BV1Sb411s7qa/?spm_id_from=333.788.recommend_more_video.4">黑马springMVC</a></p>
</li>
<li><p>MyBatis <a href="https://www.bilibili.com/video/BV1mW411M737">尚硅谷mybatis</a></p>
<p>  (个人建议先学Spring然后学SpringMVC再学MyBatis)</p>
</li>
<li><p>ssm整合 <a href="https://www.bilibili.com/video/BV1BJ411t7p3">雷丰阳</a></p>
<p>  (学完ssm可以找一个小的CRUD项目复习巩固一下,当然时间充裕可以在github上找大的开源项目)</p>
</li>
</ul>
<h2 id="6-Java开发核心基础部分"><a href="#6-Java开发核心基础部分" class="headerlink" title="6.Java开发核心基础部分"></a>6.Java开发核心基础部分</h2><ul>
<li><p>SpringBoot </p>
</li>
<li><p>SpringSecurity安全框架 <a href="https://www.bilibili.com/video/BV1mm4y1X7Hc?spm_id_from=333.337.search-card.all.click">三更</a></p>
<ul>
<li>有时间可以学oauth2、sso单点登录</li>
</ul>
</li>
<li><p>Vue + elementUi （学习前端方便后续与SpringBoot项目整合）</p>
</li>
</ul>
<h2 id="7-Java开发核心进阶部分"><a href="#7-Java开发核心进阶部分" class="headerlink" title="7.Java开发核心进阶部分"></a>7.Java开发核心进阶部分</h2><ul>
<li><p>Swagger2（RESTful风格的api文档框架）</p>
</li>
<li><p>Nginx服务器（有时间可以学完下面知识利用Nginx搭建相应集群）</p>
</li>
<li><p>日志处理</p>
<ul>
<li>SLF4j（门面）+ Logback（实现）</li>
</ul>
</li>
<li><p>Redis缓存 <a href="https://www.bilibili.com/video/BV1Rv41177Af?spm_id_from=333.337.search-card.all.click">尚硅谷Redis</a></p>
</li>
<li><p>消息队列</p>
<ul>
<li>RabbitMQ（基础常用）</li>
<li>Kafka</li>
</ul>
</li>
<li><p>搜索引擎：</p>
<ul>
<li>ElasticStack<ul>
<li>elasticsearch（搜索引擎）</li>
<li>logstash（日志收集工具）</li>
<li>kibana（日志可视化查看工具）</li>
</ul>
</li>
</ul>
</li>
<li><p>NoSql数据库</p>
<ul>
<li>MongoDB</li>
</ul>
<blockquote>
<p>这里也可以可以基于SpringBoot+SpringSecurity+Redis+RabbitMQ+Elasticsearch+Vue做一套后台管理系统（体现权限）</p>
</blockquote>
</li>
<li><p>项目部署（CI/CD:持续集成，持续部署）</p>
<ul>
<li>Docker容器</li>
<li>K8s</li>
<li>Jenkins</li>
</ul>
</li>
<li><p>微服务学习（这边时间不够可以先学，时间够可以先学中间件等加分技术）</p>
</li>
</ul>
]]></content>
      <categories>
        <category>学习路线</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>H5本地存储</title>
    <url>/2022/08/25/H5%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/</url>
    <content><![CDATA[<h1 id="浏览器本地存储-webStorage"><a href="#浏览器本地存储-webStorage" class="headerlink" title="浏览器本地存储(webStorage)"></a>浏览器本地存储(webStorage)</h1><h2 id="LoaclStorage"><a href="#LoaclStorage" class="headerlink" title="LoaclStorage"></a>LoaclStorage</h2><p>一种存在浏览器的域对象;并且关闭浏览器之后依然有效，只有手动清除或者清空缓存才会消失。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>localStorage<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>localStorage<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;saveData()&quot;</span>&gt;</span>点我保存一个数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;readData()&quot;</span>&gt;</span>点我读取一个数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;delData()&quot;</span>&gt;</span>点我删除一个数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;clearData()&quot;</span>&gt;</span>点我清空数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">saveData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//键值对形式，并且所有数据必须都是字符串</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.localStorage.setItem(<span class="string">&#x27;msg&#x27;</span>,<span class="string">&#x27;hello!&#x27;</span>)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> p = &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.localStorage.setItem(<span class="string">&#x27;person&#x27;</span>,<span class="built_in">JSON</span>.stringify(p))</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">readData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;msg&#x27;</span>));</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;person&#x27;</span>)));</span></span><br><span class="line"><span class="javascript">            <span class="comment">//当读取不存的数据时返回null并且JSON解析之后也是null</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;msg3&#x27;</span>));</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">delData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">localStorage</span>.removeItem(<span class="string">&#x27;msg&#x27;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">clearData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">localStorage</span>.clear();</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="SessionStorage"><a href="#SessionStorage" class="headerlink" title="SessionStorage"></a>SessionStorage</h2><p>与localStorage功能类似的数据域对象，但是作用域会小于localStorage，关闭浏览器后清空。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>sessionStorage<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>sessionStorage<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;saveData()&quot;</span>&gt;</span>点我保存一个数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;readData()&quot;</span>&gt;</span>点我读取一个数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;delData()&quot;</span>&gt;</span>点我删除一个数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;clearData()&quot;</span>&gt;</span>点我清空数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">saveData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//键值对形式，并且所有数据必须都是字符串</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.sessionStorage.setItem(<span class="string">&#x27;msg&#x27;</span>,<span class="string">&#x27;hello!&#x27;</span>)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> p = &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.sessionStorage.setItem(<span class="string">&#x27;person&#x27;</span>,<span class="built_in">JSON</span>.stringify(p))</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">readData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(sessionStorage.getItem(<span class="string">&#x27;msg&#x27;</span>));</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(sessionStorage.getItem(<span class="string">&#x27;person&#x27;</span>)));</span></span><br><span class="line"><span class="javascript">            <span class="comment">//当读取不存的数据时返回null并且JSON解析之后也是null</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(sessionStorage.getItem(<span class="string">&#x27;msg3&#x27;</span>));</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">delData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            sessionStorage.removeItem(<span class="string">&#x27;msg&#x27;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">clearData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">            sessionStorage.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>H5</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode_多数元素</title>
    <url>/2021/03/15/LeetCode-%E5%A4%9A%E6%95%B0%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<h1 id="多数元素"><a href="#多数元素" class="headerlink" title="多数元素"></a>多数元素</h1><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数 大于 ⌊ n/2 ⌋ 的元素。</p>
<p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：[3,2,3]</span><br><span class="line">输出：3</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：[2,2,1,1,1,2,2]</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure>
<h2 id="2-个人分析"><a href="#2-个人分析" class="headerlink" title="2.个人分析"></a>2.个人分析</h2><ul>
<li>方法1：可以开map记录然后遍历map统计得出答案 </li>
<li>方法2：先排序再遍历数组边遍历边统计</li>
<li>官方方法：排序返回n/2 下标的值</li>
<li>官方方法2：摩尔投票法</li>
</ul>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">int</span> temp=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> ans=nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]==nums[i-<span class="number">1</span>])&#123;</span><br><span class="line">                temp++;</span><br><span class="line">                <span class="keyword">if</span>(temp&gt;(len/<span class="number">2</span>))&#123;</span><br><span class="line">                    ans=nums[i];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                temp=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="官方方法："><a href="#官方方法：" class="headerlink" title="官方方法："></a>官方方法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">return</span> nums[nums.length / <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">moreThanHalfNum_Solution</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val, cnt = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (auto x : nums)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!cnt) val = x, cnt ++ ;     <span class="comment">//目标值与其他值刚好配对抵消时，重置计数</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (x == val) cnt ++ ;</span><br><span class="line">                <span class="keyword">else</span> cnt -- ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> val;                         <span class="comment">//最后剩下的一定是多于半数的目标值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之两数之和</title>
    <url>/2021/03/18/LeetCode%E4%B9%8B%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<h1 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h1><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p>
<p>你可以按任意顺序返回答案。</p>
<h2 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h2><p>可以看出这题基本思路就是遍历nums的每一个元素num，然后寻找该数组中是否存在target-num的值。</p>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">            <span class="keyword">int</span>[] ans = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">int</span> len = nums.length;  </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> num = nums[i];</span><br><span class="line">                <span class="keyword">int</span> temp = target - num;</span><br><span class="line">                <span class="keyword">int</span> index = getIndex(nums,temp);</span><br><span class="line">                <span class="keyword">if</span>(index&lt;<span class="number">0</span>||index==i)&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    ans[<span class="number">0</span>]=i;</span><br><span class="line">                    ans[<span class="number">1</span>]=index;</span><br><span class="line">                    <span class="keyword">return</span> ans;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(num==nums[i])&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之买卖股票的最佳时机</title>
    <url>/2021/03/19/LeetCode%E4%B9%8B%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/</url>
    <content><![CDATA[<h1 id="买卖股票的最佳时机"><a href="#买卖股票的最佳时机" class="headerlink" title="买卖股票的最佳时机"></a>买卖股票的最佳时机</h1><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。</p>
<p>你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润。</p>
<p>返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。</p>
<p>示例 1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：[7,1,5,3,6,4]</span><br><span class="line">输出：5</span><br><span class="line">解释：在第 2 天（股票价格 &#x3D; 1）的时候买入，在第 5 天（股票价格 &#x3D; 6）的时候卖出，最大利润 &#x3D; 6-1 &#x3D; 5 。</span><br><span class="line">     注意利润不能是 7-1 &#x3D; 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。</span><br></pre></td></tr></table></figure>
<p>示例 2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：prices &#x3D; [7,6,4,3,1]</span><br><span class="line">输出：0</span><br><span class="line">解释：在这种情况下, 没有交易完成, 所以最大利润为 0。</span><br></pre></td></tr></table></figure>
<h2 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h2><p>方法1：动态规划： 创建一个dp数组记录状态 dp 0 为该天持有股票手上的现金数额 ，dp 1 为该天不持有股票手上的现金数额，注意起始状态 dp 0为 -当天的股价，dp 1 为 0；</p>
<p>官方方法：遍历数组一边遍历一边记录 最低股价，然后当当前股价高于最低股价就先判断是否大于最大利润，若大于更新最大利润，最后返回。</p>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><p>方法1：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = prices.length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[len][<span class="number">2</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] -= prices[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = Math.max(dp[i-<span class="number">1</span>][<span class="number">0</span>],-prices[i]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(dp[i-<span class="number">1</span>][<span class="number">1</span>],dp[i-<span class="number">1</span>][<span class="number">0</span>]+prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[len-<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方法2：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> minprice = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">int</span> maxprofit = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (prices[i] &lt; minprice) &#123;</span><br><span class="line">                minprice = prices[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (prices[i] - minprice &gt; maxprofit) &#123;</span><br><span class="line">                maxprofit = prices[i] - minprice;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxprofit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之二叉树的中序遍历</title>
    <url>/2021/04/12/LeetCode%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<h1 id="二叉树的中序遍历"><a href="#二叉树的中序遍历" class="headerlink" title="二叉树的中序遍历"></a>二叉树的中序遍历</h1><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>给定一个二叉树的根节点 <code>root</code> ，返回它的 <strong>中序</strong> 遍历。</p>
<p><strong>示例：</strong></p>
<pre><code>输入：root = [1,null,2,3]
输出：[1,3,2]
</code></pre>
<p><strong>示例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：root &#x3D; [1]</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure>
<h2 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h2><p>​    递归遍历，先左再添加再右</p>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        midOrder(root);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> TreeNode <span class="title">midOrder</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        midOrder(root.left);</span><br><span class="line">        ans.add(root.val);</span><br><span class="line">        midOrder(root.right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之二叉树的最大深度</title>
    <url>/2021/03/30/LeetCode%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/</url>
    <content><![CDATA[<h1 id="二叉树的最大深度"><a href="#二叉树的最大深度" class="headerlink" title="二叉树的最大深度"></a>二叉树的最大深度</h1><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>给定一个二叉树，找出其最大深度。</p>
<p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p>
<p><strong>说明:</strong> 叶子节点是指没有子节点的节点。</p>
<p><strong>示例：</strong></p>
<p>给定二叉树 <code>[3,9,20,null,null,15,7]</code>，</p>
<pre><code>    3
   / \
  9  20
    /  \
   15   7
</code></pre>
<p>返回它的最大深度 3 。</p>
<h2 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h2><p>遍历二叉树，先遍历左支再遍历右支，然后比较得出最大深度</p>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> lTemp = maxDepth(root.left)+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> rTemp = maxDepth(root.right)+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> Math.max(lTemp,rTemp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之二叉树的直径</title>
    <url>/2021/04/05/LeetCode%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/</url>
    <content><![CDATA[<h1 id="二叉树的直径"><a href="#二叉树的直径" class="headerlink" title="二叉树的直径"></a>二叉树的直径</h1><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。</p>
<p><strong>示例：</strong></p>
<p>给定二叉树</p>
<pre><code>          1
         / \
        2   3
       / \     
      4   5  
</code></pre>
<p>返回 <strong>3</strong>, 它的长度是路径 [4,2,1,3] 或者 [5,2,1,3]。</p>
<h2 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h2><p>使用递归分别遍历左右子树，计算出最大深度，再相加更新ans并返回。</p>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = -<span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">diameterOfBinaryTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        getMax(root);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getMax</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> left = getMax(node.left);</span><br><span class="line">        <span class="keyword">int</span> right = getMax(node.right);</span><br><span class="line">        ans = Math.max(left+right,ans);</span><br><span class="line">        <span class="keyword">return</span> Math.max(left,right)+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之全排列</title>
    <url>/2021/04/08/LeetCode%E4%B9%8B%E5%85%A8%E6%8E%92%E5%88%97/</url>
    <content><![CDATA[<h1 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h1><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>给定一个 <strong>没有重复</strong> 数字的序列，返回其所有可能的全排列。</p>
<p><strong>示例：</strong></p>
<pre><code>输入: [1,2,3]
输出:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]
</code></pre>
<h2 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h2><p>使用dfs进行全排列，注意一定要回溯的时候移除之前的数！</p>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        List&lt;Integer&gt; temp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        dfs(nums,temp);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[] nums,List&lt;Integer&gt; temp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(temp.size()==nums.length)&#123;</span><br><span class="line">            ans.add(<span class="keyword">new</span> ArrayList&lt;&gt;(temp));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!temp.contains(num))&#123;</span><br><span class="line">                temp.add(num);</span><br><span class="line">                dfs(nums,temp);</span><br><span class="line">                temp.remove(temp.size()-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之删除字符串中的所有相邻重复项</title>
    <url>/2021/03/25/LeetCode%E4%B9%8B%E5%88%A0%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E7%9B%B8%E9%82%BB%E9%87%8D%E5%A4%8D%E9%A1%B9/</url>
    <content><![CDATA[<h1 id="删除字符串中的所有相邻重复项"><a href="#删除字符串中的所有相邻重复项" class="headerlink" title="删除字符串中的所有相邻重复项"></a>删除字符串中的所有相邻重复项</h1><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>给出由小写字母组成的字符串 <code>S</code>，<strong>重复项删除操作</strong>会选择两个相邻且相同的字母，并删除它们。</p>
<p>在 S 上反复执行重复项删除操作，直到无法继续删除。</p>
<p>在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。</p>
<p><strong>示例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：&quot;abbaca&quot;</span><br><span class="line">输出：&quot;ca&quot;</span><br><span class="line">解释：</span><br><span class="line">例如，在 &quot;abbaca&quot; 中，我们可以删除 &quot;bb&quot; 由于两字母相邻且相同，这是此时唯一可以执行删除操作的重复项。之后我们得到字符串 &quot;aaca&quot;，其中又只有 &quot;aa&quot; 可以执行重复项删除操作，所以最后的字符串为 &quot;ca&quot;。</span><br></pre></td></tr></table></figure>


<h2 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h2><p>这题和有效括号类似，可以利用栈先进后出的特性来存储每个字符并判断得出最后结果</p>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">removeDuplicates</span><span class="params">(String S)</span> </span>&#123;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">int</span> len = S.length();</span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(len==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> S;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(stack.empty())&#123;</span><br><span class="line">…            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Character character : stack) &#123;</span><br><span class="line">            sb.append(character);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之删除有序数组中的重复项</title>
    <url>/2021/04/11/LeetCode%E4%B9%8B%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/</url>
    <content><![CDATA[<h1 id="删除有序数组中的重复项"><a href="#删除有序数组中的重复项" class="headerlink" title="删除有序数组中的重复项"></a>删除有序数组中的重复项</h1><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使每个元素 最多出现两次 ，返回删除后数组的新长度。</p>
<p>不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。</p>
<p><strong>示例：</strong></p>
<pre><code>输入：nums = [1,1,1,2,2,3]
输出：5, nums = [1,1,2,2,3]
解释：函数应返回新长度 length = 5, 并且原数组的前五个元素被修改为 1, 1, 2, 2, 3 。 不需要考虑数组中超出新长度后面的元素。
</code></pre>
<p><strong>示例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums &#x3D; [0,0,1,1,1,1,2,3,3]</span><br><span class="line">输出：7, nums &#x3D; [0,0,1,1,2,3,3]</span><br><span class="line">解释：函数应返回新长度 length &#x3D; 7, 并且原数组的前五个元素被修改为 0, 0, 1, 1, 2, 3, 3 。 不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure>
<h2 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h2><p>​    使用双指针，一根指针指单个不同的数，一个指针如果相同就移动。</p>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">		<span class="keyword">int</span> i = <span class="number">0</span> ,j = <span class="number">0</span>,count=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(j+i&lt;nums.length) &#123;</span><br><span class="line">			<span class="keyword">if</span>(nums[i+j]==nums[i]) &#123;</span><br><span class="line">				<span class="keyword">if</span>(j&lt;<span class="number">2</span>) &#123;</span><br><span class="line">					temp[count] = nums[i];</span><br><span class="line">					count++;</span><br><span class="line">				&#125;</span><br><span class="line">				j++;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				i=i+j;</span><br><span class="line">				j=<span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; count; k++) &#123;</span><br><span class="line">			nums[k]=temp[k];</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之只出现一次的数字</title>
    <url>/2021/03/24/LeetCode%E4%B9%8B%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/</url>
    <content><![CDATA[<h1 id="只出现一次的数字"><a href="#只出现一次的数字" class="headerlink" title="只出现一次的数字"></a>只出现一次的数字</h1><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>给定一个<strong>非空</strong>整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [2,2,1]</span><br><span class="line">输出: 1</span><br></pre></td></tr></table></figure>
<p><strong>示例 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [4,1,2,1,2]</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure>
<h2 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h2><ul>
<li>我个人第一时间想到的是先排序再遍历看哪个是单出来的 (时间复杂度太高了) </li>
<li>还有一种是使用hashmap计数然后判断 </li>
<li>官方给出的解法 使用异或 (数组中各数异或 最后只会得到不相同的一个)</li>
</ul>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><ul>
<li>解法1：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(len==<span class="number">1</span>)&#123;</span><br><span class="line">            ans = nums[<span class="number">0</span>];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            Arrays.sort(nums);</span><br><span class="line">            <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len-<span class="number">1</span>; i+=<span class="number">2</span>) &#123;</span><br><span class="line">…        <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>解法二(略)</p>
</li>
<li><p>解法三</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            ans = ans ^ nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之合并两个有序数组</title>
    <url>/2021/04/10/LeetCode%E4%B9%8B%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h1 id="合并两个有序数组"><a href="#合并两个有序数组" class="headerlink" title="合并两个有序数组"></a>合并两个有序数组</h1><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中，使 nums1 成为一个有序数组。</p>
<p>初始化 nums1 和 nums2 的元素数量分别为 m 和 n 。你可以假设 nums1 的空间大小等于 m + n，这样它就有足够的空间保存来自 nums2 的元素</p>
<p><strong>示例：</strong></p>
<pre><code>输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
输出：[1,2,2,3,5,6]
</code></pre>
<p><strong>示例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums1 &#x3D; [1], m &#x3D; 1, nums2 &#x3D; [], n &#x3D; 0</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure>
<h2 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h2><ol>
<li>直接合并排序</li>
<li>使用的双指针方法，但是时间复杂度有点高了</li>
<li>双指针优化</li>
</ol>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> m, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[m+n];</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>,j = <span class="number">0</span>,index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;m&amp;&amp;j&lt;n)&#123;</span><br><span class="line">            <span class="comment">//找那边更小，找到指针也需要移动</span></span><br><span class="line">            <span class="keyword">if</span>(nums1[i]&lt;nums2[j])&#123;</span><br><span class="line">                temp[index++] = nums1[i++];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                temp[index++] = nums2[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;m)&#123;</span><br><span class="line">            temp[index++] = nums1[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;n)&#123;</span><br><span class="line">            temp[index++] = nums2[j++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; temp.length; k++) &#123;</span><br><span class="line">            nums1[k] = temp[k];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.toString(nums1));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> m, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[m+n];</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>,j = <span class="number">0</span>,index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;m||j&lt;n)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i == m) &#123;</span><br><span class="line">                temp[index++] = nums2[j++];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j == n) &#123;</span><br><span class="line">                temp[index++] = nums1[i++];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums1[i] &lt; nums2[j]) &#123;</span><br><span class="line">                temp[index++] = nums1[i++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                temp[index++] = nums2[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n+m; k++) &#123;</span><br><span class="line">            nums1[k] = temp[k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之合并两个有序链表</title>
    <url>/2021/03/17/LeetCode%E4%B9%8B%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="合并两个有序链表"><a href="#合并两个有序链表" class="headerlink" title="合并两个有序链表"></a>合并两个有序链表</h1><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>将两个升序链表合并为一个新的 <strong>升序</strong> 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p>
<p><strong>示例 1：</strong></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://assets.leetcode.com/uploads/2020/10/03/merge_ex1.jpg" alt="img"></p>
<h2 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h2><p>使用递归算法，一直判断把问题交给下个子问题，直到链表到最后递归结束。</p>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l1==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(l2==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(l1.val&lt;l2.val)&#123;</span><br><span class="line">            l1.next = mergeTwoLists(l1.next, l2);</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l2.next = mergeTwoLists(l1, l2.next);</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之合并二叉树</title>
    <url>/2021/03/28/LeetCode%E4%B9%8B%E5%90%88%E5%B9%B6%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<h1 id="合并二叉树"><a href="#合并二叉树" class="headerlink" title="合并二叉树"></a>合并二叉树</h1><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>给定两个二叉树，想象当你将它们中的一个覆盖到另一个上时，两个二叉树的一些节点便会重叠。</p>
<p>你需要将他们合并为一个新的二叉树。合并的规则是如果两个节点重叠，那么将他们的值相加作为节点合并后的新值，否则不为 NULL 的节点将直接作为新二叉树的节点。</p>
<p>示例 1:</p>
<p>输入:<br>    Tree 1                     Tree 2<br>          1                         2<br>         / \                       / \<br>        3   2                  1   3<br>       /                           \   \<br>      5                             4   7<br>输出:<br>合并后的树:<br>         3<br>        / <br>       4   5<br>      / \   \<br>     5   4   7</p>
<h2 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h2><p>使用深度遍历即可,可以new一个根节点也可以直接使用t1返回.显然直接使用t1效率更高和内存消耗更低</p>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">mergeTrees</span><span class="params">(TreeNode t1, TreeNode t2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(t1==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> t2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(t2==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> t1;</span><br><span class="line">        &#125;</span><br><span class="line">        t1.val = t1.val + t2.val;</span><br><span class="line">        t1.left = mergeTrees(t1.left,t2.left);</span><br><span class="line">        t1.right = mergeTrees(t1.right,t2.right);</span><br><span class="line">        <span class="keyword">return</span> t1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之回文链表</title>
    <url>/2021/04/06/LeetCode%E4%B9%8B%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="回文链表"><a href="#回文链表" class="headerlink" title="回文链表"></a>回文链表</h1><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>请判断一个链表是否为回文链表。</p>
<p><strong>示例：</strong></p>
<pre><code>输入: 1-&gt;2
输出: false
</code></pre>
<p><strong>示例 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 1-&gt;2-&gt;2-&gt;1</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>
<h2 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h2><p>使用递归，递归的归刚好反向的，就回溯的过程中从前往后对比。</p>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    ListNode temp=<span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">       temp = head;</span><br><span class="line">       <span class="keyword">return</span> check(head);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(ListNode head)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span> flag = check(head.next)&amp;&amp;(head.val==temp.val);</span><br><span class="line">        temp = temp.next;</span><br><span class="line">        <span class="keyword">return</span> flag; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之子集</title>
    <url>/2021/03/27/LeetCode%E4%B9%8B%E5%AD%90%E9%9B%86/</url>
    <content><![CDATA[<h1 id="子集"><a href="#子集" class="headerlink" title="子集"></a>子集</h1><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>给你一个整数数组 <code>nums</code> ，数组中的元素 <strong>互不相同</strong> 。返回该数组所有可能的子集（幂集）。</p>
<p>解集 <strong>不能</strong> 包含重复的子集。你可以按 <strong>任意顺序</strong> 返回解集。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums &#x3D; [1,2,3]</span><br><span class="line">输出：[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums &#x3D; [0]</span><br><span class="line">输出：[[],[0]]</span><br></pre></td></tr></table></figure>
<h2 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h2><ul>
<li>使用回溯法，进行子集枚举。(排列组合子集都可以用到)</li>
</ul>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; temp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        dfs(<span class="number">0</span>,nums);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cur == nums.length) &#123;</span><br><span class="line">            ans.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(temp));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        temp.add(nums[cur]);</span><br><span class="line">        dfs(cur + <span class="number">1</span>, nums);</span><br><span class="line">        temp.remove(temp.size() - <span class="number">1</span>);</span><br><span class="line">        dfs(cur + <span class="number">1</span>, nums);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之找到所有数组中消失的数字</title>
    <url>/2021/03/20/LeetCode%E4%B9%8B%E6%89%BE%E5%88%B0%E6%89%80%E6%9C%89%E6%95%B0%E7%BB%84%E4%B8%AD%E6%B6%88%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/</url>
    <content><![CDATA[<h1 id="找到所有数组中消失的数字"><a href="#找到所有数组中消失的数字" class="headerlink" title="找到所有数组中消失的数字"></a>找到所有数组中消失的数字</h1><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>给定一个范围在 1 ≤ a[i] ≤ <em>n</em> ( <em>n</em> = 数组大小 ) 的 整型数组，数组中的元素一些出现了两次，另一些只出现一次。</p>
<p>找到所有在 [1, <em>n</em>] 范围之间没有出现在数组中的数字。</p>
<p>您能在不使用额外空间且时间复杂度为*O(n)*的情况下完成这个任务吗? 你可以假定返回的数组不算在额外空间内。</p>
<h2 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h2><p>这题要求找出1到n数租缺少了哪一个，就开一个大小为n的数组，然后遍历nums把每个元素以坐标存在新开的数组中，最后统计看那个坐标的元素为0则就少哪个数。</p>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">findDisappearedNumbers</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[len+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">            count[num]+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(count[i]==<span class="number">0</span>)&#123;</span><br><span class="line">                ans.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之对称二叉树</title>
    <url>/2021/04/03/LeetCode%E4%B9%8B%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<h1 id="对称二叉树"><a href="#对称二叉树" class="headerlink" title="对称二叉树"></a>对称二叉树</h1><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>给定一个二叉树，检查它是否是镜像对称的。</p>
<p><strong>示例：</strong></p>
<p>例如，二叉树 <code>[1,2,2,3,4,4,3]</code> 是对称的。</p>
<pre><code>    1
   / \
  2   2
 / \ / \
3  4 4  3
</code></pre>
<p>但是下面这个 <code>[1,2,2,null,3,null,3]</code> 则不是镜像对称的:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  1</span><br><span class="line"> &#x2F; \</span><br><span class="line">2   2</span><br><span class="line"> \   \</span><br><span class="line"> 3    3</span><br></pre></td></tr></table></figure>

<h2 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h2><p>使用递归，先将完整的二叉树分成两个小的左右单独的树进行递归对比，如果左右子树都为空说明对称返回true，若一边为空一边不为空则返回false说明不对称，若节点的值不相同也返回false，最重要的是<strong>注意：因为要求镜像对称所以左子树的左节点要和右子树的右节点进行对比，左子树的右节点要和右子树的左节点进行对比！</strong></p>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSymmetric</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> check(root.left,root.right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(TreeNode left,TreeNode right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left==<span class="keyword">null</span>&amp;&amp;right==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(left==<span class="keyword">null</span>||right==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(left.val!=right.val)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> check(left.left,right.right)&amp;&amp;check(left.right,right.left);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之括号的生成</title>
    <url>/2021/04/09/LeetCode%E4%B9%8B%E6%8B%AC%E5%8F%B7%E7%9A%84%E7%94%9F%E6%88%90/</url>
    <content><![CDATA[<h1 id="括号生成"><a href="#括号生成" class="headerlink" title="括号生成"></a>括号生成</h1><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>数字 <code>n</code> 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 <strong>有效的</strong> 括号组合。</p>
<p><strong>示例：</strong></p>
<pre><code>输入：n = 3
输出：[&quot;((()))&quot;,&quot;(()())&quot;,&quot;(())()&quot;,&quot;()(())&quot;,&quot;()()()&quot;]
</code></pre>
<p><strong>示例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：n &#x3D; 1</span><br><span class="line">输出：[&quot;()&quot;]</span><br></pre></td></tr></table></figure>
<h2 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h2><p>使用dfs，注意需要判断左右括号是否小于0了，否则就会递归到死！</p>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        getKH(ans, <span class="string">&quot;&quot;</span>, n, n);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getKH</span><span class="params">(List&lt;String&gt; ans,String str,<span class="keyword">int</span> lCount,<span class="keyword">int</span> rCount)</span></span>&#123;</span><br><span class="line">      	<span class="comment">//出口说明左右括号都选完了</span></span><br><span class="line">        <span class="keyword">if</span>(lCount==<span class="number">0</span>&amp;&amp;rCount==<span class="number">0</span>)&#123;</span><br><span class="line">            ans.add(str);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当剩下的左括号比右括号多时肯定不合法可以直接回溯了</span></span><br><span class="line">        <span class="keyword">if</span>(lCount&gt;rCount)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      	<span class="comment">//选左括号</span></span><br><span class="line">        <span class="keyword">if</span>(lCount&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            getKH(ans, str+<span class="string">&quot;(&quot;</span>, lCount-<span class="number">1</span>, rCount);</span><br><span class="line">        &#125;</span><br><span class="line">      	<span class="comment">//选右括号</span></span><br><span class="line">        <span class="keyword">if</span>(rCount&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            getKH(ans, str+<span class="string">&quot;)&quot;</span>, lCount, rCount-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之最大子序和</title>
    <url>/2021/03/26/LeetCode%E4%B9%8B%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/</url>
    <content><![CDATA[<h1 id="最大子序和"><a href="#最大子序和" class="headerlink" title="最大子序和"></a>最大子序和</h1><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>给定一个整数数组 <code>nums</code> ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums &#x3D; [-2,1,-3,4,-1,2,1,-5,4]</span><br><span class="line">输出：6</span><br><span class="line">解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums &#x3D; [1]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure>
<p><strong>示例 3：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums &#x3D; [0]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure>
<h2 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h2><ul>
<li>使用动态规划,我们边遍历数组边算出当前的最大和，然后再比较之前的最大和得出最终的最大和</li>
</ul>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        <span class="comment">//dp记录当前最大和</span></span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> ans = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            dp[i] = Math.max(dp[i-<span class="number">1</span>]+nums[i],nums[i]);</span><br><span class="line">            <span class="keyword">if</span>(dp[i]&gt;ans)&#123;</span><br><span class="line">                ans = dp[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之最小栈</title>
    <url>/2021/04/02/LeetCode%E4%B9%8B%E6%9C%80%E5%B0%8F%E6%A0%88/</url>
    <content><![CDATA[<h1 id="最小栈"><a href="#最小栈" class="headerlink" title="最小栈"></a>最小栈</h1><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>设计一个支持 push ，pop ，top 操作，并能在常数时间内检索到最小元素的栈。</p>
<p>push(x) —— 将元素 x 推入栈中。<br>pop() —— 删除栈顶的元素。<br>top() —— 获取栈顶元素。<br>getMin() —— 检索栈中的最小元素。</p>
<p><strong>示例 ：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">[&quot;MinStack&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;getMin&quot;,&quot;pop&quot;,&quot;top&quot;,&quot;getMin&quot;]</span><br><span class="line">[[],[-2],[0],[-3],[],[],[],[]]</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">[null,null,null,null,-3,null,0,-2]</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">MinStack minStack &#x3D; new MinStack();</span><br><span class="line">minStack.push(-2);</span><br><span class="line">minStack.push(0);</span><br><span class="line">minStack.push(-3);</span><br><span class="line">minStack.getMin();   --&gt; 返回 -3.</span><br><span class="line">minStack.pop();</span><br><span class="line">minStack.top();      --&gt; 返回 0.</span><br><span class="line">minStack.getMin();   --&gt; 返回 -2.</span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https:&#x2F;&#x2F;leetcode-cn.com&#x2F;problems&#x2F;min-stack</span><br><span class="line">著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure>
<h2 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h2><ul>
<li>使用辅助栈的方法，把每次插入最小的放入辅助栈，需要最小的就peek辅助栈栈顶，需要pop就看是否是辅助栈栈顶元素，若是辅助栈也要一并pop出来</li>
</ul>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; stack;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; min_stack;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MinStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        min_stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        stack.push(x);</span><br><span class="line">        <span class="keyword">if</span>(min_stack.isEmpty() || x &lt;= min_stack.peek())</span><br><span class="line">            min_stack.push(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = stack.pop();</span><br><span class="line">        <span class="keyword">if</span>(temp==min_stack.peek())&#123;</span><br><span class="line">            min_stack.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stack.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> min_stack.peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MinStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MinStack obj = new MinStack();</span></span><br><span class="line"><span class="comment"> * obj.push(x);</span></span><br><span class="line"><span class="comment"> * obj.pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.top();</span></span><br><span class="line"><span class="comment"> * int param_4 = obj.getMin();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之根据身高重建队列</title>
    <url>/2021/04/13/LeetCode%E4%B9%8B%E6%A0%B9%E6%8D%AE%E8%BA%AB%E9%AB%98%E9%87%8D%E5%BB%BA%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<h1 id="根据身高重建队列"><a href="#根据身高重建队列" class="headerlink" title="根据身高重建队列"></a>根据身高重建队列</h1><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>假设有打乱顺序的一群人站成一个队列，数组 people 表示队列中一些人的属性（不一定按顺序）。每个 people[i] = [hi, ki] 表示第 i 个人的身高为 hi ，前面 正好 有 ki 个身高大于或等于 hi 的人。</p>
<p>请你重新构造并返回输入数组 people 所表示的队列。返回的队列应该格式化为数组 queue ，其中 queue[j] = [hj, kj] 是队列中第 j 个人的属性（queue[0] 是排在队列前面的人）。</p>
<p><strong>示例：</strong></p>
<pre><code>输入：people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]
输出：[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]
解释：
编号为 0 的人身高为 5 ，没有身高更高或者相同的人排在他前面。
编号为 1 的人身高为 7 ，没有身高更高或者相同的人排在他前面。
编号为 2 的人身高为 5 ，有 2 个身高更高或者相同的人排在他前面，即编号为 0 和 1 的人。
编号为 3 的人身高为 6 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。
编号为 4 的人身高为 4 ，有 4 个身高更高或者相同的人排在他前面，即编号为 0、1、2、3 的人。
编号为 5 的人身高为 7 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。
因此 [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] 是重新构造后的队列。
</code></pre>
<p><strong>示例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：people &#x3D; [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]</span><br><span class="line">输出：[[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]</span><br></pre></td></tr></table></figure>
<h2 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h2><p>​    先根据身高逆序排序，再按照ki顺序排序，这样排序个子高的就不需要动了比它矮的直接插在它前面即可，直接根据它的ki直接插入到集合中。</p>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] reconstructQueue(<span class="keyword">int</span>[][] people) &#123;</span><br><span class="line">        Arrays.sort(people, <span class="keyword">new</span> Comparator&lt;<span class="keyword">int</span>[]&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span>[] b)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[<span class="number">0</span>]!=b[<span class="number">0</span>])&#123;</span><br><span class="line">                    <span class="keyword">return</span> Integer.compare(b[<span class="number">0</span>],a[<span class="number">0</span>]);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> Integer.compare(a[<span class="number">1</span>],b[<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        List&lt;<span class="keyword">int</span>[]&gt; ans = <span class="keyword">new</span> ArrayList&lt;<span class="keyword">int</span>[]&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] person : people) &#123;</span><br><span class="line">            ans.add(person[<span class="number">1</span>],person);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans.toArray(<span class="keyword">new</span> <span class="keyword">int</span>[ans.size()][]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之有效的括号</title>
    <url>/2021/03/21/LeetCode%E4%B9%8B%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</url>
    <content><![CDATA[<h1 id="有效的括号"><a href="#有效的括号" class="headerlink" title="有效的括号"></a>有效的括号</h1><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;&#123;&#39;</code>，<code>&#39;&#125;&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串 <code>s</code> ，判断字符串是否有效。</p>
<p>有效字符串需满足：</p>
<ol>
<li>左括号必须用相同类型的右括号闭合。</li>
<li>左括号必须以正确的顺序闭合。</li>
</ol>
<h2 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h2><p>这题括号的匹配刚好契合数据结构栈先进后出的特性。。所以就当输入为左括号时就入栈，当为右括号时就弹出栈顶元素进行匹配，匹配成功则继续，失败则直接返回false，这里有两个需要注意的地方就是当字符串长度为1时就肯定没效直接返回false，还有当循环结束了栈里面还有字符那说明也没用相应的匹配也返回false;</p>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line">        <span class="keyword">if</span>(len==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                <span class="keyword">char</span> ch = s.charAt(i);</span><br><span class="line">                <span class="keyword">if</span>(stack.empty())&#123;</span><br><span class="line">                    stack.push(ch);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(ch==<span class="string">&#x27;(&#x27;</span>||ch==<span class="string">&#x27;[&#x27;</span>||ch==<span class="string">&#x27;&#123;&#x27;</span>)&#123;</span><br><span class="line">                        stack.push(ch);</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">                        <span class="keyword">char</span> temp = stack.pop();</span><br><span class="line">                        <span class="keyword">if</span>(temp!=<span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="string">&#x27;]&#x27;</span>)&#123;</span><br><span class="line">                        <span class="keyword">char</span> temp = stack.pop();</span><br><span class="line">                        <span class="keyword">if</span>(temp!=<span class="string">&#x27;[&#x27;</span>)&#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="string">&#x27;&#125;&#x27;</span>)&#123;</span><br><span class="line">                        <span class="keyword">char</span> temp = stack.pop();</span><br><span class="line">                        <span class="keyword">if</span>(temp!=<span class="string">&#x27;&#123;&#x27;</span>)&#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!stack.empty())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之汉明距离</title>
    <url>/2021/03/16/LeetCode%E4%B9%8B%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/</url>
    <content><![CDATA[<h1 id="汉明距离"><a href="#汉明距离" class="headerlink" title="汉明距离"></a>汉明距离</h1><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>两个整数之间的<a href="https://baike.baidu.com/item/%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB">汉明距离</a>指的是这两个数字对应二进制位不同的位置的数目。</p>
<p>给出两个整数 <code>x</code> 和 <code>y</code>，计算它们之间的汉明距离。</p>
<p><strong>注意：</strong><br>0 ≤ <code>x</code>, <code>y</code> &lt; 231.</p>
<p><strong>示例</strong>:</p>
<p><strong>输入</strong>: x = 1, y = 4</p>
<p><strong>输出</strong>: 2</p>
<p><strong>解释</strong>:<br>1   (0 0 0 1)<br>4   (0 1 0 0)<br>          ↑     ↑</p>
<p>上面的箭头指出了对应二进制位不同的位置。</p>
<h2 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h2><ul>
<li>先x异或y将相同二进制位变为0，不相同的二进制位变为1</li>
<li>再用Integer内置bitCount函数计算有多少个1</li>
</ul>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingDistance</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> Integer.bitCount(x^y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之比特位计数</title>
    <url>/2021/04/07/LeetCode%E4%B9%8B%E6%AF%94%E7%89%B9%E4%BD%8D%E8%AE%A1%E6%95%B0/</url>
    <content><![CDATA[<h1 id="比特位计数"><a href="#比特位计数" class="headerlink" title="比特位计数"></a>比特位计数</h1><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>给定一个非负整数 <strong>num</strong>。对于 <strong>0 ≤ i ≤ num</strong> 范围中的每个数字 <strong>i</strong> ，计算其二进制数中的 1 的数目并将它们作为数组返回。</p>
<p><strong>示例：</strong></p>
<pre><code>输入: 2
输出: [0,1,1]
</code></pre>
<p><strong>示例 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 5</span><br><span class="line">输出: [0,1,1,2,1,2]</span><br></pre></td></tr></table></figure>
<h2 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h2><p>这里偷个懒直接用java类库</p>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] countBits(<span class="keyword">int</span> num) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[num+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= num; i++) &#123;</span><br><span class="line">            arr[i] = Integer.bitCount(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之爬楼梯</title>
    <url>/2021/03/23/LeetCode%E4%B9%8B%E7%88%AC%E6%A5%BC%E6%A2%AF/</url>
    <content><![CDATA[<h1 id="爬楼梯"><a href="#爬楼梯" class="headerlink" title="爬楼梯"></a>爬楼梯</h1><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>假设你正在爬楼梯。需要 <em>n</em> 阶你才能到达楼顶。</p>
<p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>
<h2 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h2><p>经典的动态规划题目</p>
<p>我们用 f(x)<em>f</em>(<em>x</em>) 表示爬到第 x<em>x</em> 级台阶的方案数，考虑最后一步可能跨了一级台阶，也可能跨了两级台阶，所以我们可以列出式子：<em>f</em>(<em>x</em>)=<em>f</em>(<em>x</em>−1)+<em>f</em>(<em>x</em>−2)</p>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(n&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> pre1=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> pre2=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            ans=pre1+pre2;</span><br><span class="line">            pre1=pre2;</span><br><span class="line">            pre2=ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之环形链表</title>
    <url>/2021/04/04/LeetCode%E4%B9%8B%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="环形链表"><a href="#环形链表" class="headerlink" title="环形链表"></a>环形链表</h1><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>给定一个链表，判断链表中是否有环。</p>
<p>如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。</p>
<p>如果链表中存在环，则返回 true 。 否则，返回 false 。</p>
<p><strong>示例：</strong></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Iooooot/photos@master/blogAboutPic/image-20210330210515093.png" alt="image-20210330210515093"></p>
<pre><code>输入：head = [3,2,0,-4], pos = 1
输出：true
解释：链表中有一个环，其尾部连接到第二个节点。
</code></pre>
<h2 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h2><p>使用快慢双指针，先判断是否为空链表和只有一个节点若是直接返回false，再用快指针去追慢指针，如果有环一定会相遇，反之不会</p>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>||head.next==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode fir = head;</span><br><span class="line">        ListNode sec = head.next;</span><br><span class="line">        <span class="keyword">while</span>(fir!=sec)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sec==<span class="keyword">null</span>||sec.next==<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            fir = fir.next;</span><br><span class="line">            sec = sec.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之相交链表</title>
    <url>/2021/04/01/LeetCode%E4%B9%8B%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="相交链表"><a href="#相交链表" class="headerlink" title="相交链表"></a>相交链表</h1><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>编写一个程序，找到两个单链表相交的起始节点。</p>
<p>如下面的两个链表<strong>：</strong></p>
<p><strong>示例：</strong></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Iooooot/photos@master/blogAboutPic/image-20210326133334338.png" alt="image-20210326133334338"></p>
<pre><code>输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3
输出：Reference of the node with value = 8
输入解释：相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。
</code></pre>
<h2 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h2><p>使用双指针，分别以一样的速度走一样长度的路径(A链+B链)，看是否会相遇在一个点若没有相交就只会都指向最后的null节点。</p>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (headA == <span class="keyword">null</span> || headB == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    ListNode pA = headA, pB = headB;</span><br><span class="line">    <span class="keyword">while</span> (pA != pB) &#123;</span><br><span class="line">        pA = pA == <span class="keyword">null</span> ? headB : pA.next;</span><br><span class="line">        pB = pB == <span class="keyword">null</span> ? headA : pB.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之翻转二叉树</title>
    <url>/2021/03/29/LeetCode%E4%B9%8B%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<h1 id="翻转二叉树"><a href="#翻转二叉树" class="headerlink" title="翻转二叉树"></a>翻转二叉树</h1><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>翻转一棵二叉树。</p>
<p><strong>示例：</strong></p>
<p>输入：</p>
<pre><code>       4
     /   \
  2     7
 / \   / \
1   3 6   9
</code></pre>
<p>输出：<br>            4<br>      /   <br>      7     2<br>     / \   / <br>    9   6 3   1</p>
<h2 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h2><p>使用深度遍历即可,左右子字点互换即可。</p>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">invertTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode temp = root.left;</span><br><span class="line">        root.left = root.right;</span><br><span class="line">        root.right = temp;</span><br><span class="line">        root.left=invertTree(root.left);</span><br><span class="line">        root.right=invertTree(root.right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之翻转链表</title>
    <url>/2021/03/31/LeetCode%E4%B9%8B%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h1><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>反转一个单链表。</p>
<p><strong>示例：</strong></p>
<p>给定二叉树 <code>[3,9,20,null,null,15,7]</code>，</p>
<pre><code>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL
输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL
</code></pre>
<h2 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h2><p>这题的目的就是把两节点之间的指向反转</p>
<p>所以可以用双指针一个pre 一个cur ，让cur.next指向pre，再把双指针依次往后挪最后返回即可。</p>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode pre = <span class="keyword">null</span>;</span><br><span class="line">        ListNode cur = head;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="keyword">null</span>)&#123;</span><br><span class="line">          <span class="comment">//这个temp用于指向下一个不然后面cur.next=pre之后就找不到了</span></span><br><span class="line">            ListNode temp = cur.next;</span><br><span class="line">            cur.next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux</title>
    <url>/2022/09/28/Linux/</url>
    <content><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><p>Linux 是一款操作系统，免费，开源， 安全，高效，稳定， 处理高并发非常强悍，现在很多的企业级的项目都部署到 Linux/unix 服务器运行。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li>CentOS下载地址：<ul>
<li>官方：<a href="https://www.centos.org/download/">https://www.centos.org/download/</a></li>
<li>网易镜像:<a href="http://mirrors.163.comlcentos/6/isos/">http://mirrors.163.comlcentos/6/isos/</a></li>
<li>搜狐镜像:<a href="http://mirrors.sohu.comlcentos/6/isos">http://mirrors.sohu.comlcentos/6/isos</a></li>
</ul>
</li>
<li>安装VMware</li>
<li>创建虚拟机</li>
<li>安装Centos<ul>
<li>进行处理器配置（虚拟机总核心数不能超过主机核心数。若超出则会警告提醒。）</li>
<li>配置虚拟机内存</li>
<li>设置centos镜像文件</li>
<li>配置网络类型（一般选择NAT模式，桥接模式容易ip冲突）</li>
<li>选择语言、网络配置、安装相关环境等….（注意有需要可以选择安装<strong>GNOME Desktop</strong>图形界面）</li>
<li>进行磁盘分区（/boot区(大概1G)、swap交换分区(大概2G)、根分区/(剩余都是)）</li>
<li>等待开机即可</li>
</ul>
</li>
</ul>
<h2 id="Linux目录结果"><a href="#Linux目录结果" class="headerlink" title="Linux目录结果"></a>Linux目录结果</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blogpic-1305209282.cos.ap-chengdu.myqcloud.com/img/image-20220719094340797.png" alt="image-20220719094340797"></p>
<p>以下是对这些目录的解释：</p>
<ul>
<li><p><strong>/bin</strong>：<br>bin 是 Binaries (二进制文件) 的缩写, 这个目录存放着最经常使用的命令。</p>
</li>
<li><p><strong>/boot：</strong><br>这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。</p>
</li>
<li><p><strong>/dev ：</strong><br>dev 是 Device(设备) 的缩写, 该目录下存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。</p>
</li>
<li><p><strong>/etc：</strong><br>etc 是 Etcetera(等等) 的缩写,这个目录用来存放所有的系统管理所需要的配置文件和子目录。</p>
</li>
<li><p><strong>/home</strong>：<br>用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的，如上图中的 alice、bob 和 eve。</p>
</li>
<li><p><strong>/lib</strong>：<br>lib 是 Library(库) 的缩写这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。</p>
</li>
<li><p><strong>/lost+found</strong>：<br>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</p>
</li>
<li><p><strong>/media</strong>：<br>linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。</p>
</li>
<li><p><strong>/mnt</strong>：<br>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 /mnt/ 上，然后进入该目录就可以查看光驱里的内容了。</p>
</li>
<li><p><strong>/opt</strong>：<br>opt 是 optional(可选) 的缩写，这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</p>
</li>
<li><p><strong>/proc</strong>：<br>proc 是 Processes(进程) 的缩写，/proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。</p>
</li>
<li><p><strong>/root</strong>：<br>该目录为系统管理员，也称作超级权限者的用户主目录。</p>
</li>
<li><p><strong>/sbin</strong>：<br>s 就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是系统管理员使用的系统管理程序。</p>
</li>
<li><p><strong>/selinux</strong>：<br>这个目录是 Redhat/CentOS 所特有的目录，Selinux 是一个安全机制，类似于 windows 的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</p>
</li>
<li><p><strong>/srv</strong>：<br>该目录存放一些服务启动之后需要提取的数据。</p>
</li>
<li><p><strong>/sys</strong>：</p>
<p>这是 Linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。</p>
<p>sysfs 文件系统集成了下面3种文件系统的信息：针对进程信息的 proc 文件系统、针对设备的 devfs 文件系统以及针对伪终端的 devpts 文件系统。</p>
<p>该文件系统是内核设备树的一个直观反映。</p>
<p>当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</p>
</li>
<li><p><strong>/tmp</strong>：<br>tmp 是 temporary(临时) 的缩写这个目录是用来存放一些临时文件的。</p>
</li>
<li><p><strong>/usr</strong>：<br>usr 是 unix shared resources(共享资源) 的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。</p>
</li>
<li><p><strong>/usr/bin：</strong><br>系统用户使用的应用程序。</p>
</li>
<li><p><strong>/usr/sbin：</strong><br>超级用户使用的比较高级的管理程序和系统守护程序。</p>
</li>
<li><p><strong>/usr/src：</strong><br>内核源代码默认的放置目录。</p>
</li>
<li><p><strong>/var</strong>：<br>var 是 variable(变量) 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p>
</li>
<li><p><strong>/run</strong>：<br>是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run。</p>
</li>
</ul>
<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><h3 id="关机-重启"><a href="#关机-重启" class="headerlink" title="关机/重启"></a>关机/重启</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> sync 将数据由内存同步到硬盘中。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> shutdown 关机指令，你可以man shutdown 来看一下帮助文档。例如你可以运行如下命令关机：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> shutdown –h 10 ‘This server will shutdown after 10 mins’ 这个命令告诉大家，计算机将在10分钟后关机，并且会显示在登陆用户的当前屏幕中。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> shutdown –h now 立马关机</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> shutdown –h 20:25 系统会在今天20:25关机</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> shutdown –h +10 十分钟后关机</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> shutdown –r now 系统立马重启</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> shutdown –r +10 系统十分钟后重启</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> reboot 就是重启，等同于 shutdown –r now</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> halt 关闭系统，等同于shutdown –h now 和 poweroff</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> shutdown -c <span class="comment">###要取消即将进行的关机</span></span></span><br></pre></td></tr></table></figure>
<h3 id="运行级别相关"><a href="#运行级别相关" class="headerlink" title="运行级别相关"></a>运行级别相关</h3><p>运行级别说明：</p>
<p>0 ：关机、1  ：单用户【找回丢失密码】、2：多用户状态没有网络服务、3：多用户状态有网络服务、4：系统未使用保留给用户、5：图形界面、6：系统重启（常用运行级别是 3 和 5）</p>
<ul>
<li>修改运行级别：<code>init 级别</code></li>
</ul>
<h3 id="帮助指令"><a href="#帮助指令" class="headerlink" title="帮助指令"></a>帮助指令</h3><ul>
<li>man：<code>man [命令或配置文件]</code></li>
<li>help：<code>help 命令 </code></li>
</ul>
<h3 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h3><ul>
<li><p>显示当前目录：<code>pwd</code></p>
</li>
<li><p>列出目录文件：<code>ls [ 选 项] [目录或是文件]</code></p>
<ul>
<li>选项：<ul>
<li>-a ：全部的文件，连同隐藏文件( 开头为 . 的文件) 一起列出来(常用)</li>
<li>-d ：仅列出目录本身，而不是列出目录内的文件数据(常用)</li>
<li>-l ：长数据串列出，包含文件的属性与权限等等数据；(常用)</li>
</ul>
</li>
</ul>
</li>
<li><p>切换目录：<code>cd 目录</code></p>
</li>
<li><p>创建目录：<code>mkdir [-p] 目录名称</code></p>
<ul>
<li>-p ：帮助你直接将所需要的目录(包含上一级目录)递归创建起来</li>
</ul>
</li>
<li><p>删除目录：<code> rmdir [-p] 目录名称</code>(文件必须为空)</p>
<ul>
<li>-p ：从该目录起，一次删除多级空目录</li>
</ul>
</li>
<li><p>复制文件或目录：<code>cp [选项] 即拷贝文件和目录。</code></p>
<ul>
<li>选项：<ul>
<li>-d：若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；</li>
<li>-f：为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</li>
<li>-i：若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</li>
<li>-l：进行硬式连结(hard link)的连结档创建，而非复制文件本身；</li>
<li>-p：连同文件的属性一起复制过去，而非使用默认属性(备份常用)；</li>
<li>-r：递归持续复制，用於目录的复制行为；(常用)</li>
<li>-s：复制成为符号连结档 (symbolic link)，亦即『捷径』文件；</li>
</ul>
</li>
</ul>
</li>
<li><p>移除文件或目录：<code>rm [选项] 文件或目录</code></p>
<ul>
<li>选项：<ul>
<li>-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；</li>
<li>-i ：互动模式，在删除前会询问使用者是否动作</li>
<li>-r ：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！</li>
</ul>
</li>
</ul>
</li>
<li><p>移动文件与目录，或修改名称：<code>mv [-fiu] source destination</code>(-fiu同rm)</p>
</li>
<li><p>创建空文件：<code>touch 文件名</code></p>
</li>
<li><p>查看文件：<code>cat [-AbEnTv] 文件名</code>或者倒着显示<code>tac 文件名 </code> 或者一页页显示<code>more/less 文件名</code>或者取出文件前/后面几行<code>head/tail [-n 10] 文件名 </code></p>
<ul>
<li>选项：<ul>
<li>-A ：相当於 -vET 的整合选项，可列出一些特殊字符而不是空白而已；</li>
<li>-b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！</li>
<li>-E ：将结尾的断行字节 $ 显示出来；</li>
<li>-n ：列印出行号，连同空白行也会有行号，与 -b 的选项不同；</li>
<li>-T ：将 [tab] 按键以 ^I 显示出来；</li>
<li>-v ：列出一些看不出来的特殊字符</li>
</ul>
</li>
<li>more/less的指令<ul>
<li>空白键  ：向下翻动一页；</li>
<li>[pagedown]：向下翻动一页；</li>
<li>[pageup] ：向上翻动一页；</li>
<li>/字串   ：向下搜寻『字串』的功能；</li>
<li>?字串   ：向上搜寻『字串』的功能；</li>
<li>n     ：重复前一个搜寻 (与 / 或 ? 有关！)</li>
<li>N     ：反向的重复前一个搜寻 (与 / 或 ? 有关！)</li>
<li>q     ：离开 less 这个程序；</li>
</ul>
</li>
</ul>
</li>
<li><p>输出指令：<code>&gt;  和 &gt;&gt;</code></p>
<ul>
<li>&gt; 输出重定向 : 会将原来的文件的内容覆盖</li>
</ul>
</li>
<li><p>&gt;&gt; 追加： 不会覆盖原来文件的内容，而是追加到文件的尾部</p>
</li>
<li><p>输出内容到控制台：<code>echo 指令</code></p>
</li>
<li><p>创建软链接：<code>ln -s [原文件或目录] [软链接名]</code></p>
</li>
<li><p>查看历史指令：<code>history</code></p>
</li>
<li><p>统计该目录的文件数：<code>ls -l[R(递归包括子文件)] 目录 | grep &quot;^以什么开头&quot; | wc -l</code></p>
</li>
<li><p>以树形展示该目录的文件：<code>tree</code></p>
</li>
</ul>
<h3 id="时间日期"><a href="#时间日期" class="headerlink" title="时间日期"></a>时间日期</h3><ul>
<li>展示当前时间<ul>
<li><code>date </code>（显示当前时间）</li>
<li><code>date +%Y</code>（显示当前年份）</li>
<li><code>date +%m</code>（显示当前月份）</li>
<li><code>date +%d</code>（显示当前是哪一天）</li>
<li><code>date &quot;+%Y-%m-%d %H:%M:%S&quot;</code>（显示年月日时分秒）</li>
</ul>
</li>
<li>设置日期：<code>date  -s  字符串时间</code></li>
<li>显示日历：<code>cal</code></li>
</ul>
<h3 id="搜索查找"><a href="#搜索查找" class="headerlink" title="搜索查找"></a>搜索查找</h3><ul>
<li>查找文件：<code>find [搜索目录范围]  [选项]</code><ul>
<li>选项：<ul>
<li>-name ：按照指定文件名查找</li>
<li>-user：查找指定用户名所有的文件</li>
<li>-size：按照指定文件大小查找</li>
</ul>
</li>
</ul>
</li>
<li>定位文件：<code>locate 搜索文件</code>(第一次运行前，必须使用 updatedb 指令创建 locate 数据库)</li>
<li>查找文件内内容：<code>cat 文件名 | grep [选项] 查询内容</code><ul>
<li>选项：<ul>
<li>-n：显示行号</li>
<li>-i：忽略大小写</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="压缩解压"><a href="#压缩解压" class="headerlink" title="压缩解压"></a>压缩解压</h3><ul>
<li>gzip/gunzip 指令：<ul>
<li>压缩：<code>gzip 文件</code></li>
<li>解压：<code>gunzip 文件.gz</code></li>
</ul>
</li>
<li>zip/unzip指令：<ul>
<li>压缩：<code>zip [选项] XXX.zip</code></li>
<li>解压：<code>unzip   [选项] XXX.zip</code></li>
<li>选项：<ul>
<li>-r：递归压缩，即压缩目录</li>
<li>-d&lt;目录&gt; ：指定解压后文件的存放目录</li>
</ul>
</li>
</ul>
</li>
<li>tar指令：<ul>
<li><code>tar  [选项]  XXX.tar.gz</code></li>
<li>选项：<ul>
<li>-c：产生.tar打包文件</li>
<li>-v：显示详细住息</li>
<li>-f：指定压缩后的文件名</li>
<li>-z：打包同时压缩</li>
<li>-x：解包.tar文件</li>
</ul>
</li>
<li>实例：<ul>
<li>压缩多个文件或者目录：<code>tar -zcvf a.tar.gz a1.txt a2.txt 或者/home/</code> </li>
<li>解压：<code>tar -zxvf a.tar.gz -C 指定目录</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="用户登录注销"><a href="#用户登录注销" class="headerlink" title="用户登录注销"></a>用户登录注销</h3><ul>
<li>登录：<code>su 用户名</code>（从权限高的用户切换到权限低的用户，不需要输入密码，反之需要）</li>
<li>切换到原来的用户：<code>exit</code></li>
<li>注销：<code>logout</code>(如果当前为root用户使用注销回返回普通用户，如果是普通用户则直接退出系统)</li>
</ul>
<blockquote>
<p>logout 注销指令在图形运行级别无效，在 运行级别 3 下有效</p>
</blockquote>
<h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><p>Linux 系统是一个多用户多任务的操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。并且Linux 的用户需要至少要属于一个组。</p>
<ul>
<li>添加用户：<code>useradd [选项] 用户名</code><ul>
<li>选项：<ul>
<li>-c comment ：指定一段注释性描述。</li>
<li>-d 目录 ：指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。（默认会在home下创建与用户同名的目录）</li>
<li>-g 用户组 指定用户所属的用户组。</li>
<li>-G 用户组，用户组 指定用户所属的附加组。</li>
<li>-s Shell文件 指定用户的登录Shell。</li>
<li>-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</li>
</ul>
</li>
</ul>
</li>
<li>删除用户：<code>userdel [选项] 用户名</code><ul>
<li>选项：<ul>
<li>-r ：它的作用是把用户的主目录一起删除。</li>
</ul>
</li>
</ul>
</li>
<li>查询用户信息：<code>id 用户名</code></li>
<li>修改用户信息：<code>usermod 选项 用户名</code>（选项与useradd一样）</li>
<li>管理密码：<code>passwd 选项 用户</code><ul>
<li>选项：<ul>
<li>-l 锁定密码，即禁用账号。</li>
<li>-u 密码解锁。</li>
<li>-d 使账号无密码。</li>
<li>-f 强迫用户下次登录时修改密码。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h3><p>类似于角色，系统可以对有共性的多个用户进行统一的管理。</p>
<ul>
<li>添加用户组：<code>groupadd 选项 用户组</code><ul>
<li>选项：<ul>
<li>-g GID 指定新用户组的组标识号（GID）。</li>
<li>-o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同。</li>
</ul>
</li>
</ul>
</li>
<li>删除用户组：<code>groupdel 用户组</code></li>
<li>修改用户组：<code>groupmod 选项 用户组</code><ul>
<li>选项：<ul>
<li>-g GID 为用户组指定新的组标识号。</li>
<li>-o 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。</li>
<li>-n新用户组 将用户组的名字改为新名字</li>
</ul>
</li>
</ul>
</li>
<li>切换用户组：<code>newgrp 组名</code>（前提是用户同时属于多个用户组，并且用户组确实是该用户的主组或附加组）</li>
</ul>
<h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><p>在 linux 中每个文件有所有者、所在组、其它组的概念。</p>
<ul>
<li>相关概念<ul>
<li>所有者：一般为文件的创建者,谁创建了该文件，就自然的成为该文件的所有者。</li>
<li>所在组：所有者所在的用户组</li>
<li>其他组：所有者不在的用户组</li>
</ul>
</li>
<li>修改文件所有者：<code>chown [-R] 用户名 文件名</code>(-R递归)</li>
<li>修改文件所在组：<code>chgrp [-R] 组名 文件名</code>(-R 递归)</li>
<li>文件权限的查看：<code>ls -l</code>如：<code>dr-xr-xr-x   2 root root 4096 Dec 14  2012 bin</code><ul>
<li>Linux 中第一个字符代表这个文件是目录、文件或链接文件等等<ul>
<li>当为 <strong>d</strong> 则是目录</li>
<li>当为 <strong>-</strong> 则是文件；</li>
<li>若是 <strong>l</strong> 则表示为链接文档(link file)；</li>
<li>若是 <strong>b</strong> 则表示为装置文件里面的可供储存的接口设备(可随机存取装置)；</li>
<li>若是 <strong>c</strong> 则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)。</li>
</ul>
</li>
<li>接下来的字符中，以三个为一组(所有者、所在组、其他组)，且均为 <strong>rwx</strong> 的三个参数的组合。其中， <strong>r</strong> 代表可读(read)、 <strong>w</strong> 代表可写(write)、 <strong>x</strong> 代表可执行(execute)。如果没有权限，就会出现减号 <strong>-</strong> </li>
</ul>
</li>
<li>修改文件权限：<code>chmod [-R] 777 文件或目录</code>或者<code>chmod u=rwx,g=rx,o=r</code></li>
</ul>
<h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3><p>Linux 磁盘管理常用三个命令为 <code>df</code>、<code>du</code> 和 <code>fdisk</code>。</p>
<ul>
<li>列出文件系统的整体磁盘使用量：<code>df [-ahikHTm] [目录或文件名]</code><ul>
<li>-a ：列出所有的文件系统，包括系统特有的 /proc 等文件系统；</li>
<li>-h ：以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示；</li>
<li>-i ：不用硬盘容量，而以 inode 的数量来显示</li>
<li>-k ：以 KBytes 的容量显示各文件系统；</li>
<li>-H ：以 M=1000K 取代 M=1024K 的进位方式；</li>
<li>-T ：显示文件系统类型, 连同该 partition 的 filesystem 名称 (例如 ext3) 也列出；</li>
<li>-m ：以 MBytes 的容量显示各文件系统；</li>
</ul>
</li>
<li>检查磁盘空间使用量：<code>du [-ahskm] 文件或目录名称</code><ul>
<li>-a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。</li>
<li>-h ：以人们较易读的容量格式 (G/M) 显示；</li>
<li>-s ：列出总量而已，而不列出每个各别的目录占用容量；</li>
<li>-S ：不包括子目录下的总计，与 -s 有点差别。</li>
<li>-k ：以 KBytes 列出容量显示；</li>
<li>-m ：以 MBytes 列出容量显示；</li>
</ul>
</li>
<li>用于磁盘分区：<code>fdisk [-l] 装置名称</code><ul>
<li>-l ：输出后面接的装置所有的分区内容。若仅有 fdisk -l 时， 则系统将会把整个系统内能够搜寻到的装置的分区均列出来。</li>
</ul>
</li>
</ul>
<h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><ul>
<li>查看进程：<code>ps -选项/pstree -p</code>(pstree展示进程树)<ul>
<li>常用选项：<ul>
<li>-A 列出所有的进程</li>
<li>-w 显示加宽可以显示较多的资讯</li>
<li>-ef：显示父亲pid</li>
<li>-au 显示较详细的资讯</li>
<li>-aux 显示所有包含其他使用者的进程</li>
</ul>
</li>
<li>-aux输出格式：<ul>
<li><code>USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND</code><ul>
<li>USER: 行程拥有者</li>
<li>PID: pid</li>
<li>%CPU: 占用的 CPU 使用率</li>
<li>%MEM: 占用的记忆体使用率</li>
<li>VSZ: 占用的虚拟记忆体大小</li>
<li>RSS: 占用的记忆体大小</li>
<li>TTY: 终端的次要装置号码 (minor device number of tty)</li>
<li>STAT: 该行程的状态:<ul>
<li>D: 无法中断的休眠状态 (通常 IO 的进程)</li>
<li>R: 正在执行中</li>
<li>S: 静止状态</li>
<li>T: 暂停执行</li>
<li>Z: 不存在但暂时无法消除</li>
<li>W: 没有足够的记忆体分页可分配</li>
<li>&lt;: 高优先序的行程</li>
<li>N: 低优先序的行程</li>
<li>L: 有记忆体分页分配并锁在记忆体内 (实时系统或捱A I/O)</li>
</ul>
</li>
<li>START: 行程开始时间</li>
<li>TIME: 执行的时间</li>
<li>COMMAND:所执行的指令</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>杀掉进程：<code>kill [&lt;信息名称或编号&gt;][程序]/killall [选项]  name</code>(killall 与 kill 不同的是它会杀死指定名字的所有进程。)<ul>
<li>最常用的信号是：<ul>
<li>1 (HUP)：重新加载进程。</li>
<li>9 (KILL)：杀死一个进程。</li>
<li>15 (TERM)：正常停止一个进程。</li>
</ul>
</li>
<li>killall的选项<ul>
<li>-e | –exact ： 进程需要和名字完全相符</li>
<li>-I | –ignore-case ：忽略大小写</li>
<li>-g | –process-group ：结束进程组</li>
<li>-i | –interactive ：结束之前询问</li>
<li>-l | –list ：列出所有的信号名称</li>
<li>-q | –quite ：进程没有结束时，不输出任何信息</li>
<li>-r | –regexp ：将进程名模式解释为扩展的正则表达式。</li>
<li>-s | –signal ：发送指定信号</li>
<li>-u | –user ：结束指定用户的进程</li>
<li>-v | –verbose ：显示详细执行过程</li>
<li>-w | –wait ：等待所有的进程都结束</li>
<li>-V |–version ：显示版本信息</li>
<li>–help ：显示帮助信息</li>
</ul>
</li>
</ul>
</li>
<li>动态监控进程：<code>top [选项]</code>（可以进入之后输入u/k来显示某个用户的进程/杀死某个进程）<ul>
<li>d : 改变显示的更新速度，或是在交谈式指令列( interactive command)按 s</li>
<li>q : 没有任何延迟的显示速度，如果使用者是有 superuser 的权限，则 top 将会以最高的优先序执行</li>
<li>c : 切换显示模式，共有两种模式，一是只显示执行档的名称，另一种是显示完整的路径与名称</li>
<li>S : 累积模式，会将己完成或消失的子进程 ( dead child process ) 的 CPU time 累积起来</li>
<li>s : 安全模式，将交谈式指令取消, 避免潜在的危机</li>
<li>i : 不显示任何闲置 (idle) 或无用 (zombie) 的进程</li>
<li>n : 更新的次数，完成后将会退出 top</li>
<li>b : 批次档模式，搭配 “n” 参数一起使用，可以用来将 top 的结果输出到档案内</li>
</ul>
</li>
</ul>
<h3 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h3><ul>
<li><p>查看服务：<code>chkconfig [--level 运行级别][服务名] --list</code></p>
</li>
<li><p>启动服务：<code>systemctl start 服务名</code></p>
</li>
<li><p>停止服务：<code>systemctl stop 服务名</code></p>
</li>
<li><p>重启服务：<code>systemctl restart 服务名</code></p>
</li>
<li><p>重新加载：<code>systemctl reload 服务名</code></p>
</li>
<li><p>查看服务状态：<code>systemctl status 服务名</code></p>
</li>
</ul>
<h3 id="管理网络状态"><a href="#管理网络状态" class="headerlink" title="管理网络状态"></a>管理网络状态</h3><ul>
<li>查看网络状态：<code>netstat [选项]</code><ul>
<li>-an  按一定顺序排列输出</li>
<li>-p  显示哪个进程在调用</li>
</ul>
</li>
</ul>
<h3 id="YUM"><a href="#YUM" class="headerlink" title="YUM"></a>YUM</h3><ul>
<li> 列出所有可更新的软件清单命令：<code>yum check-update</code></li>
<li> 更新所有软件命令：<code>yum update</code></li>
<li> 仅安装指定的软件命令：<code>yum install &lt;package_name&gt;</code></li>
<li> 仅更新指定的软件命令：<code>yum update &lt;package_name&gt;</code></li>
<li> 列出所有可安裝的软件清单命令：<code>yum list</code></li>
<li> 删除软件包命令：<code>yum remove &lt;package_name&gt;</code></li>
<li> 查找软件包命令：<code>yum search &lt;keyword&gt;</code></li>
</ul>
<h2 id="Vi-Vim编辑器"><a href="#Vi-Vim编辑器" class="headerlink" title="Vi/Vim编辑器"></a>Vi/Vim编辑器</h2><p>Vim 是从 vi 发展出来的一个文本编辑器。代码补全、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</p>
<p>基本上 vi/vim 共分为三种模式，分别是<strong>命令模式</strong>，<strong>编辑模式</strong>和<strong>一般模式</strong>。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://blogpic-1305209282.cos.ap-chengdu.myqcloud.com/img/image-20220719101949849.png" alt="image-20220719101949849"></p>
<h3 id="一般模式可用的光标移动、复制粘贴、搜索替换等"><a href="#一般模式可用的光标移动、复制粘贴、搜索替换等" class="headerlink" title="一般模式可用的光标移动、复制粘贴、搜索替换等"></a>一般模式可用的光标移动、复制粘贴、搜索替换等</h3><table>
<thead>
<tr>
<th align="left">移动光标的方法</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">h 或 向左箭头键(←)</td>
<td>光标向左移动一个字符</td>
</tr>
<tr>
<td align="left">j 或 向下箭头键(↓)</td>
<td>光标向下移动一个字符</td>
</tr>
<tr>
<td align="left">k 或 向上箭头键(↑)</td>
<td>光标向上移动一个字符</td>
</tr>
<tr>
<td align="left">l 或 向右箭头键(→)</td>
<td>光标向右移动一个字符</td>
</tr>
<tr>
<td align="left">[Ctrl] + [f]</td>
<td>屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)</td>
</tr>
<tr>
<td align="left">[Ctrl] + [b]</td>
<td>屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)</td>
</tr>
<tr>
<td align="left">[Ctrl] + [d]</td>
<td>屏幕『向下』移动半页</td>
</tr>
<tr>
<td align="left">[Ctrl] + [u]</td>
<td>屏幕『向上』移动半页</td>
</tr>
<tr>
<td align="left">+</td>
<td>光标移动到非空格符的下一行</td>
</tr>
<tr>
<td align="left">-</td>
<td>光标移动到非空格符的上一行</td>
</tr>
<tr>
<td align="left">n<space></td>
<td>那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。例如 20<space> 则光标会向后面移动 20 个字符距离。</td>
</tr>
<tr>
<td align="left">0 或功能键[Home]</td>
<td>这是数字『 0 』：移动到这一行的最前面字符处 (常用)</td>
</tr>
<tr>
<td align="left">$ 或功能键[End]</td>
<td>移动到这一行的最后面字符处(常用)</td>
</tr>
<tr>
<td align="left">H</td>
<td>光标移动到这个屏幕的最上方那一行的第一个字符</td>
</tr>
<tr>
<td align="left">M</td>
<td>光标移动到这个屏幕的中央那一行的第一个字符</td>
</tr>
<tr>
<td align="left">L</td>
<td>光标移动到这个屏幕的最下方那一行的第一个字符</td>
</tr>
<tr>
<td align="left">G</td>
<td>移动到这个档案的最后一行(常用)</td>
</tr>
<tr>
<td align="left">nG</td>
<td>n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)</td>
</tr>
<tr>
<td align="left">gg</td>
<td>移动到这个档案的第一行，相当于 1G 啊！ (常用)</td>
</tr>
<tr>
<td align="left">n<Enter></td>
<td>n 为数字。光标向下移动 n 行(常用)</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">删除、复制</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">x, X</td>
<td>在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)</td>
</tr>
<tr>
<td align="left">nx</td>
<td>n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。</td>
</tr>
<tr>
<td align="left">dd</td>
<td>剪切游标所在的那一整行(常用)，用 p/P 可以粘贴。</td>
</tr>
<tr>
<td align="left">ndd</td>
<td>n 为数字。剪切光标所在的向下 n 行，例如 20dd 则是剪切 20 行(常用)，用 p/P 可以粘贴。</td>
</tr>
<tr>
<td align="left">d1G</td>
<td>删除光标所在到第一行的所有数据</td>
</tr>
<tr>
<td align="left">dG</td>
<td>删除光标所在到最后一行的所有数据</td>
</tr>
<tr>
<td align="left">d$</td>
<td>删除游标所在处，到该行的最后一个字符</td>
</tr>
<tr>
<td align="left">d0</td>
<td>那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符</td>
</tr>
<tr>
<td align="left">yy</td>
<td>复制游标所在的那一行(常用)</td>
</tr>
<tr>
<td align="left">nyy</td>
<td>n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)</td>
</tr>
<tr>
<td align="left">y1G</td>
<td>复制游标所在行到第一行的所有数据</td>
</tr>
<tr>
<td align="left">yG</td>
<td>复制游标所在行到最后一行的所有数据</td>
</tr>
<tr>
<td align="left">y0</td>
<td>复制光标所在的那个字符到该行行首的所有数据</td>
</tr>
<tr>
<td align="left">y$</td>
<td>复制光标所在的那个字符到该行行尾的所有数据</td>
</tr>
<tr>
<td align="left">p, P</td>
<td>p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！ 举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？ 那么原本的第 20 行会被推到变成 30 行。 (常用)</td>
</tr>
<tr>
<td align="left">J</td>
<td>将光标所在行与下一行的数据结合成同一行</td>
</tr>
<tr>
<td align="left">c</td>
<td>重复删除多个数据，例如向下删除 10 行，[ 10cj ]</td>
</tr>
<tr>
<td align="left">u</td>
<td>复原前一个动作。(常用)</td>
</tr>
<tr>
<td align="left">[Ctrl]+r</td>
<td>重做上一个动作。(常用)</td>
</tr>
<tr>
<td align="left">.</td>
<td>不要怀疑！这就是小数点！意思是重复前一个动作的意思。 如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！ (常用)</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">搜索替换</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">/word</td>
<td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！ (常用)</td>
</tr>
<tr>
<td align="left">?word</td>
<td>向光标之上寻找一个字符串名称为 word 的字符串。</td>
</tr>
<tr>
<td align="left">n</td>
<td>这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！</td>
</tr>
<tr>
<td align="left">N</td>
<td>这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。</td>
</tr>
<tr>
<td align="left">:n1,n2s/word1/word2/g</td>
<td>n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则： 『:100,200s/vbird/VBIRD/g』。(常用)</td>
</tr>
<tr>
<td align="left"><strong>:1,$s/word1/word2/g</strong> 或 <strong>:%s/word1/word2/g</strong></td>
<td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(常用)</td>
</tr>
<tr>
<td align="left"><strong>:1,$s/word1/word2/gc</strong> 或 <strong>:%s/word1/word2/gc</strong></td>
<td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用)</td>
</tr>
</tbody></table>
<h3 id="一般模式切换到指令行模式的可用的按钮说明"><a href="#一般模式切换到指令行模式的可用的按钮说明" class="headerlink" title="一般模式切换到指令行模式的可用的按钮说明"></a>一般模式切换到指令行模式的可用的按钮说明</h3><table>
<thead>
<tr>
<th align="left">指令行的储存、离开等指令</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">:w</td>
<td>将编辑的数据写入硬盘档案中(常用)</td>
</tr>
<tr>
<td align="left">:w!</td>
<td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td>
</tr>
<tr>
<td align="left">:q</td>
<td>离开 vi (常用)</td>
</tr>
<tr>
<td align="left">:q!</td>
<td>若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td>
</tr>
<tr>
<td align="left">:wq</td>
<td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td>
</tr>
<tr>
<td align="left">ZZ</td>
<td>这是大写的 Z 喔！如果修改过，保存当前文件，然后退出！效果等同于(保存并退出)</td>
</tr>
<tr>
<td align="left">ZQ</td>
<td>不保存，强制退出。效果等同于 **:q!**。</td>
</tr>
<tr>
<td align="left">:w [filename]</td>
<td>将编辑的数据储存成另一个档案（类似另存新档）</td>
</tr>
<tr>
<td align="left">:r [filename]</td>
<td>在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td>
</tr>
<tr>
<td align="left">:n1,n2 w [filename]</td>
<td>将 n1 到 n2 的内容储存成 filename 这个档案。</td>
</tr>
<tr>
<td align="left">:! command</td>
<td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls /home』即可在 vi 当中察看 /home 底下以 ls 输出的档案信息！</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">vim 环境的变更</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">:set nu</td>
<td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td>
</tr>
<tr>
<td align="left">:set nonu</td>
<td>与 set nu 相反，为取消行号！</td>
</tr>
</tbody></table>
<h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><p>在使用linux的时候，时不时会有需要定义处理程序的需求，这时就需要定时的任务调度。（任务调度是指系统在某个时间执行的特定的命令或程序）。</p>
<p>linux提供了设置定时任务的相关命令：</p>
<ul>
<li><code>crontab [选项]</code><ul>
<li>选项说明：<ul>
<li>-e：编辑crontab定时任务</li>
<li>-l：查询crontab任务</li>
<li>-r：删除当前用户所有的crontab任务</li>
</ul>
</li>
</ul>
</li>
<li><code>service crond restart</code> ：重启任务调度</li>
</ul>
<p>相关目录：</p>
<ul>
<li>/var/spool/cron/ 目录下存放的是每个用户包括root的crontab任务，每个任务以创建者的名字命名</li>
<li>/etc/crontab 这个文件负责调度各种管理和维护任务。</li>
<li>/etc/cron.d/ 这个目录用来存放任何要执行的crontab文件或脚本。</li>
</ul>
<p>步骤：</p>
<ol>
<li>进行编辑任务：<code>crontab -e</code></li>
<li>编辑任务：<code>*/1 * * * * ls –l  /etc/ &gt; /tmp/to.txt</code></li>
<li>保存退出，即可自动执行任务</li>
</ol>
<p>crontab的命令构成为 时间+动作，其时间有<strong>分、时、日、月、周</strong>五种</p>
<p>操作符有：</p>
<ul>
<li>***** 取值范围内的所有数字</li>
<li><strong>/</strong> 每过多少个数字</li>
<li><strong>-</strong> 从X到Z</li>
<li><strong>，</strong>散列数字</li>
</ul>
<p><a href="https://www.iamwawa.cn/crontab.html">在线自动生成工具</a></p>
<h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><p>虽然网络已经连通，但是以防每次重启虚拟机，linux的ip地址都动态的发生变化，还需要进行进一步网络配置</p>
<h3 id="配置虚拟网卡"><a href="#配置虚拟网卡" class="headerlink" title="配置虚拟网卡"></a>配置虚拟网卡</h3><ul>
<li><p>查看虚拟网卡：点击虚拟机左上角编辑—&gt;打开虚拟网络编辑器</p>
<img src= "/img/loading.gif" data-lazy-src="https://blogpic-1305209282.cos.ap-chengdu.myqcloud.com/img/image-20220725142839432.png" alt="image-20220725142839432" style="zoom:50%;" />
</li>
<li><p>查看网关</p>
<img src= "/img/loading.gif" data-lazy-src="https://blogpic-1305209282.cos.ap-chengdu.myqcloud.com/img/image-20220725143059013.png" alt="image-20220725143059013" style="zoom:50%;" />
</li>
<li><p>如果需要修改，可以点击更改设置进行修改</p>
</li>
</ul>
<h3 id="获取ip"><a href="#获取ip" class="headerlink" title="获取ip"></a>获取ip</h3><ul>
<li><p>设置自动连接：点击右上角网络图标，进入后选择你需要修改的网络点击设置</p>
<img src= "/img/loading.gif" data-lazy-src="https://blogpic-1305209282.cos.ap-chengdu.myqcloud.com/img/image-20220725143816818.png" alt="image-20220725143816818" style="zoom:50%;" />

<p>缺点：每次连接ip地址不一样</p>
</li>
<li><p>直接修改配置文件来指定ip</p>
<ul>
<li><p>进入进入目录/etc/sysconfig/network-scripts后用vim编辑ifcfg-ens33文件（版本为centos7）</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://blogpic-1305209282.cos.ap-chengdu.myqcloud.com/img/image-20220727090644394.png" alt="image-20220727090644394"></p>
</li>
</ul>
</li>
</ul>
<h2 id="Shell编程"><a href="#Shell编程" class="headerlink" title="Shell编程"></a>Shell编程</h2><p>在进行服务器集群管理、服务器的维护时，需要编写 Shell 程序来进行服务器管理比如编写一个定时备份数据库的脚本。</p>
<h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>Shell 是一个命令行解释器，它为用户提供了一个向 Linux 内核发送请求以便运行程序的界面系统级程序，用户可以用 Shell 来启动、挂起、停止甚至是编写一些程序。</p>
<p>Linux 的 Shell 种类众多，常见的有：</p>
<ul>
<li>Bourne Shell（/usr/bin/sh或/bin/sh）</li>
<li>Bourne Again Shell（/bin/bash）**(常用)**</li>
<li>C Shell（/usr/bin/csh）</li>
<li>K Shell（/usr/bin/ksh）</li>
<li>Shell for Root（/sbin/sh）</li>
</ul>
<h4 id="编写"><a href="#编写" class="headerlink" title="编写"></a>编写</h4><p>因为使用的是Bourne Again Shell，所以必须以<code>#!/bin/bash</code>开头,如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo &quot;Hello World !&quot;</span><br></pre></td></tr></table></figure>
<h5 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h5><ul>
<li>定义变量：<code>变量名 = 值</code></li>
<li>使用变量：使用一个定义过的变量，只要在变量名前面加美元符号即可<ul>
<li><code>$&#123;变量名&#125;</code>(大括号可以省但不建议)</li>
</ul>
</li>
<li>设置变量只读(不能再次赋值)：<code>readonly 变量名</code></li>
<li>删除变量：<code>unset 变量名</code>（unset 命令不能删除只读变量）</li>
<li>将 shell 变量输出为环境变量：<code>export 变量名=变量值</code></li>
</ul>
<blockquote>
<p>变量名的命名须遵循如下规则：</p>
<ul>
<li>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。</li>
<li>中间不能有空格，可以使用下划线 <strong>_</strong>。</li>
<li>不能使用标点符号。</li>
<li>不能使用bash里的关键字（可用help命令查看保留关键字）。</li>
</ul>
</blockquote>
<h5 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h5><p>原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，expr 最常用。(expr 是一款表达式计算工具，使用它能完成表达式的求值操作)</p>
<ul>
<li>算术运算符：+ 、- 、* 、/ 、% 、= 、== 、 != <ul>
<li>使用：<code>expr $a + $b</code>以及<code>[ $a == $b ]</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>条件表达式要放在方括号之间，并且要有空格，例如: <strong>[$a==$b]</strong> 是错误的，必须写成 <strong>[ $a == $b ]</strong></p>
</blockquote>
<ul>
<li><p>关系运算符：<code>[ $a 运算符 $b ]</code></p>
<ul>
<li>是否想等：<code>-eq</code></li>
<li>是否不想等：<code>-ne</code></li>
<li>大于：<code>-gt</code></li>
<li>小于：<code>-lt</code></li>
<li>大于等于：<code>-ge</code></li>
<li>小于等于：<code>-le</code></li>
</ul>
</li>
<li><p>布尔运算符：例子<code>[ $a -lt 20 -o $b -gt 100 ]</code></p>
<ul>
<li>取反：<code>!</code></li>
<li>或运算：<code>-o</code></li>
<li>与运算：<code>-a</code></li>
</ul>
</li>
<li><p>逻辑运算符：例子：<code>[[ $a -lt 100 || $b -gt 100 ]]</code></p>
<ul>
<li>与：<code>&amp;&amp;</code></li>
<li>或：<code>||</code></li>
</ul>
</li>
<li><p>字符串运算符：例子<code>[ -n &quot;$a&quot; ]</code></p>
<ul>
<li>判断是否想等：<code>=</code></li>
<li>是否不想等：<code>!=</code></li>
<li>检查长度是否0：<code>-z</code></li>
<li>长度是否不为0：<code>-n</code></li>
<li>检查是否不为空：<code>$</code></li>
</ul>
</li>
<li><p>文件测试运算符：例子<code>[ -r $file]</code></p>
<ul>
<li>检测文件是否是块设备文件：<code>-b file</code></li>
<li>检测文件是否是字符设备文件：<code>-c file</code></li>
<li>检测文件是否是目录：<code>-d file</code></li>
<li>检测文件是否是普通文件：<code>-f file</code></li>
<li>检测文件是否设置了 SGID 位：<code>-g file</code></li>
<li>检测文件是否设置了粘着位(Sticky Bit)：<code>-k file</code></li>
<li>检测文件是否是有名管道：<code>-p file</code></li>
<li>检测文件是否设置了 SUID 位：<code>-u file</code></li>
<li>检测文件是否可读：<code>-r file</code></li>
<li>检测文件是否可写：<code>-w file</code></li>
<li>检测文件是否可执行：<code>-x file</code></li>
<li>检测文件是否为空：<code>-s file</code></li>
<li>检测文件（包括目录）是否存在：<code>-e file</code></li>
</ul>
</li>
</ul>
<h5 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h5><p>字符串是shell编程中最常用最有用的数据类型，字符串可以用单引号，也可以用双引号，也可以不用引号。</p>
<ul>
<li>字符串拼接：<code>greeting=&quot;hello, &quot;$&#123;your_name&#125;&quot; !&quot;</code>(不需要想java一样用+来拼接)</li>
<li>获取字符串长度：<code>string=&quot;abcd&quot; echo $&#123;#string&#125;</code></li>
<li>提取子串： <code>$&#123;str:1:4&#125;</code>输出从下标为1的字符开始的4个字符</li>
<li>查找子字符：<code>expr index &quot;$string&quot; i</code> 输出i的下标</li>
</ul>
<h5 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h5><ul>
<li><p>定义：<code>数组名=(值1 值2 ... 值n)</code></p>
</li>
<li><p>取值：<code>$&#123;数组名[下标]&#125;</code>(@/*可以获取所有元素<code>echo $&#123;array_name[@]&#125;</code>)</p>
</li>
<li><p>获取长度：<code>length=$&#123;#array_name[@]&#125;</code></p>
</li>
<li><p>获取所有键：<code>$&#123;!array_name[@]&#125;</code></p>
</li>
<li><p>设置关联数组（类似于java的map）：<code>declare -A MAP_name</code></p>
<p>如：<code>declare -A map=([&quot;a&quot;]=&quot;1&quot;,[&quot;b&quot;]=&quot;2&quot;)</code></p>
</li>
</ul>
<h5 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h5><ul>
<li><p>单行注释：<code>#</code></p>
</li>
<li><p>多行注释：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:&lt;&lt;EOF</span><br><span class="line">注释内容...</span><br><span class="line">注释内容...</span><br><span class="line">注释内容...</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<h5 id="参数的传递"><a href="#参数的传递" class="headerlink" title="参数的传递"></a>参数的传递</h5></li>
<li><p>传参：<code>./test.sh 1 2 3</code>(执行的时候写在后面)</p>
</li>
<li><p>获取参数：<code>$n</code>(n为参数位置，n为0时获取的是文件名)</p>
</li>
<li><p>获取参数个数：<code>$#</code></p>
</li>
<li><p>以一个单字符串显示所有向脚本传递的参数：<code>$*/$@</code>($@会将参数用引号分隔)</p>
</li>
<li><p>脚本运行的当前进程ID号：<code>$$</code></p>
</li>
<li><p>后台运行的最后一个进程的ID号：<code>$!</code></p>
</li>
</ul>
<h5 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h5><ul>
<li>echo：用于字符串的输出<ul>
<li>-e：开启转义</li>
<li>输出日期等：echo <code>date</code></li>
</ul>
</li>
<li>printf：输出函数（与c语言的类似）<ul>
<li>格式：<code>printf  format-string  [arguments...]</code></li>
</ul>
</li>
</ul>
<h5 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h5><ul>
<li><p>条件判断：</p>
<ul>
<li><p><code>if 条件 then 执行语句 else 执行语句2 fi</code></p>
</li>
<li><p><code>if 条件 then 执行语句 elif 条件2 then 执行语句2 else 执行语句3 fi</code></p>
</li>
<li><p>例子：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line">if [ $a == $b ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;a 等于 b&quot;</span><br><span class="line">elif [ $a -gt $b ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;a 大于 b&quot;</span><br><span class="line">elif [ $a -lt $b ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;a 小于 b&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;没有符合的条件&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>for循环：</p>
<ul>
<li><p><code>for 变量 in 数组 do 执行语句 done </code></p>
</li>
<li><p>案例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for loop in 1 2 3 4 5</span><br><span class="line">do</span><br><span class="line">    echo &quot;The value is: $loop&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>while 语句</p>
<ul>
<li><p><code>while 条件 do 执行语句 done</code></p>
</li>
<li><p>案例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">int=1</span><br><span class="line">while(( $int&lt;=5 ))</span><br><span class="line">do</span><br><span class="line">    echo $int</span><br><span class="line">    let &quot;int++&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>until循环</p>
<ul>
<li><p><code>until 条件 do 执行语句 done</code></p>
</li>
<li><p>案例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=0</span><br><span class="line"></span><br><span class="line">until [ ! $a -lt 10 ]</span><br><span class="line">do</span><br><span class="line">   echo $a</span><br><span class="line">   a=`expr $a + 1`</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>多分支语句：</p>
<ul>
<li><p><code>case 值 in 值1) 执行语句 ;; 值2) 执行语句2 ;; *) 执行语句3 ;; esac</code></p>
</li>
<li><p>案例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">case $aNum in</span><br><span class="line">    1)  echo &#x27;你选择了 1&#x27;</span><br><span class="line">    ;;</span><br><span class="line">    2)  echo &#x27;你选择了 2&#x27;</span><br><span class="line">    ;;</span><br><span class="line">    3)  echo &#x27;你选择了 3&#x27;</span><br><span class="line">    ;;</span><br><span class="line">    4)  echo &#x27;你选择了 4&#x27;</span><br><span class="line">    ;;</span><br><span class="line">    *)  echo &#x27;你没有输入 1 到 4 之间的数字&#x27;</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>跳出循环(与java一样)：</p>
<ul>
<li>break</li>
<li>continue</li>
</ul>
</li>
</ul>
<h5 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h5><ul>
<li><p>定义：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[ function ] funname()</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    执行语句</span><br><span class="line"></span><br><span class="line">    [return int;]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>调用：<code>函数名</code></p>
</li>
<li><p>案例1(无参数)：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">demoFun()&#123;</span><br><span class="line">    echo <span class="string">&quot;这是我的第一个 shell 函数!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">echo <span class="string">&quot;-----函数开始执行-----&quot;</span></span><br><span class="line">demoFun</span><br><span class="line">echo <span class="string">&quot;-----函数执行完毕-----&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>案例2(有参数)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">funWithReturn()&#123;</span><br><span class="line">    echo &quot;这个函数会对输入的两个数字进行相加运算...&quot;</span><br><span class="line">    echo &quot;输入第一个数字: &quot;</span><br><span class="line">    read aNum</span><br><span class="line">    echo &quot;输入第二个数字: &quot;</span><br><span class="line">    read anotherNum</span><br><span class="line">    echo &quot;两个数字分别为 $aNum 和 $anotherNum !&quot;</span><br><span class="line">    return $(($aNum+$anotherNum))</span><br><span class="line">&#125;</span><br><span class="line">funWithReturn</span><br><span class="line">echo &quot;输入的两个数字之和为 $? !&quot;</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>获得返回值：<code>$?</code></li>
<li>获取参数个数：<code>$#</code></li>
<li>获取当前进程id号：<code>$$</code></li>
<li>获取后台进行的最后一个进程号：<code>$!</code></li>
<li>以字符串形式展示参数：<code>$*/$@</code></li>
</ul>
</blockquote>
</li>
</ul>
<h5 id="引入外部shell文件"><a href="#引入外部shell文件" class="headerlink" title="引入外部shell文件"></a>引入外部shell文件</h5><ul>
<li>方式一：<code>. 文件路径</code></li>
<li>方式二：<code>source 文件路径</code></li>
</ul>
<h4 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h4><ol>
<li>方式一：<ul>
<li>使用户获得可执行权限：<code>chmod +x 脚本文件</code></li>
<li>直接输入脚本路径如：<code>./test.sh</code></li>
</ul>
</li>
<li>方式二：<ul>
<li><code>sh + 脚本路径</code></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatisPlus</title>
    <url>/2022/04/04/MyBatisPlus/</url>
    <content><![CDATA[<h1 id="MyBatisPlus"><a href="#MyBatisPlus" class="headerlink" title="MyBatisPlus"></a>MyBatisPlus</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>MyBatis-Plus简称 MP，是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p>
<h3 id="框架结构"><a href="#框架结构" class="headerlink" title="框架结构"></a>框架结构</h3><p><img src= "/img/loading.gif" data-lazy-src="https://s3.bmp.ovh/imgs/2022/04/04/ca8c342eaf9efd69.png" alt="image-20220330213819094"></p>
<h2 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h2><h3 id="相关starter依赖"><a href="#相关starter依赖" class="headerlink" title="相关starter依赖"></a>相关starter依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="mapper接口"><a href="#mapper接口" class="headerlink" title="mapper接口"></a>mapper接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span>  <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要application添加上@MapperScan(“com.wht.mapper”)注解扫描mapper接口/或者用@Mapper注解</p>
<h3 id="入门测试"><a href="#入门测试" class="headerlink" title="入门测试"></a>入门测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectList</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;User&gt; list = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="BaseMapper的具体功能介绍"><a href="#BaseMapper的具体功能介绍" class="headerlink" title="BaseMapper的具体功能介绍"></a>BaseMapper的具体功能介绍</h2><h3 id="添加功能"><a href="#添加功能" class="headerlink" title="添加功能"></a>添加功能</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User(<span class="keyword">null</span>,<span class="string">&quot;张三&quot;</span>,<span class="number">23</span>,<span class="string">&quot;1369281736@qq.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> res = userMapper.insert(user);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;res:&quot;</span>+res);</span><br><span class="line">    System.out.println(<span class="string">&quot;id:&quot;</span>+user.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="删除功能"><a href="#删除功能" class="headerlink" title="删除功能"></a>删除功能</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="comment">//根据主键id删除</span></span><br><span class="line">      <span class="keyword">int</span> res = userMapper.deleteById(<span class="number">1509495136467660801L</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;res:&quot;</span>+res);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//根据map条件删除</span></span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> res = userMapper.deleteByMap(map);</span><br><span class="line">        System.out.println(<span class="string">&quot;res:&quot;</span>+ res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//批量删除</span></span><br><span class="line">        List&lt;Long&gt; list = Arrays.asList(<span class="number">1L</span>, <span class="number">2L</span>);</span><br><span class="line">        <span class="keyword">int</span> res = userMapper.deleteBatchIds(list);</span><br><span class="line">        System.out.println(<span class="string">&quot;res:&quot;</span>+ res);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="修改功能"><a href="#修改功能" class="headerlink" title="修改功能"></a>修改功能</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">4L</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        <span class="comment">//根据id修改</span></span><br><span class="line">        <span class="keyword">int</span> res = userMapper.updateById(user);</span><br><span class="line">        System.out.println(<span class="string">&quot;res:&quot;</span>+ res);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="查询功能"><a href="#查询功能" class="headerlink" title="查询功能"></a>查询功能</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelect</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//根据单一id查询</span></span><br><span class="line">        User user = userMapper.selectById(<span class="number">4L</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="comment">//多个id查询</span></span><br><span class="line">        List&lt;User&gt; list = userMapper.selectBatchIds(Arrays.asList(<span class="number">3L</span>, <span class="number">4L</span>));</span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line">        <span class="comment">//根据条件map查询</span></span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectByMap(map);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="自定义功能"><a href="#自定义功能" class="headerlink" title="自定义功能"></a>自定义功能</h3><p>完全同MyBatis：</p>
<pre><code>- 在Mapper接口中定义方法
- 在项目resources.mapper文件夹下创建对应的XXXmapper.xml
- 编写对应sql
</code></pre>
<h2 id="通用Service接口"><a href="#通用Service接口" class="headerlink" title="通用Service接口"></a>通用Service接口</h2><p>说明：</p>
<ul>
<li><p>通用 Service CRUD 封装IService接口，进一步封装 CRUD 采用 get 查询单行remove 删除list 查询集合 page 分页 前缀命名方式区分 Mapper层避免混淆，</p>
</li>
<li><p>泛型 T 为任意实体对象</p>
</li>
<li><p>建议如果存在自定义通用 Service 方法的可能，请创建自己的 IBaseService继承 Mybatis-Plus提供的基类</p>
</li>
<li><p>对象 Wrapper 为 条件构造器</p>
</li>
</ul>
<h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><p>为了方便以后自定义需要自行定义一个接口和一个实现类来继承MyBatisPlus提供的接口和实现类</p>
<ul>
<li>service接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>service实现类(需要加入容器)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">UserMapper</span>, <span class="title">User</span>&gt; <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>进行测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">		<span class="comment">//获取总记录数</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> count = userService.count();</span><br><span class="line">        System.out.println(<span class="string">&quot;总记录数：&quot;</span>+count);</span><br><span class="line">    &#125;</span><br><span class="line">		<span class="comment">//批量插入</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBathAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            User user = <span class="keyword">new</span> User();</span><br><span class="line">            user.setName(<span class="string">&quot;李&quot;</span>+i);</span><br><span class="line">            user.setAge(<span class="number">20</span>+i);</span><br><span class="line">            list.add(user);</span><br><span class="line">        &#125;</span><br><span class="line">        userService.saveBatch(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="MyBatisPlus提供的注解"><a href="#MyBatisPlus提供的注解" class="headerlink" title="MyBatisPlus提供的注解"></a>MyBatisPlus提供的注解</h2><ul>
<li><p>设置实体类所对应的表名</p>
<ul>
<li><p>@TableName(“数据库的真实表名”)</p>
</li>
<li><p>或者使用全局配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">t_</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>因为MyBatisPlus默认以id为主键，所以当主键名不为id时需要使用注解来指定</p>
<ul>
<li>@TableId<ul>
<li>属性：<ul>
<li>value = “数据库主键名”</li>
<li>type = IdType. AUTO/IdType. ASSIGN_ID (自增/雪花算法)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>设置实体类属性与数据库字段名的对应</p>
<ul>
<li>@TableField(“字段名”)</li>
</ul>
</li>
<li><p>设置数据的逻辑删除</p>
<ul>
<li>首先在表中设置一个逻辑删除判断字段<ul>
<li>并在实体类添加该属性</li>
<li>再使用@TableLogic字段</li>
</ul>
</li>
</ul>
</li>
<li><p>当实体类使用通用枚举属性时</p>
<ul>
<li><p>配置枚举类</p>
</li>
<li><p>在相应的枚举类里的存数据库的字段上添加@EnumValue</p>
</li>
<li><p>设置全局配置:  type-enums-package: com.wht.enums</p>
</li>
</ul>
</li>
</ul>
<h2 id="MyBatisPlus条件构造器"><a href="#MyBatisPlus条件构造器" class="headerlink" title="MyBatisPlus条件构造器"></a>MyBatisPlus条件构造器</h2><ul>
<li>Wrapper：条件构造抽象类<ul>
<li>AbostractWrapper：用于查询条件封装，生成sql的where条件<ul>
<li>QueryWrapper：查询条件封装</li>
<li>UpdateWrapper：更新条件封装</li>
<li>AbstractLambdaWrapper：使用Lambda语法<ul>
<li>LambdaQueryWrapper：用于Lambda语法使用的查询条件构造器</li>
<li>LambdaUpdateWrapper：用于Lambda语法使用的更新条件构造器</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="组装查询条件"><a href="#组装查询条件" class="headerlink" title="组装查询条件"></a>组装查询条件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">      QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">      <span class="comment">//用户username包含a年龄在20~30之间并且email不为空</span></span><br><span class="line">      wrapper.like(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">              .between(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line">              .isNotNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">      List&lt;User&gt; list = userMapper.selectList(wrapper);</span><br><span class="line">      list.forEach(System.out::println);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test06</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">      <span class="comment">//只查询设置的字段</span></span><br><span class="line">      wrapper.select(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>, <span class="string">&quot;email&quot;</span>);</span><br><span class="line">      List&lt;Map&lt;String, Object&gt;&gt; maps = userMapper.selectMaps(wrapper);</span><br><span class="line">      maps.forEach(System.out::println);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test07</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">      <span class="comment">//使用子查询查询id小于等于100的用户信息</span></span><br><span class="line">      wrapper.inSql(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;select id from user where id &lt;= 100&quot;</span>);</span><br><span class="line">      List&lt;User&gt; list = userMapper.selectList(wrapper);</span><br><span class="line">      list.forEach(System.out::println);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test09</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      String username = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      Integer ageBegin = <span class="number">20</span>;</span><br><span class="line">      Integer ageEnd = <span class="number">30</span>;</span><br><span class="line">      QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">      <span class="keyword">if</span>(StringUtils.isNotBlank(username))&#123;</span><br><span class="line">          <span class="comment">//isNotBlank判断某个字符是否为空串不为null不为空白符</span></span><br><span class="line">          wrapper.like(<span class="string">&quot;name&quot;</span>, username);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(ageBegin != <span class="keyword">null</span>)&#123;</span><br><span class="line">          wrapper.ge(<span class="string">&quot;age&quot;</span>, ageBegin);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(ageEnd != <span class="keyword">null</span>)&#123;</span><br><span class="line">          wrapper.le(<span class="string">&quot;age&quot;</span>, ageEnd);</span><br><span class="line">      &#125;</span><br><span class="line">      List&lt;User&gt; list = userMapper.selectList(wrapper);</span><br><span class="line">      list.forEach(System.out::println);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test10</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      String username = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      Integer ageBegin = <span class="number">20</span>;</span><br><span class="line">      Integer ageEnd = <span class="number">30</span>;</span><br><span class="line">      QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">      wrapper.like(StringUtils.isBlank(username), <span class="string">&quot;name&quot;</span>, username)</span><br><span class="line">              .ge(ageBegin != <span class="keyword">null</span>, <span class="string">&quot;age&quot;</span>, ageBegin)</span><br><span class="line">              .le(ageEnd != <span class="keyword">null</span>, <span class="string">&quot;age&quot;</span>,ageEnd);</span><br><span class="line">      List&lt;User&gt; list = userMapper.selectList(wrapper);</span><br><span class="line">      list.forEach(System.out::println);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="排序条件"><a href="#排序条件" class="headerlink" title="排序条件"></a>排序条件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">      QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">      <span class="comment">//按照年龄降序排序若年龄相同按照id升序排序</span></span><br><span class="line">      wrapper.orderByDesc(<span class="string">&quot;age&quot;</span>).orderByAsc(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">      List&lt;User&gt; list = userMapper.selectList(wrapper);</span><br><span class="line">      list.forEach(System.out::println);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="删除条件"><a href="#删除条件" class="headerlink" title="删除条件"></a>删除条件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="comment">//删除邮箱为null的用户</span></span><br><span class="line">      QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">      wrapper.isNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">      <span class="keyword">int</span> i = userMapper.delete(wrapper);</span><br><span class="line">      System.out.println(<span class="string">&quot;res：&quot;</span>+i);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="修改条件"><a href="#修改条件" class="headerlink" title="修改条件"></a>修改条件</h3><ul>
<li>使用QueryWrapper</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span></span>&#123;</span><br><span class="line">      QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">      <span class="comment">//将年龄大于20且用户名包含有a或者邮箱为null的用户信息进行修改</span></span><br><span class="line">      wrapper.gt(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>)</span><br><span class="line">              .like(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">              .or()</span><br><span class="line">              .isNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">      User user = <span class="keyword">new</span> User();</span><br><span class="line">      user.setName(<span class="string">&quot;张四&quot;</span>);</span><br><span class="line">      <span class="keyword">int</span> i = userMapper.update(user, wrapper);</span><br><span class="line">      System.out.println(<span class="string">&quot;res：&quot;</span>+i);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span></span>&#123;</span><br><span class="line">      QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">      <span class="comment">//将用户名包含有a并且（年龄大于20且或者邮箱为null）的用户信息进行修改</span></span><br><span class="line">      wrapper.like(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">              .and(i -&gt; i.gt(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>).or().isNull(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">      User user = <span class="keyword">new</span> User();</span><br><span class="line">      user.setName(<span class="string">&quot;张四&quot;</span>);</span><br><span class="line">      <span class="keyword">int</span> i = userMapper.update(user, wrapper);</span><br><span class="line">      System.out.println(<span class="string">&quot;res：&quot;</span>+i);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>使用UpdateWrapper</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test08</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//将用户名包含有a并且（年龄大于20且或者邮箱为null）的用户信息进行修改</span></span><br><span class="line">      UpdateWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> UpdateWrapper&lt;&gt;();</span><br><span class="line">      wrapper.like(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">              .and(i -&gt; i.gt(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>).or().isNull(<span class="string">&quot;email&quot;</span>));;</span><br><span class="line">      wrapper.set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;大王&quot;</span>).set(<span class="string">&quot;email&quot;</span>, <span class="string">&quot;1369281736@qq.com&quot;</span>);</span><br><span class="line">      <span class="keyword">int</span> i = userMapper.update(<span class="keyword">null</span>, wrapper);</span><br><span class="line">      System.out.println(<span class="string">&quot;res：&quot;</span>+i);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="Lambda条件构造器"><a href="#Lambda条件构造器" class="headerlink" title="Lambda条件构造器"></a>Lambda条件构造器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test11</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      String username = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      Integer ageBegin = <span class="number">20</span>;</span><br><span class="line">      Integer ageEnd = <span class="number">30</span>;</span><br><span class="line">      LambdaQueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">      wrapper.like(StringUtils.isBlank(username), User::getName, username)</span><br><span class="line">              .ge(ageBegin != <span class="keyword">null</span>, User::getAge, ageBegin)</span><br><span class="line">              .le(ageEnd != <span class="keyword">null</span>, User::getAge,ageEnd);</span><br><span class="line">      List&lt;User&gt; list = userMapper.selectList(wrapper);</span><br><span class="line">      list.forEach(System.out::println);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test12</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//将用户名包含有a并且（年龄大于20且或者邮箱为null）的用户信息进行修改</span></span><br><span class="line">      LambdaUpdateWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> LambdaUpdateWrapper&lt;&gt;();</span><br><span class="line">      wrapper.like(User::getName, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">              .and(i -&gt; i.gt(User::getAge, <span class="number">20</span>).or().isNull(User::getEmail));;</span><br><span class="line">      wrapper.set(User::getName, <span class="string">&quot;大王&quot;</span>).set(User::getEmail, <span class="string">&quot;1369281736@qq.com&quot;</span>);</span><br><span class="line">      <span class="keyword">int</span> i = userMapper.update(<span class="keyword">null</span>, wrapper);</span><br><span class="line">      System.out.println(<span class="string">&quot;res：&quot;</span>+i);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h2 id="MyBatisPlus分页插件"><a href="#MyBatisPlus分页插件" class="headerlink" title="MyBatisPlus分页插件"></a>MyBatisPlus分页插件</h2><ul>
<li><p>配置分页插件拦截器</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.wht.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> PaginationInnerInterceptor(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>测试分页</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">      	<span class="comment">//创建分页对象 使用构造器（当前页码，分页大小）</span></span><br><span class="line">        Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">      	<span class="comment">//查询返回page的分页对象</span></span><br><span class="line">        Page&lt;User&gt; userPage = userMapper.selectPage(page, <span class="keyword">null</span>);</span><br><span class="line">        System.out.println(page);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>自定义功能分页</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//mapper接口中的方法</span></span><br><span class="line"><span class="function">Page&lt;User&gt; <span class="title">selectPageVo</span><span class="params">(<span class="meta">@Param(&quot;page&quot;)</span> Page&lt;User&gt; page,<span class="meta">@Param(&quot;age&quot;)</span> Integer age)</span></span>;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line">		<span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">        Page&lt;User&gt; userPage = userMapper.selectPageVo(page, <span class="number">15</span>);</span><br><span class="line">        System.out.println(userPage.getRecords());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="MyBatisPlus乐观锁插件"><a href="#MyBatisPlus乐观锁插件" class="headerlink" title="MyBatisPlus乐观锁插件"></a>MyBatisPlus乐观锁插件</h2><p>数据库由于并发操作的问题引起的数据查询结果不一致的问题：</p>
<p>解决方法：</p>
<ul>
<li>悲观锁：当一个用户对数据库操作时会直接加锁，另一个用户只能阻塞等待</li>
<li>乐观锁：认为这次的操作不会导致冲突，在操作数据时，并不进行任何其他的特殊处理（也就是不加锁），而在进行更新后，再去判断是否有冲突了</li>
</ul>
<p>MyBatisPlus乐观锁的实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//首先数据库和实体类需要多一个版本号的字段</span></span><br><span class="line"><span class="function">VERSION <span class="title">INT</span><span class="params">(<span class="number">11</span>)</span> DEFAULT 0 COMMENT &#x27;乐观锁版本号&#x27;</span></span><br><span class="line"><span class="function">@Version  <span class="comment">//标识版本号字段</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Integer version</span>;  </span><br><span class="line"><span class="comment">//在配置类中添加乐观锁插件</span></span><br><span class="line">interceptor.addInnerInterceptor(<span class="keyword">new</span> OptimisticLockerInnerInterceptor());</span><br></pre></td></tr></table></figure>
<h2 id="多数据源配置"><a href="#多数据源配置" class="headerlink" title="多数据源配置"></a>多数据源配置</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment"># 配置数据源信息</span></span><br><span class="line">	<span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">dynamic:</span></span><br><span class="line">    <span class="comment"># 设置默认的数据源或者数据源组,默认值即为master</span></span><br><span class="line">    <span class="attr">primary:</span> <span class="string">master</span></span><br><span class="line">    <span class="comment"># 严格匹配数据源,默认false.true未匹配到指定数据源时抛异常,false使用默认数据源</span></span><br><span class="line">    <span class="attr">strict:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">master:</span></span><br><span class="line">          <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_plus?characterEncoding=utf-</span></span><br><span class="line">          <span class="number">8</span><span class="string">&amp;useSSL=false</span></span><br><span class="line">          <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">          <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">      <span class="attr">slave_1:</span></span><br><span class="line">          <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_plus_1?characterEncoding=utf-</span></span><br><span class="line">          <span class="number">8</span><span class="string">&amp;useSSL=false</span></span><br><span class="line">          <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">          <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure>
<p>并在service上使用@DS(“数据源”)</p>
]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
        <tag>MybatisPlus</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之移动零</title>
    <url>/2021/03/22/LeetCode%E4%B9%8B%E7%A7%BB%E5%8A%A8%E9%9B%B6/</url>
    <content><![CDATA[<h1 id="移动零"><a href="#移动零" class="headerlink" title="移动零"></a>移动零</h1><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>给定一个数组 <code>nums</code>，编写一个函数将所有 <code>0</code> 移动到数组的末尾，同时保持非零元素的相对顺序。</p>
<p><strong>示例:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [0,1,0,3,12]</span><br><span class="line">输出: [1,3,12,0,0]</span><br></pre></td></tr></table></figure>
<h2 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h2><p>先遍历数组，再遍历的过程中，若该数为0则用count记录次数，若不为0，则将该数放在 i - count 位上并该位变为0，直到遍历完成。</p>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> len = nums.length,count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]==<span class="number">0</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">0</span>||count==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                nums[i-count]=nums[i];</span><br><span class="line">                nums[i]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.toString(nums));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis</title>
    <url>/2021/04/14/Mybatis/</url>
    <content><![CDATA[<h1 id="Mybatis笔记"><a href="#Mybatis笔记" class="headerlink" title="Mybatis笔记"></a>Mybatis笔记</h1><h2 id="Mybatis简介"><a href="#Mybatis简介" class="headerlink" title="Mybatis简介"></a>Mybatis简介</h2><ul>
<li><p>什么是Myabtis：</p>
<p> ​        MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Ordinary Java Object,普通的 Java对象)映射成数据库中的记录。</p>
</li>
<li><p>优点：</p>
<ul>
<li>Mybatis将重要的步骤抽取出来可以人工定制，其他步骤自动化</li>
<li>重要步骤写在配置文件中（方便维护）</li>
<li>完全解决数据库优化问题；</li>
<li>Mybatis底层就是对原生JDBC的一个简单封装</li>
<li>即将java编码与sql抽取出来，还不会失去自动化功能的半自动持久层框架</li>
</ul>
</li>
</ul>
<h2 id="Mybatis的使用"><a href="#Mybatis的使用" class="headerlink" title="Mybatis的使用"></a>Mybatis的使用</h2><h4 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        mybatis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        mysql--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        LOG4J日志包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="创建mybatis全局配置文件"><a href="#创建mybatis全局配置文件" class="headerlink" title="创建mybatis全局配置文件"></a>创建mybatis全局配置文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    resource 是指在类路径下 url 指网络路径或者磁盘路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;mybatisTest\Test1\conf\dbconfig.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    settings设置项属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;jdbcTypeForNull&quot;</span> <span class="attr">value</span>=<span class="string">&quot;NULL&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 懒加载 只有当属性被用到时才会在ass分步查询中加载       --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;false&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    别名处理器 可以给我java类型起别名 默认类名小写--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        1.单个起别名--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;typeAlias type=&quot;mybatisTest.Test1.Employee&quot; alias=&quot;emp&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        2.批量起别名</span></span><br><span class="line"><span class="comment">            package:为某个包下的所有类批量起别名</span></span><br><span class="line"><span class="comment">            name:指定包名默认全部为类名小写</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;mybatisTest.Test1&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        3.使用注解起别名 在类上加@Alias(&quot;emp&quot;)</span></span><br><span class="line"><span class="comment">            优先级最高</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    环境们，可以配置多个环境 修改default切换环境</span></span><br><span class="line"><span class="comment">        id 唯一标识</span></span><br><span class="line"><span class="comment">        必须有</span></span><br><span class="line"><span class="comment">        transactionManager 事务管理器</span></span><br><span class="line"><span class="comment">            type：事务管理器类型</span></span><br><span class="line"><span class="comment">        dataSource ：数据源</span></span><br><span class="line"><span class="comment">            type：类型</span></span><br><span class="line"><span class="comment">            自定义数据源：实现DataSourceFactory接口type为全类名</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    databaseIdProvider实现多数据库厂商--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">databaseIdProvider</span> <span class="attr">type</span>=<span class="string">&quot;DB_VENDOR&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        为不同的数据库厂商起别名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;MySQL&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Oracle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;oracle&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">databaseIdProvider</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    将我们写好的sql映射文件一定要注册到全局配置文件(mybatis-config.xml)中--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    将我们写好的sql映射文件到全局配置中</span></span><br><span class="line"><span class="comment">        resource 是指在类路径下</span></span><br><span class="line"><span class="comment">        url 指网络路径或者磁盘路径</span></span><br><span class="line"><span class="comment">        class:注册接口</span></span><br><span class="line"><span class="comment">               1.有sql映射文件，必须与接口同名并同一目录</span></span><br><span class="line"><span class="comment">               2.没有sql映射文件，sql映射文件利用注解写在接口上</span></span><br><span class="line"><span class="comment">               推荐</span></span><br><span class="line"><span class="comment">                   比较重要的dao接口用sql映射反之用注解</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mybatisTest\Test1\conf\EmployeeMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mybatisTest\Test1\EmployeeMapperPlus.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mybatisTest\Test1\conf\DepartmentMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;mybatisTest.Test1.EmployeeMapperAnnotation&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mybatisTest\Test1\conf\EmployeeMapperDynamicSQL.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        批量注册  包下所有注册 但没有注解的必须与接口同名并同一目录--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;package name=&quot;&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><p>数据库配置文件</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">jdbc.driver=com.mysql.cj.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql:///mybatis?useUnicode=true&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=123456</span><br></pre></td></tr></table></figure></li>
<li><p>log4J配置文件</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span><br><span class="line">log4j.rootLogger=DEBUG,console,file</span><br><span class="line"></span><br><span class="line">#控制台输出的相关设置</span><br><span class="line">log4j.appender.console = org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.console.Target = System.out</span><br><span class="line">log4j.appender.console.Threshold=DEBUG</span><br><span class="line">log4j.appender.console.layout = org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.console.layout.ConversionPattern=[%c]-%m%n</span><br><span class="line"></span><br><span class="line">#文件输出的相关设置</span><br><span class="line">log4j.appender.file = org.apache.log4j.RollingFileAppender</span><br><span class="line">log4j.appender.file.File=./log/日志.log</span><br><span class="line">log4j.appender.file.MaxFileSize=10mb</span><br><span class="line">log4j.appender.file.Threshold=DEBUG</span><br><span class="line">log4j.appender.file.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.file.layout.ConversionPattern=[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span><br><span class="line"></span><br><span class="line">#日志输出级别</span><br><span class="line">log4j.logger.org.mybatis=DEBUG</span><br><span class="line">log4j.logger.java.sql=DEBUG</span><br><span class="line">log4j.logger.java.sql.Statement=DEBUG</span><br><span class="line">log4j.logger.java.sql.ResultSet=DEBUG</span><br><span class="line">log4j.logger.java.sql.PreparedStatement=DEBUG</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="sql映射配置文件的简单配置"><a href="#sql映射配置文件的简单配置" class="headerlink" title="sql映射配置文件的简单配置"></a>sql映射配置文件的简单配置</h4>  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace相当于告诉Mybatis这个配置文件实现哪个接口的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.wht.dao.UserMapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--select:用于定义查询操作</span></span><br><span class="line"><span class="comment">			id：方法名，某个方法的实现</span></span><br><span class="line"><span class="comment">			resultType：指方法运行后的返回值类型</span></span><br><span class="line"><span class="comment">			#&#123;属性名&#125;：代表取出传递过来的参数值</span></span><br><span class="line"><span class="comment">			parameterType：传过来的参数类型</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.wht.pojo.User&quot;</span>&gt;</span></span><br><span class="line">         select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.wht.pojo.User&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        select * from user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> SqlSessionFactory <span class="title">getSqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String resource = <span class="string">&quot;mybatisTest\\Test1\\conf\\mybatis-config.xml&quot;</span>;</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();</span><br><span class="line">        <span class="comment">//获取sqlSession实例，能直接执行已经映射的sql语句</span></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">            List&lt;User&gt; userList = mapper.getUserList();</span><br><span class="line">            userList.forEach(System.out::println);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="Sql映射文件"><a href="#Sql映射文件" class="headerlink" title="Sql映射文件"></a>Sql映射文件</h4><ul>
<li><h3 id="所有标签"><a href="#所有标签" class="headerlink" title="所有标签"></a>所有标签</h3><ul>
<li><p>​    cache：和缓存有关</p>
<ul>
<li>属性：<ul>
<li>eviction:缓存回收策略<pre><code>  • LRU –最近最少使用：移除最长时间不被使用的对象
  • FIFO – 先进先出：按对象进入缓存顺序来移除它们
  • SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象
  • WEAK – 弱引用：更积极地移除基于垃圾回收器状态和弱引用规则的对象
  默认使用 LRU.
</code></pre>
</li>
<li>flushInterval：缓存刷新间隔<pre><code>  缓存多长时间清空一次，默认不清空，设置一个毫秒
</code></pre>
</li>
<li>readOnly 是否只读<pre><code>  true：只读 不会修改数据，并会加快获取速度，直接把数据引用交给用户所以不安全
  false：非只读，mybatis序列化和反序列化的技术克隆一份新的数据给你，安全但速度稍慢。
</code></pre>
</li>
<li>size：缓存存放多少元素，一般设为1024</li>
<li>type：指定自定义缓存的全类名实现cache接口即可：如redis等 </li>
</ul>
</li>
</ul>
</li>
<li><p>​    cache-ref:和缓存有关</p>
<ul>
<li> <cache-ref namespace=""/> 不同namespace直接可以相互引用缓存</li>
</ul>
</li>
<li><p>​    parameterMap:参数map</p>
</li>
<li><p>​    resultMap：结果映射，自定义结果集的封装规则</p>
</li>
<li><p>​    sql：抽取可重用sql</p>
</li>
<li><p>​    delete、update、insert、select：增删改查</p>
<ul>
<li><p>主要属性：</p>
<ul>
<li><p>id：用于和dao方法进行绑定</p>
</li>
<li><p>paramType：参数类型，默认不用写</p>
</li>
<li><p>resultType：返回值类型，</p>
<ul>
<li>若为list类型写list中的元素类型，</li>
</ul>
</li>
</ul>
</li>
<li><p>map则就为map(查询单条数据，则key为字段名，value为对应值；)</p>
</li>
<li><p>填map中元素的类型(查询多条数据,需要在dao方法上加上@MapKey(“key”)，则key为你设置的值，value为javaBean对象)</p>
</li>
</ul>
</li>
<li><p>flushCache：只要该语句被调用，就会清空缓存，默认为true(对应插入删除更新语句)</p>
</li>
<li><p>databaseId：指定属于哪个数据库</p>
</li>
<li><p>useGeneratedKeys：使用自增主键(仅对insert和update有用)</p>
<ul>
<li><p>keyProperty：获取了自增主键并封装给javaBean哪个属性(仅对insert和update有用)</p>
<ul>
<li><p>若数据库不支持自增主键则</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">order</span>=<span class="string">&#x27;BEFORE&#x27;</span> <span class="attr">resultType</span>=<span class="string">&#x27;integer&#x27;</span> <span class="attr">keyProperty</span>=<span class="string">&#x27;id&#x27;</span>&gt;</span></span><br><span class="line">			select max(id)+1 from t_employee</span><br><span class="line"><span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>参数问题：</p>
<ul>
<li>单个参数<ul>
<li>基本类型：<ul>
<li>取值：#{随便写}</li>
</ul>
</li>
</ul>
</li>
<li>多个参数<ul>
<li>取值： <ul>
<li>#{param1}，#{param2}..#{paramN}</li>
</ul>
</li>
<li>原因：只要传入多个参数：mybatis会自动封装在map中，key就是参数的索引，或者可以使用@Param(“XXX”)指定key</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>传入map</p>
<pre><code>  - 取值：#&#123;key&#125;
</code></pre>
</li>
<li><p>传入javaBean</p>
<pre><code>  - 取值：#&#123;pojo的属性名&#125;
</code></pre>
<ul>
<li><p>取值方式对比</p>
<ul>
<li>#{}：是参数预编译的方式，参数的位置都是用？替代，都是预编译设置进去的，安全不会有sql注入；</li>
<li>${}：不是参数预编译，直接拼串上去的；</li>
<li>一般都是用#{}，但在不支持参数预编译的地方就使用${}</li>
</ul>
</li>
</ul>
</li>
<li><p>resultMap自定义参数</p>
<ul>
<li>type：指定哪个javaBean自定义封装规则 </li>
</ul>
</li>
<li><p>id：唯一标识，查询语句使用 resultMap属性引用时填写</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;MyDifEmp&quot;</span> <span class="attr">type</span>=<span class="string">&quot;mybatisTest.Test1.Employee&quot;</span>&gt;</span></span><br><span class="line"> 			<span class="comment">&lt;!--主键列对应规则   --&gt;</span></span><br><span class="line">	        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	 				<span class="comment">&lt;!--普通列对应规则   --&gt;</span></span><br><span class="line">	        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;last_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">       		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span> <span class="attr">property</span>=<span class="string">&quot;dept.id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;dept.depName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>association属性：</p>
<ul>
<li>进行指定联合javaBean对象</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<pre><code>          &lt;resultMap id=&quot;MyDifEmp2&quot; type=&quot;mybatisTest.Test1.Employee&quot;&gt;
                  &lt;id column=&quot;id&quot; property=&quot;id&quot;&gt;&lt;/id&gt;
                  &lt;result column=&quot;last_name&quot; property=&quot;lastName&quot;&gt;&lt;/result&gt;
                  &lt;result column=&quot;gender&quot; property=&quot;gender&quot;&gt;&lt;/result&gt;
          &lt;!--        association可以指定联合javaBean对象
                                  javaType:property类型
          --&gt;
                  &lt;association property=&quot;dept&quot; javaType=&quot;mybatisTest.Test1.Department&quot;&gt;
                      &lt;id column=&quot;did&quot; property=&quot;id&quot;&gt;&lt;/id&gt;
                      &lt;result column=&quot;dept_name&quot; property=&quot;depName&quot;&gt;&lt;/result&gt;
                  &lt;/association&gt;
              &lt;/resultMap&gt;
          <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line"> - collection属性：</span><br><span class="line">	</span><br><span class="line">- 定义集合关联集合类型的属性</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> 		&lt;resultMap id&#x3D;&quot;myDeptPlus&quot; type&#x3D;&quot;department&quot;&gt;</span><br><span class="line"> 		        &lt;id column&#x3D;&quot;did&quot; property&#x3D;&quot;id&quot;&gt;&lt;&#x2F;id&gt;</span><br><span class="line"> 		        &lt;result column&#x3D;&quot;dept_name&quot; property&#x3D;&quot;depName&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class="line"> 		&lt;!--    collection用来定义集合关联集合类型的属性</span><br><span class="line"> 		        ofType 指定集合里面元素的类型</span><br><span class="line"> 		     --&gt;</span><br><span class="line"> 		        &lt;collection property&#x3D;&quot;emps&quot; ofType&#x3D;&quot;emp&quot;&gt;</span><br><span class="line"> 		            &lt;id column&#x3D;&quot;id&quot; property&#x3D;&quot;id&quot;&gt;&lt;&#x2F;id&gt;</span><br><span class="line"> 		            &lt;result column&#x3D;&quot;last_name&quot; property&#x3D;&quot;lastName&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class="line"> 		            &lt;result column&#x3D;&quot;email&quot; property&#x3D;&quot;email&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class="line"> 		            &lt;result column&#x3D;&quot;gender&quot; property&#x3D;&quot;gender&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class="line"> 		        &lt;&#x2F;collection&gt;</span><br><span class="line"> 		&lt;&#x2F;resultMap&gt;</span><br></pre></td></tr></table></figure>

  - 分步查询（但一般直接使用sql连接查询，因为发多个sql影响性能）：


      &lt;resultMap id=&quot;myDeptPlusStep&quot; type=&quot;department&quot;&gt;
              &lt;id column=&quot;id&quot; property=&quot;id&quot;&gt;&lt;/id&gt;
              &lt;result column=&quot;dept_name&quot; property=&quot;depName&quot;&gt;&lt;/result&gt;
      &lt;!--      分步查询
                  select 使用哪个xml文件中的select语句
                  column 需要使用的参数
       --&gt;
              &lt;collection property=&quot;emps&quot; select=&quot;mybatisTest.Test1.EmployeeMapperPlus.getEmpsByDeptId&quot; column=&quot;id&quot;&gt;
              &lt;/collection&gt;
      &lt;/resultMap&gt;
      <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96;xml</span><br><span class="line">&lt;!--    使用association进行分步查询--&gt;</span><br><span class="line">    &lt;resultMap id&#x3D;&quot;MyEmpByStep&quot; type&#x3D;&quot;mybatisTest.Test1.Employee&quot;&gt;</span><br><span class="line">        &lt;id column&#x3D;&quot;id&quot; property&#x3D;&quot;id&quot;&gt;&lt;&#x2F;id&gt;</span><br><span class="line">        &lt;result column&#x3D;&quot;last_name&quot; property&#x3D;&quot;lastName&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class="line">        &lt;result column&#x3D;&quot;email&quot; property&#x3D;&quot;email&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class="line">        &lt;result column&#x3D;&quot;gender&quot; property&#x3D;&quot;gender&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class="line">&lt;!--        </span><br><span class="line">						定义关联对象</span><br><span class="line">            分步查询</span><br><span class="line">            select 使用哪个xml文件中的select语句</span><br><span class="line">            column 需要使用的参数</span><br><span class="line">--&gt;</span><br><span class="line">        &lt;association property&#x3D;&quot;dept&quot; select&#x3D;&quot;mybatisTest.Test1.DepartmentMapper.getDeptById&quot; column&#x3D;&quot;d_id&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;association&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;resultMap&gt;</span><br></pre></td></tr></table></figure>
      
      细节：
      
      ​    可以设置分步查询的加载方式
      
      <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 懒加载 只有当属性被用到时才会在ass分步查询中加载       --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 按需加载 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;aggressiveLazyLoading&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
      
      ​    在分步查询的fetchType属性 可以选择lazy和eager加载方式

- discriminator鉴别器：就根据查询的数据不同进行不一样的操作

    <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;myEmpDis&quot;</span> <span class="attr">type</span>=<span class="string">&quot;emp&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;last_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--     鉴别器</span></span><br><span class="line"><span class="comment">               column：指定判定的列名</span></span><br><span class="line"><span class="comment">               javaType：列值对应的java类型--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">discriminator</span> <span class="attr">javaType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--           resultType封装的结果类型 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;emp&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">select</span>=<span class="string">&quot;mybatisTest.Test1.DepartmentMapper.getDeptById&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">column</span>=<span class="string">&quot;d_id&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">case</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;emp&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;last_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;last_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">case</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">discriminator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

    ​    
</code></pre>
<ul>
<li><h3 id="动态sql"><a href="#动态sql" class="headerlink" title="动态sql"></a>动态sql</h3><ul>
<li><p>where标签：</p>
<ul>
<li>就等同于sql中的where,但它会自动去除开头and 或者 or</li>
</ul>
</li>
<li><p>if标签：用于做判断</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpsByConditionIf&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;emp&quot;</span>&gt;</span></span><br><span class="line">        select * from tb1_employee</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--             </span></span><br><span class="line"><span class="comment">                 test 中取参数进行判断 </span></span><br><span class="line"><span class="comment">								&amp;amp; 转义 &amp;</span></span><br><span class="line"><span class="comment">								&amp;quot;&amp;quot; 转义 &quot;&quot;</span></span><br><span class="line"><span class="comment">								&amp;lt; 转义 &lt;</span></span><br><span class="line"><span class="comment">								trim()删除首尾空白</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id!=null&quot;</span>&gt;</span></span><br><span class="line">                id=#&#123;id&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;lastName!=null and !lastName.equals(<span class="symbol">&amp;quot;</span><span class="symbol">&amp;quot;</span>)&quot;</span>&gt;</span></span><br><span class="line">                and last_name like #&#123;lastName&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email!=null <span class="symbol">&amp;amp;</span><span class="symbol">&amp;amp;</span> email.trim()!=<span class="symbol">&amp;quot;</span><span class="symbol">&amp;quot;</span>&quot;</span>&gt;</span></span><br><span class="line">                and email=#&#123;email&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender==<span class="symbol">&amp;quot;</span>男<span class="symbol">&amp;quot;</span> or gender==<span class="symbol">&amp;quot;</span>女<span class="symbol">&amp;quot;</span>&quot;</span>&gt;</span></span><br><span class="line">                and gender=#&#123;gender&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>trim标签：用于截取字符串</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpsByConditionTrim&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;emp&quot;</span>&gt;</span></span><br><span class="line">        select * from tb1_employee</span><br><span class="line">--</span><br><span class="line">--         prefix=&quot;&quot; 前缀，给整个拼完的字符串加个前缀</span><br><span class="line">--         prefixOverrides=&quot;&quot; 前缀覆盖：去掉整个字符串前面多余的字符</span><br><span class="line">--         suffix=&quot;&quot; 后缀 给整个拼完的字符串加个后缀</span><br><span class="line">--         suffixOverrides=&quot;&quot; 后缀覆盖：去掉整个字符串后面多余的字符</span><br><span class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;and&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id!=null&quot;</span>&gt;</span></span><br><span class="line">                id=#&#123;id&#125; and</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;lastName!=null <span class="symbol">&amp;amp;</span><span class="symbol">&amp;amp;</span> lastName!=<span class="symbol">&amp;quot;</span><span class="symbol">&amp;quot;</span>&quot;</span>&gt;</span></span><br><span class="line">                last_name like #&#123;lastName&#125; and</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email!=null <span class="symbol">&amp;amp;</span><span class="symbol">&amp;amp;</span> email.trim()!=<span class="symbol">&amp;quot;</span><span class="symbol">&amp;quot;</span>&quot;</span>&gt;</span></span><br><span class="line">                email=#&#123;email&#125; and</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender==<span class="symbol">&amp;quot;</span>男<span class="symbol">&amp;quot;</span> or gender==<span class="symbol">&amp;quot;</span>女<span class="symbol">&amp;quot;</span>&quot;</span>&gt;</span></span><br><span class="line">                gender=#&#123;gender&#125; and</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>foreach标签：用于遍历</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpsByConditionForeach&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;emp&quot;</span>&gt;</span></span><br><span class="line">        select * from tb1_employee</span><br><span class="line">        -- collection 指定要遍历的集合 list类型的参数会特殊处理封装在map中,map的key就叫list除非你使用@Param设置了key</span><br><span class="line">        -- item: 将当前遍历出的元素赋值给该变量</span><br><span class="line">        -- #两个大括号可以取出变量值</span><br><span class="line">        -- separator 每个元素与每个元素之间的分隔符</span><br><span class="line">        --  open :以什么开始</span><br><span class="line">        --  close:以什么结束</span><br><span class="line">        --  index 索引：遍历list时是索引 遍历map时表示map的key，item就是map的值</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item_id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;where id in (&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">            #&#123;item_id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>choose标签：用于分支选择</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpsByConditionChoose&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;emp&quot;</span>&gt;</span></span><br><span class="line">        select * from tb1_employee</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;id!=null&quot;</span>&gt;</span></span><br><span class="line">                    id=#&#123;id&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;lastName!=null <span class="symbol">&amp;amp;</span><span class="symbol">&amp;amp;</span> lastName!=<span class="symbol">&amp;quot;</span><span class="symbol">&amp;quot;</span>&quot;</span>&gt;</span></span><br><span class="line">                    last_name like #&#123;lastName&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;email!=null <span class="symbol">&amp;amp;</span><span class="symbol">&amp;amp;</span> email.trim()!=<span class="symbol">&amp;quot;</span><span class="symbol">&amp;quot;</span>&quot;</span>&gt;</span></span><br><span class="line">                    email=#&#123;email&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;gender==<span class="symbol">&amp;quot;</span>男<span class="symbol">&amp;quot;</span> or gender==<span class="symbol">&amp;quot;</span>女<span class="symbol">&amp;quot;</span>&quot;</span>&gt;</span></span><br><span class="line">                    gender=#&#123;gender&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">           			<span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                  	1=1</span><br><span class="line">              	<span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>set标签：相当于sql中update中的set，可以动态更新</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateEmp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        update tb1_employee</span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;lastName!=null <span class="symbol">&amp;amp;</span><span class="symbol">&amp;amp;</span> lastName!=<span class="symbol">&amp;quot;</span><span class="symbol">&amp;quot;</span>&quot;</span>&gt;</span></span><br><span class="line">                last_name = #&#123;lastName&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email!=null <span class="symbol">&amp;amp;</span><span class="symbol">&amp;amp;</span> email.trim()!=<span class="symbol">&amp;quot;</span><span class="symbol">&amp;quot;</span>&quot;</span>&gt;</span></span><br><span class="line">                email=#&#123;email&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender==<span class="symbol">&amp;quot;</span>男<span class="symbol">&amp;quot;</span> or gender==<span class="symbol">&amp;quot;</span>女<span class="symbol">&amp;quot;</span>&quot;</span>&gt;</span></span><br><span class="line">                gender=#&#123;gender&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            id = #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>bind标签：用于绑定表达式</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">&quot;_lastName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#x27;%&#x27;+lastName+&#x27;%&#x27;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>include标签：用于引用sql</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    批量保存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addEmps&quot;</span>&gt;</span></span><br><span class="line">      insert into tb1_employee(<span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;insertColumn&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span>)</span><br><span class="line">      values</span><br><span class="line">      <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span>&gt;</span></span><br><span class="line">        (#&#123;emp.lastName&#125;,#&#123;emp.email&#125;,#&#123;emp.gender&#125;,#&#123;emp.dept.id&#125;)</span><br><span class="line">      <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    sql将一些常用sql存起来</span></span><br><span class="line"><span class="comment">        一般将常要进行查询的列名，或要插入的列名抽取出来</span></span><br><span class="line"><span class="comment">  当需要使用是 用include标签引用</span></span><br><span class="line"><span class="comment">        include还可以自定义property，sql还可以用#&#123;&#125;引用</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;insertColumn&quot;</span>&gt;</span></span><br><span class="line">        last_name,email,gender,d_id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>OGNL表达式(对象图导航语言) 动态sql test中的语句</p>
<ul>
<li><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Iooooot/photos@master/blogAboutPic/image-20210404195729637.png" alt="image-20210404195729637">    </p>
</li>
<li>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 两个内置参数 --&gt;</span><br><span class="line">&lt;!--    不只是方法传递过来的参数可以被用来判断，取值--&gt;</span><br><span class="line">&lt;!--    mybatis默认还有两个内置参数--&gt;</span><br><span class="line">&lt;!--    _parameter：代表整个参数--&gt;</span><br><span class="line">&lt;!--        单个参数：_parameter就是这个参数--&gt;</span><br><span class="line">&lt;!--        多个参数：参数会被封装为一个map：_parameter代表这个map--&gt;</span><br><span class="line">&lt;!--    _databaseId：如果配置了databaseIdProvider标签就代表当前数据库</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>  缓存机制：</p>
<pre><code>   每个会话进入会先查询找二级缓存再来看一级缓存，若都没有就去数据库查询
</code></pre>
<p>  ​    <img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Iooooot/photos@master/blogAboutPic/039C67216D7ECCD71EEA320AE49322E3.png" alt="img"></p>
<p>  一级缓存：</p>
<p>  ​    一级缓存(默认存在)：(本地缓存) sqlSession级别的缓存,不同的sqlSession缓存不共享,一级缓存是一致开启的.</p>
<p>  ​        原理：查询之后会讲数据放入map中<br>  ​            与数据库同一次会话期间查询到的数据会放在本地缓存中。<br>  ​            以后如果需要获取相同的数据，直接从缓存中拿，没必要再去查询数据库；<br>  ​       一级缓存失效情况<br>  ​           1.sqlSession不同<br>  ​           2.sqlSession相同，条件不同<br>  ​           3.sqlSession相同，两次查询之间执行了增删改操作(可能修改了当前数据)<br>  ​           4.手动使用 clearCache()清空缓存</p>
<p>  二级缓存：(全局缓存)：基于namespace级别的缓存，一个xml文件的namespace对应一个二级缓存</p>
<pre><code>         工作机制：
                1.一个会话，查询一条数据，会被放入一级缓存
                 2.如果会话关闭，一级缓存中的数据会被保存到二级缓存中；
                 3.不同namespace查出的数据会放在自己对应的缓存map中
         如何使用：
                 1.在全局配置中settings中添加cacheEnable为true，若为false 只会关闭二级缓存
                 2.在需要使用的xml文件中加上&lt;cache&gt;&lt;/cache&gt;
                 3.所有的pojo都需要实现序列化接口
         相关设置：
                1.每个select标签都有一个useCache属性 true为允许二级缓存false反之
                 2.每个增删改标签都有一个flushCache=&quot;true&quot; 每次增删改都会清空一二级缓存。(查询也有但默认为false)
               3.clearCache()不会清空二级缓存
                 4.localCacheScope:本地缓存作用域(一般不会设置默认为session)
</code></pre>
</li>
</ul>
<h2 id="Mybatis执行流程"><a href="#Mybatis执行流程" class="headerlink" title="Mybatis执行流程"></a>Mybatis执行流程</h2><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Iooooot/photos@master/blogAboutPic/image-20210409170334962.png" alt="image-20210409170334962"></p>
<p><img src= "/img/loading.gif" data-lazy-src="E:\myBlog\source_posts\image-20210408173035459.png" alt="image-20210408173035459"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Iooooot/photos@master/blogAboutPic/image-20210409170306849.png" alt="image-20210409170306849"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Iooooot/photos@master/blogAboutPic/image-20210409170357702.png" alt="image-20210409170357702"></p>
<p>4.sql查询流程</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Iooooot/photos@master/blogAboutPic/image-20210410133742452.png" alt="image-20210410133742452"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Iooooot/photos@master/blogAboutPic/image-20210410133440137.png" alt="image-20210410133440137"></p>
<h3 id="执行流程总结"><a href="#执行流程总结" class="headerlink" title="执行流程总结"></a>执行流程总结</h3><ol>
<li><p>根据配置文件(全局，sql映射)初始化出Configuration对象</p>
</li>
<li><p>创建一个DefaultSqlSession对象：</p>
<p> 他里面包含Configuration对象以及Executor(根据全局配置文件中的defaultExecutorType创建出对应的Executor)</p>
</li>
<li><p>DefaultSqlSession.getMapper():拿到Mapper接口对应的MapperProxy代理对象</p>
</li>
<li><p>MapperProxy里面有(DefaultSqlSession对象)</p>
</li>
<li><p>执行增删改查方法：</p>
<ol>
<li><p>调用DefaultSqlSession的增删改查(Executor)</p>
</li>
<li><p>会创建一个StatementHandler对象（同时会创建出ParamterHandler和ResultSetHandler）</p>
</li>
<li><p>调用StatementHandler预编译以及设置参数值</p>
<ol>
<li>ParamterHandler设置参数</li>
</ol>
</li>
<li><p>调用StatementHandler的增删改查</p>
</li>
<li><p>ResultSetHandler封装结果</p>
<p>注意：四大对象创建时都有一个interceptorChain.pluginAll(paramterHandler);</p>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>Promise</title>
    <url>/2022/08/23/Promise/</url>
    <content><![CDATA[<h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><p>Promise是一门新的技术（ES6规范）,Promis是JS中进行异步编程的新解决方案（旧方案是单纯使用回调函数）</p>
<p>优点：</p>
<ul>
<li>指定回调函数的方式更加灵活</li>
<li>支持链式调用，可以解决回调地狱问题</li>
</ul>
<h3 id="Promise的状态改变"><a href="#Promise的状态改变" class="headerlink" title="Promise的状态改变"></a>Promise的状态改变</h3><p>promise的状态为实例对象中的一个属性[PromiseState]</p>
<p>1.pending(初始状态)变为resolved<br>2.pending(初始状态)变为rejected</p>
<p>说明：只有这2种，且一个promise对象只能改变一次无论变为成功还是失败都会有一个结果数据成功的结果数据一般称为value，失败的结果数据一般称为reason</p>
<h3 id="Promise的工作流程"><a href="#Promise的工作流程" class="headerlink" title="Promise的工作流程"></a>Promise的工作流程</h3><p><img src= "/img/loading.gif" data-lazy-src="https://blogpic-1305209282.cos.ap-chengdu.myqcloud.com/img/image-20220626214917661.png"></p>
<h3 id="相关Api"><a href="#相关Api" class="headerlink" title="相关Api"></a>相关Api</h3><p>Promise(excutor){}</p>
<ul>
<li>executor：(resolve,reject)=&gt;{}</li>
<li>resolve函数：内部定义成功时调用的函数value=&gt;{}</li>
<li>reject函数：内部定义失败时我们调用的函数reason=&gt;{}</li>
</ul>
<p>Promise.prototype.then 方法:(onResolved,onRejected)=&gt;{}</p>
<ul>
<li>onResolved函数：成功的回调函数(value)=&gt;{}</li>
<li>onRejected函数：失败的回调函数(reason)=&gt;{}</li>
</ul>
<p>Promise.prototype.catch方法：(onRejected)=&gt;{}</p>
<ul>
<li>onRejected函数：失败的回调函数(reason)=&gt;{}</li>
</ul>
<p>Promise.resolve 方法：(value)=&gt;{}</p>
<ul>
<li>value：成功的数据或promise对象</li>
</ul>
<p>Promise.reject方法：(reason)=&gt;{}</p>
<ul>
<li>reason：失败的原因</li>
</ul>
<p>Promise.all方法：(promise)=&gt;{}</p>
<ul>
<li>promises：包含n个promise的数组</li>
<li>返回一个新的promise，只有所有promise都成功才成功，只要有一个失败就直接失败</li>
</ul>
<p>Promise.race方法：(promise)=&gt;{}</p>
<ul>
<li>promises：包含n个promise的数组</li>
<li>返回一个新的promise,第一个完成的promise的结果就是最终的结果状态</li>
</ul>
<h3 id="初体验"><a href="#初体验" class="headerlink" title="初体验"></a>初体验</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//resolve、reject函数类型的数据</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> n = rand(<span class="number">1</span>,<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">30</span>)&#123;</span><br><span class="line">            resolve(n); <span class="comment">//将promise对象得状态为成功</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            reject(n); <span class="comment">//将promise对象得状态为失败</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//调用then方法指定异步回调</span></span><br><span class="line">p.then(<span class="function">(<span class="params">value</span>)=&gt;</span> &#123; <span class="comment">//成功时的回调</span></span><br><span class="line">    alert(value+<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">&#125;,<span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">    alert(reason+<span class="string">&quot;失败&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="发送ajax请求"><a href="#发送ajax请求" class="headerlink" title="发送ajax请求"></a>发送ajax请求</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">btn.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        xhr.open(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;https://api.apiopen.top/getJoke&#x27;</span>);</span><br><span class="line">        xhr.send();</span><br><span class="line">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>)&#123;</span><br><span class="line">                    resolve(xhr.response);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    reject(xhr.status);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    p.then(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value);</span><br><span class="line">    &#125;,<span class="function"><span class="params">reason</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(reason);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="async函数"><a href="#async函数" class="headerlink" title="async函数"></a>async函数</h3><ol>
<li><p>函数的返回值为promise对象</p>
</li>
<li><p>promise对象的结果由async函数执行的返回值决定</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//return 111; 返回非promise数据则返回成功的promise</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;&#125;) <span class="comment">//返回与该promise的状态一致的promise</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="await表达式"><a href="#await表达式" class="headerlink" title="await表达式"></a>await表达式</h3><ol>
<li>await右侧的表达式一般为promise对象，但也可以是其它的凰</li>
<li>如果表达式是promise对象，await返回的是promise成功的值</li>
<li>如果表达式是其它值，直接将此值作为await的返回值</li>
</ol>
<h3 id="async和await结合发送ajxa"><a href="#async和await结合发送ajxa" class="headerlink" title="async和await结合发送ajxa"></a>async和await结合发送ajxa</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;button&quot;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendAjax</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        xhr.open(<span class="string">&#x27;GET&#x27;</span>,url);</span><br><span class="line">        xhr.send();</span><br><span class="line">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>)&#123;</span><br><span class="line">                    resolve(xhr.response);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    reject(xhr.status);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">btn.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> dunzi = <span class="keyword">await</span> sendAjax(<span class="string">&#x27;https://api.apiopen.top/getJoke&#x27;</span>);</span><br><span class="line">    alert(dunzi);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Promise</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis主从复制</title>
    <url>/2022/10/19/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
    <content><![CDATA[<h1 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h1><p>Redis主从复制是指：主机数据更新后根据配置和策略， 自动将一台 Redis服务器的数据复制到其它的 Redis 服务器，前者所在的 <code>Redis</code> 服务器也被称为 “主节点”（Master / Leader），后者则被称为 “从节点”（Slave / Follower）。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://blogpic-1305209282.cos.ap-chengdu.myqcloud.com/img/image-20220801195231542.png" alt="image-20220801195231542"></p>
<p>作用：</p>
<ul>
<li>实现读写分离，性能扩展</li>
<li>能够在Redis服务器崩掉后快速恢复（因为在其他服务器上进行了数据备份）</li>
</ul>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol>
<li><p>配置多个服务器</p>
<ol>
<li><p>创建多个redis的配置文件</p>
</li>
<li><p>在每个配置文件中配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">include redis中的配置文件</span><br><span class="line">pidfile &#x2F;var&#x2F;run&#x2F;redis_6379.pid #配置pid文件位置</span><br><span class="line">port 6379  #配置每个主机端口号</span><br><span class="line">dbfilename dump6379.rdb #配置RDB数据备份位置</span><br><span class="line">slave-priority 10 # 配置从机的优先级，值越小，优先级越高，用于选举主机时使用</span><br><span class="line"># slaveof &lt;主机ip&gt; &lt;主机port&gt; 如果配置了这个就会每次启动自动成为所写ip主机的从机</span><br></pre></td></tr></table></figure></li>
<li><p>启动服务器<code>redis-server 配置文件</code></p>
</li>
<li><p>让某个服务器成为从机：<code>slaveof &lt;主机ip&gt; &lt;主机port&gt;</code></p>
</li>
<li><p>这样主机中写数据，从机都可以看到，但是不允许写</p>
</li>
</ol>
</li>
</ol>
<blockquote>
<p>如果从机太多，可以让从机下面在挂从机，并且可以在主机挂了之后，使用<code>slaveof no one</code>成为主机</p>
</blockquote>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol>
<li>只有主节点可以写操作，从节点只能读，主机一旦挂了无法进行写的操作</li>
<li>主从同步存在一致性问题，RDB 文件过大的情况下同步速度较慢</li>
</ol>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis缓存</title>
    <url>/2022/10/03/Redis%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<h1 id="Redis缓存"><a href="#Redis缓存" class="headerlink" title="Redis缓存"></a>Redis缓存</h1><p>缓存数据存储于代码中,而代码运行在内存中,内存的读写性能远高于磁盘,缓存可以大大降低<strong>用户访问并发量带来的</strong>服务器读写压力</p>
<p>但是缓存也会增加代码复杂度和运营的成本：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://blogpic-1305209282.cos.ap-chengdu.myqcloud.com/img/image-20220523214414123.png" alt="image-20220523214414123"></p>
<h3 id="缓存的使用"><a href="#缓存的使用" class="headerlink" title="缓存的使用"></a>缓存的使用</h3><p>实际开发中,会构筑多级缓存来使系统运行速度进一步提升,例如:本地缓存与redis中的缓存并发使用：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://blogpic-1305209282.cos.ap-chengdu.myqcloud.com/img/image-20220728155124988.png" alt="image-20220728155124988"></p>
<h4 id="常用的缓存更新策略"><a href="#常用的缓存更新策略" class="headerlink" title="常用的缓存更新策略"></a>常用的缓存更新策略</h4><p>缓存更新是redis为了节约内存而设计出来的一个东西，主要是因为内存数据宝贵，当我们向redis插入太多数据，此时就可能会导致缓存中的数据过多，所以redis会对部分数据进行更新，或者把他叫为淘汰更合适。</p>
<p><strong>内存淘汰：</strong>redis自动进行，当redis内存达到咱们设定的max-memery的时候，会自动触发淘汰机制，淘汰掉一些不重要的数据(可以自己设置策略方式)</p>
<p><strong>超时剔除：</strong>当我们给redis设置了过期时间ttl之后，redis会将超时的数据进行删除，方便咱们继续使用缓存</p>
<p><strong>主动更新：</strong>我们可以手动调用方法把缓存删掉，通常用于解决缓存和数据库不一致问题</p>
<ul>
<li>主动更新的策略：<ul>
<li>人工编码方式：缓存调用者在更新完数据库后再去更新缓存，也称之为双写方案（常用）</li>
<li>由系统本身完成，数据库与缓存的问题交由系统本身去处理</li>
<li>调用者只操作缓存，其他线程去异步处理数据库，实现最终一致</li>
</ul>
</li>
</ul>
<blockquote>
<p>最佳的缓存更新策略：</p>
<ol>
<li>低一致性需求:使用Redis自带的内存淘汰机制</li>
<li>高一致性需求:主动更新，并以超时剔除作为兜底方案<ul>
<li>读操作：缓存命中则直接返回，缓存未命中则查询数据库，并写入缓存，设定超时时间</li>
<li>写操作：先写数据库，然后再删除缓存要确保数据库与缓存操作的原子性</li>
</ul>
</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis缓存击穿</title>
    <url>/2022/10/13/Redis%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF/</url>
    <content><![CDATA[<h1 id="Redis缓存击穿"><a href="#Redis缓存击穿" class="headerlink" title="Redis缓存击穿"></a>Redis缓存击穿</h1><p>缓存击穿问题也叫热点Key问题，就是一个被高并发访问并且缓存重建业务较复杂的key突然失效了，无数的请求访问会在瞬间给数据库带来巨大的冲击。</p>
<p>常见的解决方案有两种：</p>
<ul>
<li>互斥锁</li>
<li>逻辑过期</li>
</ul>
<h2 id="利用锁"><a href="#利用锁" class="headerlink" title="利用锁"></a>利用锁</h2><p>因为锁能实现互斥性。假设线程过来，只能一个人一个人的来访问数据库，从而避免对于数据库访问压力过大，但这也会影响查询的性能。（我们可以采用tryLock方法 + double check来解决这样的问题。）</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://blogpic-1305209282.cos.ap-chengdu.myqcloud.com/img/1653328288627.png" alt="1653328288627"></p>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li>没有额外的内存消耗</li>
<li>保证一致性</li>
<li>实现简单</li>
</ul>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>线程需要等待，性能受影响</li>
<li>可能有死锁风险</li>
</ul>
<blockquote>
<p>redisTemplate实现互斥锁：（没有考虑原子性，原子性可以使用lua脚本保证）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ID_PREFIX = UUID.randomUUID().toString(<span class="keyword">true</span>) + <span class="string">&quot;-&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取锁</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> timeoutSec)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 获取线程标示</span></span><br><span class="line">String threadId = ID_PREFIX + Thread.currentThread().getId();</span><br><span class="line"><span class="comment">// 获取锁</span></span><br><span class="line">Boolean success = stringRedisTemplate.opsForValue()</span><br><span class="line">             .setIfAbsent(KEY_PREFIX + name, threadId, timeoutSec, TimeUnit.SECONDS);</span><br><span class="line"><span class="keyword">return</span> Boolean.TRUE.equals(success);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//释放锁</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="comment">// 获取线程标示</span></span><br><span class="line"> String threadId = ID_PREFIX + Thread.currentThread().getId();</span><br><span class="line"> <span class="comment">// 获取锁中的标示</span></span><br><span class="line"> String id = stringRedisTemplate.opsForValue().get(KEY_PREFIX + name);</span><br><span class="line"> <span class="comment">// 判断标示是否一致</span></span><br><span class="line"> <span class="keyword">if</span>(threadId.equals(id)) &#123;</span><br><span class="line">     <span class="comment">// 释放锁</span></span><br><span class="line">     stringRedisTemplate.delete(KEY_PREFIX + name);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="逻辑过期"><a href="#逻辑过期" class="headerlink" title="逻辑过期"></a>逻辑过期</h2><p>逻辑过期方案可以根本上解决缓存击穿的问题（key到期），因为可以不设置过期时间，并且可以在逻辑过期后删除缓存，不会一直占用内存。</p>
<p><strong>大体流程：</strong>我们把过期时间设置在 redis的value中，注意：这个过期时间并不会直接作用于redis，而是我们后续通过逻辑去处理。假设线程1去查询缓存，然后从value中判断出来当前的数据已经过期了，此时线程1去获得互斥锁，那么其他线程会进行阻塞，获得了锁的线程他会开启一个 线程去进行 以前的重构数据的逻辑，直到新开的线程完成这个逻辑后，才释放锁， 而线程1直接进行返回，假设现在线程3过来访问，由于线程线程2持有着锁，所以线程3无法获得锁，线程3也直接返回数据，只有等到新开的线程2把重建数据构建完后，其他线程才能走返回正确的数据。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://blogpic-1305209282.cos.ap-chengdu.myqcloud.com/img/image-20220802094549939.png" alt="image-20220802094549939"></p>
<blockquote>
<p>这种方案巧妙在于，异步的构建缓存，缺点在于在构建完缓存之前，返回的都是脏数据。</p>
</blockquote>
<h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ul>
<li>线程无需等待，性能比较好</li>
</ul>
<h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>不保证一致性</li>
<li>有额外内存消耗</li>
<li>实现复杂</li>
</ul>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis哨兵模式</title>
    <url>/2022/10/18/Redis%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h1><p>弥补了主从复制中需要手动让从机成为主机的缺点，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主机</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://blogpic-1305209282.cos.ap-chengdu.myqcloud.com/img/202204071044338.png" alt="202204071044338"></p>
<h2 id="哨兵的作用"><a href="#哨兵的作用" class="headerlink" title="哨兵的作用"></a>哨兵的作用</h2><ul>
<li>监控<ul>
<li>不断的检查 master 和 slave 是否正常运行</li>
<li>master 存活检测、master 与 slave 运行情况检测</li>
</ul>
</li>
<li>通知（提醒）</li>
<li>自动故障转移<ul>
<li>断开 master 与 slave 连接，选取一个 slave 作为 master，将其他的 slave 连接到新的 master，并告知客户端新的服务器地址</li>
</ul>
</li>
</ul>
<blockquote>
<p>哨兵也是一台 <code>redis</code> 服务器，只是不提供数据服务</p>
</blockquote>
<h2 id="开启哨兵模式"><a href="#开启哨兵模式" class="headerlink" title="开启哨兵模式"></a>开启哨兵模式</h2><ol>
<li><p>创建哨兵配置文件<code>sentinel-端口号.conf</code></p>
</li>
<li><p>进行配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 哨兵服务端口</span><br><span class="line">port 26379</span><br><span class="line"> </span><br><span class="line"># 哨兵工作信息存储目录</span><br><span class="line">dir &#x2F;tmp</span><br><span class="line"> </span><br><span class="line"># 监控 主 连接字符串 哨兵判挂标准（几个哨兵认定他挂了，就判定为主挂了，通常为哨兵数量的一半加一）</span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6379 2</span><br><span class="line"> </span><br><span class="line"># 主 连接多长时间无响应，就认定它挂了（默认 30s）</span><br><span class="line">sentinel down-after-milliseconds mymaster 30000</span><br><span class="line"> </span><br><span class="line"># 主挂了之后，新的主上任同步数据的路线数量，数值越小，对服务器压力越小</span><br><span class="line">sentinel parallel-syncs mymaster 1</span><br><span class="line"> </span><br><span class="line"># 新主同步数据时，多长时间同步完算有效 （默认 180s）</span><br><span class="line">sentinel failover-timeout mymaster 180000</span><br></pre></td></tr></table></figure></li>
<li><p>启动哨兵：<code>redis-sentinel 哨兵配置文件</code></p>
</li>
</ol>
<h2 id="故障修护过程"><a href="#故障修护过程" class="headerlink" title="故障修护过程"></a>故障修护过程</h2><ol>
<li><p>主观下线：</p>
<p>当主服务器发生故障时，此时一个sentinel发现了故障，系统并不会马上进行failover过程（这个现象称为主观下线），它会向网络中的其他Sentinel进行确认。</p>
</li>
<li><p>客观下线：</p>
<p>接着其他Sentinel也陆续发现故障，这个时候其中一个Sentinel就会发起投票。一定数量的哨兵(在配置文件中指定)确认Master被标记为主观下线，此时将Master标记为客观下线。</p>
</li>
<li><p>sentinel的leader选举：</p>
<p>要想完成故障切换（将故障master剔除，并将一个slave提升为master）就必须先选举一个leader。最先发现故障的sentinel向其他哨兵发起请求成为leader，其他哨兵在没有同意别的哨兵的leader请求时，就会把票投给该sentinel。当半数以上的sentinel投票通过后就认定该sentinel为leader。接下来的故障切换有该leader完成。</p>
</li>
<li><p>master选举：</p>
<p>leader选好后将故障master剔除，从slave中挑选一个成为master。遵照的原则如下：</p>
<ul>
<li>slave的优先级</li>
<li>slave从master那同步的数据量，哪个slave多就优先。</li>
</ul>
</li>
<li><p>新Master再通过发布订阅模式通知所有sentinel更新监控主机信息。</p>
</li>
<li><p>故障的主服务器修复后将成为从服务器继续工作。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis缓存雪崩</title>
    <url>/2022/10/14/Redis%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9/</url>
    <content><![CDATA[<h1 id="Redis缓存雪崩"><a href="#Redis缓存雪崩" class="headerlink" title="Redis缓存雪崩"></a>Redis缓存雪崩</h1><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><p>缓存雪崩是指在同一时段大量的缓存key同时失效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力。</p>
<p>缓存key失效的解决方案：</p>
<ul>
<li>给不同的Key的TTL添加随机值</li>
</ul>
<p>Redis服务宕机的解决方案：</p>
<ul>
<li>利用Redis集群提高服务的可用性</li>
<li>给缓存业务添加降级限流策略</li>
<li>给业务添加多级缓存</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://blogpic-1305209282.cos.ap-chengdu.myqcloud.com/img/1653327884526.png" alt="1653327884526"></p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring_1</title>
    <url>/2021/04/15/Spring-1/</url>
    <content><![CDATA[<h1 id="Spring学习笔记-一"><a href="#Spring学习笔记-一" class="headerlink" title="Spring学习笔记(一)"></a>Spring学习笔记(一)</h1><h1 id="Spring概述"><a href="#Spring概述" class="headerlink" title="Spring概述"></a>Spring概述</h1><ul>
<li><p>目的：</p>
<ul>
<li>解决企业应用开发的复杂性</li>
</ul>
</li>
<li><p>范围：任何java的应用</p>
</li>
<li><p>重点：</p>
<ul>
<li>==IoC(控制反转)==：促进了松耦合,对象初始化时不等对象请求就主动将依赖传递</li>
<li>==AOP(面向切面编程)==：允许通过分离应用的业务逻辑与系统级服务（例如审计（auditing）和事务（transaction）管理）进行内聚性的开发</li>
</ul>
</li>
<li><p>优点：</p>
<ul>
<li><p>Spring是一个开源==容器==。</p>
</li>
<li><p>从大小与开销两方面而言Spring都是轻量的框架</p>
</li>
<li><p>所有Spring的这些特征使你能够编写更干净、更可管理、并且更易于测试的代码。</p>
</li>
</ul>
</li>
<li><p>缺点：</p>
<ul>
<li>配置太过于繁琐！(SpringBoot会很好的解决这个问题)</li>
</ul>
</li>
<li><p>总结：反正无敌！！就是学:smile:!</p>
</li>
</ul>
<h1 id="Spring的7大模块"><a href="#Spring的7大模块" class="headerlink" title="Spring的7大模块"></a>Spring的7大模块</h1><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Iooooot/photos@master/blogAboutPic/image-20210217201434565.png" alt="image-20210217201434565"></p>
<h2 id="1-Spring-Code"><a href="#1-Spring-Code" class="headerlink" title="1.Spring Code"></a>1.Spring Code</h2><p>这是Spring框架最基础的部分，它提供了依赖注入（DependencyInjection）特征来实现容器对Bean的管理。这里最基本的概念是BeanFactory，它是任何Spring应用的核心。</p>
<h2 id="2-Sping-AOP"><a href="#2-Sping-AOP" class="headerlink" title="2.Sping AOP"></a>2.Sping AOP</h2><p>Spring在它的AOP模块中提供了对面向切面编程的丰富支持。这个模块是在Spring应用中实现切面编程的基础。它的目标是通过定义一组共同的接口和组件来促进AOP的使用以及不同的AOP实现之间的互用性。</p>
<h2 id="3-Spring-Context"><a href="#3-Spring-Context" class="headerlink" title="3.Spring Context"></a>3.Spring Context</h2><p>核心模块的BeanFactory使Spring成为一个容器，而上下文模块使它成为一个框架。另外，这个模块提供了许多企业服务，例如电子邮件、JNDI访问、EJB集成、远程以及时序调度（scheduling）服务。也包括了对模版框架例如Velocity和FreeMarker集成的支持。</p>
<h2 id="4-Spring-DAO"><a href="#4-Spring-DAO" class="headerlink" title="4.Spring DAO"></a>4.Spring DAO</h2><p>使用JDBC经常导致大量的重复代码，取得连接、创建语句、处理结果集，然后关闭连接。Spring的JDBC和DAO模块抽取了这些重复代码，因此你可以保持你的数据库访问代码干净简洁，并且可以防止因关闭数据库资源失败而引起的问题。另外，这个模块还使用了Spring的AOP模块为Spring应用中的对象提供了事务管理服务。</p>
<h2 id="5-Spring-ORM"><a href="#5-Spring-ORM" class="headerlink" title="5.Spring ORM"></a>5.Spring ORM</h2><p>对那些更喜欢使用对象/关系映射工具而不是直接使用JDBC的人，Spring提供了ORM模块。Spring并不试图实现它自己的ORM解决方案，而是为几种流行的ORM框架提供了集成方案</p>
<h2 id="6-Spring-Web"><a href="#6-Spring-Web" class="headerlink" title="6.Spring Web"></a>6.Spring Web</h2><p>Web上下文模块建立于应用上下文模块之上，提供了一个适合于Web应用的上下文。</p>
<h2 id="7-Spring-MVC"><a href="#7-Spring-MVC" class="headerlink" title="7.Spring MVC"></a>7.Spring MVC</h2><p>Spring为构建Web应用提供了一个功能全面的MVC框架，Spring的MVC框架使用IoC对控制逻辑和业务对象提供了完全的分离。</p>
<h1 id="Spring-IOC"><a href="#Spring-IOC" class="headerlink" title="Spring IOC"></a>Spring IOC</h1><h2 id="1-什么是IOC"><a href="#1-什么是IOC" class="headerlink" title="1.什么是IOC"></a>1.什么是IOC</h2><p>控制反转模式（也称作依赖性注入）的基本概念是：不创建对象，但是描述创建它们的方式。在代码中不直接与对象和服务连接，但在配置文件中描述哪一个组件需要哪一项服务。容器 （在 Spring 框架中是 IOC 容器） 负责将这些联系在一起。在典型的 IOC 场景中，容器创建了所有对象，并设置必要的属性将它们连接在一起，决定什么时间调用方法。</p>
<h3 id="1-1个人理解："><a href="#1-1个人理解：" class="headerlink" title="1.1个人理解："></a>1.1个人理解：</h3><p>就类似于工厂模式里面的工厂，对程序进行了一定的==解耦==</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Iooooot/photos@master/blogAboutPic/image-20210218215731762.png" alt="image-20210218215731762">    <img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Iooooot/photos@master/blogAboutPic/image-20210218215750870.png" alt="image-20210218215750870"></p>
<p>这样降低了app对资源的依赖，直接堆工厂要。。==这样app对资源的控制权进行放弃转而为让第三方(框架)控制资源所以IOC被称为控制反转==</p>
<h3 id="1-2作用："><a href="#1-2作用：" class="headerlink" title="1.2作用："></a>1.2作用：</h3><p>削减计算机程序的耦合(解除我们代码中的依赖关系)</p>
<p>简而言之：对象由spring 来创建，管理，装配！就只需要改成xml来实现不同操作！</p>
<h2 id="Spring-IoC容器的使用"><a href="#Spring-IoC容器的使用" class="headerlink" title="Spring IoC容器的使用"></a>Spring IoC容器的使用</h2><p>​        org.springframework.beans和org.springframework.context是Spring框架中IoC容器的基础，BeanFactory接口提供一种高级的配置机制能够管理任何类型的对象。</p>
<h2 id="1-Spring-的主要maven依赖"><a href="#1-Spring-的主要maven依赖" class="headerlink" title="1.Spring 的主要maven依赖"></a>1.Spring 的主要maven依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-初步的使用"><a href="#2-初步的使用" class="headerlink" title="2.初步的使用"></a>2.初步的使用</h2><h3 id="2-1创建bean-xml文件"><a href="#2-1创建bean-xml文件" class="headerlink" title="2.1创建bean.xml文件"></a>2.1创建bean.xml文件</h3> <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    把对象的创建交给spring来管理--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    把需要管理的对象放在bean标签中--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                    id:使用时的唯一标识--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                    class:通过反射创建对象时需要用到的全限定类名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wht.service.impl.AccountServiceImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wht.dao.impl.AccountDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-2获取对象"><a href="#2-2获取对象" class="headerlink" title="2.2获取对象"></a>2.2获取对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取spring的Ioc核心容器，并根据id获取对象</span></span><br><span class="line"><span class="comment">     * ApplicationContext的三个常用实现类</span></span><br><span class="line"><span class="comment">     *      ClassPathXmlApplicationContext: 它只能加载类路径下的配置文件</span></span><br><span class="line"><span class="comment">     *      FileSystemXmlApplicationContext: 它可以加载任意路径下的配置文件(必须有访问权限，并不常有)</span></span><br><span class="line"><span class="comment">     *      AnnotationConfigApplicationContext: 它用于读取注解创建容器</span></span><br><span class="line"><span class="comment">     *  核心容器的两个接口引发出的问题</span></span><br><span class="line"><span class="comment">     *      ApplicationContext: 多数才用此接口，因为spring会自动根据配置来选择合适的接口</span></span><br><span class="line"><span class="comment">     *          它在构建核心容器时,创建对象的策略是立即加载的方式，就是当容器读了配置文件后对象已经被创建。(单例对象适用)</span></span><br><span class="line"><span class="comment">     *      BeanFactory：</span></span><br><span class="line"><span class="comment">     *          它在构建核心容器时，创建对象的策略是延迟加载的方式，就是当什么时候根据id获取时才创建。(反之多例适用)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取核心容器对象</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//根据id获取对象</span></span><br><span class="line">        <span class="comment">//方式1 需要自己强转</span></span><br><span class="line">        AccountService as = (AccountService) ac.getBean(<span class="string">&quot;accountService&quot;</span>);</span><br><span class="line">        <span class="comment">//方式2</span></span><br><span class="line">        AccountDao adao = ac.getBean(<span class="string">&quot;accountDao&quot;</span>, AccountDao.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-Spring对bean的管理细节"><a href="#3-Spring对bean的管理细节" class="headerlink" title="3.Spring对bean的管理细节"></a>3.Spring对bean的管理细节</h2><h3 id="3-1-创建bean的三种方式"><a href="#3-1-创建bean的三种方式" class="headerlink" title="3.1 创建bean的三种方式"></a>3.1 创建bean的三种方式</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    spring创建bean的三种方式</span></span><br><span class="line"><span class="comment">        方式一：使用默认构造函数创建。</span></span><br><span class="line"><span class="comment">            在spring配置文件中使用bean标签，配置id和class之后，且没有其他属性标签时。采用的此方法，若没有无参构造则无法创建。</span></span><br><span class="line"><span class="comment">        方式二：使用普通工厂中的方法创建对象(使用某个类中的方法创建对象,并存入spring容器)</span></span><br><span class="line"><span class="comment">        方式三：使用工厂中的静态方法创建对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    方式一：</span></span><br><span class="line"><span class="comment">            id:使用时的唯一标识</span></span><br><span class="line"><span class="comment">            class:通过反射创建对象时需要用到的全限定类名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wht.service.impl.AccountServiceImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wht.dao.impl.AccountDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--   方式二：</span></span><br><span class="line"><span class="comment">            id:使用时的唯一标识</span></span><br><span class="line"><span class="comment">            factory-bean:工厂类使用的id</span></span><br><span class="line"><span class="comment">            factory-method：工厂创建该对象所使用的方法</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;instanceFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wht.Factory.InstanceFactory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;instanceFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getAccountService&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--   方式三：</span></span><br><span class="line"><span class="comment">            id:使用时的唯一标识</span></span><br><span class="line"><span class="comment">            class:该工厂的全限定类名</span></span><br><span class="line"><span class="comment">            factory-method：工厂创建该对象所使用的方法</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wht.Factory.StaticFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getAccountService&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="3-2-bean对象的作用范围"><a href="#3-2-bean对象的作用范围" class="headerlink" title="3.2 bean对象的作用范围"></a>3.2 bean对象的作用范围</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--       </span></span><br><span class="line"><span class="comment"> 				bean的作用范围调整</span></span><br><span class="line"><span class="comment">            bean标签的scope属性：</span></span><br><span class="line"><span class="comment">              取值：</span></span><br><span class="line"><span class="comment">                  singleton：单例(默认值)</span></span><br><span class="line"><span class="comment">                  prototype：多例</span></span><br><span class="line"><span class="comment">                  request：作用于web应用的请求范围</span></span><br><span class="line"><span class="comment">                  session：作用于web应用的会话范围</span></span><br><span class="line"><span class="comment">                  global-session：作用于集群环境的会划范围，当不是集群范围时他就是session</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="3-3-bean对象的生命周期"><a href="#3-3-bean对象的生命周期" class="headerlink" title="3.3 bean对象的生命周期"></a>3.3 bean对象的生命周期</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    </span></span><br><span class="line"><span class="comment">			bean对象的生命周期</span></span><br><span class="line"><span class="comment">            单例对象</span></span><br><span class="line"><span class="comment">                出生： 当容器创建时对象出生</span></span><br><span class="line"><span class="comment">                活着：只要容器还在，对象就存活</span></span><br><span class="line"><span class="comment">                死亡：容器销毁，对象死亡</span></span><br><span class="line"><span class="comment">            多例对象</span></span><br><span class="line"><span class="comment">                出生：当我们使用对象时才创建</span></span><br><span class="line"><span class="comment">                活着：使用过程中一直活着</span></span><br><span class="line"><span class="comment">                死亡：当对象长时间不用，且没有别的对象引用时，由java的垃圾回收器回收</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="4-依赖注入"><a href="#4-依赖注入" class="headerlink" title="4.依赖注入"></a>4.依赖注入</h2><p>依赖关系的管理：<br>    以后都交给spring来维护在当前类需要用到其他类的对象，由spring为我们提供，只需要配置文件中说明.<br>    依赖关系的维护就叫做依赖注入。</p>
<h3 id="4-1能注入的类型"><a href="#4-1能注入的类型" class="headerlink" title="4.1能注入的类型"></a>4.1能注入的类型</h3><ol>
<li>基本类型和String</li>
<li>其他bean类型(在配置文件中或者注解配置过得bean)</li>
<li>复杂类型/集合类型</li>
</ol>
<h3 id="4-2-注入的方式"><a href="#4-2-注入的方式" class="headerlink" title="4.2 注入的方式"></a>4.2 注入的方式</h3><h4 id="4-2-1使用构造函数注入"><a href="#4-2-1使用构造函数注入" class="headerlink" title="4.2.1使用构造函数注入"></a>4.2.1使用构造函数注入</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        构造函数注入：</span></span><br><span class="line"><span class="comment">            使用标签：constructor-arg</span></span><br><span class="line"><span class="comment">            标签出现的位置：bean标签的内部</span></span><br><span class="line"><span class="comment">            标签中的属性</span></span><br><span class="line"><span class="comment">                type：用于指定注入的数据的数据类型，</span></span><br><span class="line"><span class="comment">                index：用于指定要注入的数据给构造函数中指定索引位置的参数赋值，从0开始</span></span><br><span class="line"><span class="comment">                name：用于指定给构造函数中指定名称的参数赋值  (常用)</span></span><br><span class="line"><span class="comment">                =========以上用于指定构造函数中哪个赋值============</span></span><br><span class="line"><span class="comment">                value：用于提供基本类型和String类型的数据</span></span><br><span class="line"><span class="comment">                ref：用于指定其他的bean类型数据</span></span><br><span class="line"><span class="comment">            优点：</span></span><br><span class="line"><span class="comment">               在获取bean对象时，注入数据是必须的操作，否则对象无法创建成功。</span></span><br><span class="line"><span class="comment">            缺点：</span></span><br><span class="line"><span class="comment">                改变了bean对象的实例化方式，使我们在创建对象时，如果用不到这些数据，也必须提供。</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wht.service.impl.AccountServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;now&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;now&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h4 id="4-2-2-使用set方法注入"><a href="#4-2-2-使用set方法注入" class="headerlink" title="4.2.2 使用set方法注入"></a>4.2.2 使用set方法注入</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        set方法注入：    更常用</span></span><br><span class="line"><span class="comment">            使用标签：property</span></span><br><span class="line"><span class="comment">            标签出现的位置：bean标签的内部</span></span><br><span class="line"><span class="comment">            标签中的属性</span></span><br><span class="line"><span class="comment">                name：用于指定注入时set方法名称</span></span><br><span class="line"><span class="comment">                value：用于提供基本类型和String类型的数据</span></span><br><span class="line"><span class="comment">                ref：用于指定其他的bean类型数据</span></span><br><span class="line"><span class="comment">            优点：</span></span><br><span class="line"><span class="comment">               创建对象时没有明确的限制，可以直接使用默认构造函数</span></span><br><span class="line"><span class="comment">            缺点：</span></span><br><span class="line"><span class="comment">                如果某个成员必须有值，则set方法没法保证一定注入</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wht.service.impl.AccountServiceImpl2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;now&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="4-2-3-复杂类型的注入"><a href="#4-2-3-复杂类型的注入" class="headerlink" title="4.2.3 复杂类型的注入"></a>4.2.3 复杂类型的注入</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       复杂数据的注入：</span></span><br><span class="line"><span class="comment">         用于给list结构集合注入的标签：</span></span><br><span class="line"><span class="comment">             list array set</span></span><br><span class="line"><span class="comment">         用于Map结构集合注入的标签：</span></span><br><span class="line"><span class="comment">             map props</span></span><br><span class="line"><span class="comment">         结构相同，标签可以互换</span></span><br><span class="line"><span class="comment">         所以常用 list map</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wht.service.impl.AccountServiceImpl3&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;myStrs&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;myList&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mySet&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;myMap&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;TestA&quot;</span> <span class="attr">value</span>=<span class="string">&quot;aaa&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;TestB&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;myProps&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;testC&quot;</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;testD&quot;</span>&gt;</span>ddd<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h4 id="4-2-4-使用注解注入"><a href="#4-2-4-使用注解注入" class="headerlink" title="4.2.4 使用注解注入"></a>4.2.4 使用注解注入</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *曾经的xml配置</span></span><br><span class="line"><span class="comment"> * &lt;bean id=&quot;accountService2&quot; class=&quot;com.wht.service.impl.AccountServiceImpl&quot;</span></span><br><span class="line"><span class="comment"> *          scope=&quot;&quot; init-method=&quot;&quot; destroy-method=&quot;&quot; &gt;</span></span><br><span class="line"><span class="comment"> *         &lt;property name=&quot;&quot; value=&quot;&quot; | ref = &quot;&quot;&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *&lt;/bean&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1.用于创建对象的注解</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@component</span></span></span><br><span class="line"><span class="comment"> *      作用：用于把当前类存入spring容器中</span></span><br><span class="line"><span class="comment"> *      属性：</span></span><br><span class="line"><span class="comment"> *          value：用于指定bean的id。默认类名首字母小写</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@Controller</span>：</span></span><br><span class="line"><span class="comment"> *      一般用于表现层</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@Service</span>：</span></span><br><span class="line"><span class="comment"> *      一般用于业务层</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@Repository</span></span></span><br><span class="line"><span class="comment"> *      一般用于持久层</span></span><br><span class="line"><span class="comment"> *  以上三个注解他们的作用和属性与Component是一模一样。</span></span><br><span class="line"><span class="comment"> *  他们三个事spring框架为我们提供明确的三层使用的注解，使我们的三层对象更加清晰</span></span><br><span class="line"><span class="comment"> * 2.用于注入数据的注解</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@Autowired</span>:</span></span><br><span class="line"><span class="comment"> *      作用：自动按照类型注入。只要容器中有唯一的一个bean对象类型和要注入的变量类型匹配就可以注入成功。</span></span><br><span class="line"><span class="comment"> *           如果ioc容器没有任何bean对象相匹配就注入失败</span></span><br><span class="line"><span class="comment"> *           如果ioc容器中有多个类型匹配时</span></span><br><span class="line"><span class="comment"> *              会以对象名称作为id来寻找bean对象，若没有该id就注入失败，反之就注入成功</span></span><br><span class="line"><span class="comment"> *      出现位置：</span></span><br><span class="line"><span class="comment"> *          可以是变量上，也可以方法上。</span></span><br><span class="line"><span class="comment"> *      细节：</span></span><br><span class="line"><span class="comment"> *          在使用注解注入时，set方法就不是必须的了。</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@Qualifier</span>:</span></span><br><span class="line"><span class="comment"> *      作用：在按照类型注入的基础上再按照名称注入，它在给类成员注入时不能单独使用。但是在给方法参数注入时可以</span></span><br><span class="line"><span class="comment"> *      属性：</span></span><br><span class="line"><span class="comment"> *          value：用于注定注入bean的id</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@Resource</span>:</span></span><br><span class="line"><span class="comment"> *      作用：直接按照bean的id注入。它可以独立使用</span></span><br><span class="line"><span class="comment"> *      属性：</span></span><br><span class="line"><span class="comment"> *          name：用于指定bean的id</span></span><br><span class="line"><span class="comment"> *   以上三个注入只能注入其他bean类型的数据，而基本类型和String类型无法使用上述注解实现。</span></span><br><span class="line"><span class="comment"> *   另外集合类型的注入只能通过XML来实现</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@Value</span></span></span><br><span class="line"><span class="comment"> *      作用：用于注入基本类型和String类型的数据</span></span><br><span class="line"><span class="comment"> *      属性：</span></span><br><span class="line"><span class="comment"> *          value：用于指定数据的值，可以使用SpEL表达式</span></span><br><span class="line"><span class="comment"> *                 SpEL的写法：$&#123;表达式&#125;</span></span><br><span class="line"><span class="comment"> * 3.用于改变作用范围的</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@Scope</span>:</span></span><br><span class="line"><span class="comment"> *      作用：用于指定bean的作用范围</span></span><br><span class="line"><span class="comment"> *      属性：</span></span><br><span class="line"><span class="comment"> *          value：指定范围取值。常用：singleton prototype</span></span><br><span class="line"><span class="comment"> * 4.和生命周期相关的</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@PreDestroy</span></span></span><br><span class="line"><span class="comment"> *      作用：用于指定销毁方法</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@PostConstruct</span></span></span><br><span class="line"><span class="comment"> *      作用：用于指定初始化方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(&quot;accountService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"><span class="comment">//    @Autowired</span></span><br><span class="line"><span class="comment">//    @Qualifier(&quot;accountDao&quot;)</span></span><br><span class="line">    <span class="meta">@Resource(name=&quot;accountDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao =<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用java类作为配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这是一个配置类，它的作用和bean.xml是一样的</span></span><br><span class="line"><span class="comment"> * Spring中的新注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Configuration</span></span></span><br><span class="line"><span class="comment"> *      作用：指定当前类是一个配置类</span></span><br><span class="line"><span class="comment"> *      细节：当配置作为AnnotationConfigApplicationContext对象创建的参数时，该注解可以不写</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ComponentScan</span></span></span><br><span class="line"><span class="comment"> *      作用：用于通过注解指定spring在创建容器时要扫描的包,和base-package一样</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Bean</span></span></span><br><span class="line"><span class="comment"> *      作用：用于把当前方法的返回值作为bean对象存入spring的ioc容器中</span></span><br><span class="line"><span class="comment"> *      属性：</span></span><br><span class="line"><span class="comment"> *          name：用于指定bean的id。当不写时，默认值是当前方法名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Import</span></span></span><br><span class="line"><span class="comment"> *      作用:用于导入其他的配置类</span></span><br><span class="line"><span class="comment"> *      属性：</span></span><br><span class="line"><span class="comment"> *          value：用于指定其他配置类的字节码</span></span><br><span class="line"><span class="comment"> *                  当我们使用import的注解之后，有import注解的类就是主配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PropertySource</span></span></span><br><span class="line"><span class="comment"> *      作用：用于指定properties文件的位置</span></span><br><span class="line"><span class="comment"> *      属性：</span></span><br><span class="line"><span class="comment"> *          value：指定文件的名称和路径</span></span><br><span class="line"><span class="comment"> *              关键字：classpath：表示类路劲下</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@EnableTransactionManagement</span></span></span><br><span class="line"><span class="comment"> *      作用：用于指定开始事务支持</span></span><br><span class="line"><span class="comment"> *      </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.wht&quot;)</span></span><br><span class="line"><span class="meta">@Import(JdbcConfig.class)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbcConfig.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-spring整合junit"><a href="#5-spring整合junit" class="headerlink" title="5.spring整合junit"></a>5.spring整合junit</h2><h3 id="5-1导入spring整合junit的依赖"><a href="#5-1导入spring整合junit的依赖" class="headerlink" title="5.1导入spring整合junit的依赖"></a>5.1导入spring整合junit的依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="5-2-相关注解的使用"><a href="#5-2-相关注解的使用" class="headerlink" title="5.2 相关注解的使用"></a>5.2 相关注解的使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * spring集合junit的配置</span></span><br><span class="line"><span class="comment"> *      1.导入spring整合junit的依赖</span></span><br><span class="line"><span class="comment"> *      2.使用junit提供的一个注解把原有的main方法替换了，替换成spring提供的</span></span><br><span class="line"><span class="comment"> *          <span class="doctag">@Runwith</span></span></span><br><span class="line"><span class="comment"> *      3.告知spring的运行器，spring和ioc创建是基于xml还是注解的，并且说明位置</span></span><br><span class="line"><span class="comment"> *          <span class="doctag">@ContextConfiguration</span></span></span><br><span class="line"><span class="comment"> *              locations:指定xml文件的位置，加上classpath关键字，表示在类路径下</span></span><br><span class="line"><span class="comment"> *              classes:指定注解类所在的位置</span></span><br><span class="line"><span class="comment"> *      当我们使用spring 5.x版本，需要junit的版本必须是4.12及以上</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService as = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Before</span></span><br><span class="line"><span class="comment">//    public void init()&#123;</span></span><br><span class="line"><span class="comment">//        ac = new AnnotationConfigApplicationContext(SpringConfig.class);</span></span><br><span class="line"><span class="comment">//        as = ac.getBean(&quot;accountService&quot;, AccountService.class);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Account&gt; allAccount = as.findAllAccount();</span><br><span class="line">        System.out.println(allAccount);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Account accountById = as.findAccountById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(accountById);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span></span>&#123;</span><br><span class="line">        as.saveAccount(<span class="keyword">new</span> Account(<span class="keyword">null</span>,<span class="string">&quot;李倩&quot;</span>,<span class="number">10000</span>));</span><br><span class="line">    &#125;<span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        as.updateAccount(<span class="keyword">new</span> Account(<span class="number">1</span>,<span class="string">&quot;666&quot;</span>,<span class="number">10000</span>));</span><br><span class="line">    &#125;<span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        as.deleteAccount(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>SSM</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis集群</title>
    <url>/2022/10/17/Redis%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<h1 id="Redis集群"><a href="#Redis集群" class="headerlink" title="Redis集群"></a>Redis集群</h1><p>Redis 集群实现了对Redis的水平扩容，即启动N个redis节点，将整个数据库分布存储在这N个节点中，每个节点存储总数据的1/N。</p>
<p>并且Redis 集群通过分区（partition）来提供一定程度的可用性（availability）： 即使集群中有一部分节点失效或者无法进行通讯， 集群也可以继续处理命令请求。</p>
<blockquote>
<p> 集群解决的问题：</p>
<ul>
<li>容量不够，redis如何进行扩容？</li>
<li>并发写操作， redis如何分摊？</li>
<li>主从模式中的ip和端口的变化</li>
</ul>
</blockquote>
<h2 id="无中心化集群的搭建"><a href="#无中心化集群的搭建" class="headerlink" title="无中心化集群的搭建"></a>无中心化集群的搭建</h2><ol>
<li><p>进行每个服务器的配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">include &#x2F;home&#x2F;bigdata&#x2F;redis.conf  #导入基础配置文件</span><br><span class="line">port 6379 #设置端口</span><br><span class="line">pidfile &quot;&#x2F;var&#x2F;run&#x2F;redis_6379.pid&quot; #设置redis的进程文件</span><br><span class="line">dbfilename &quot;dump6379.rdb&quot;  #设置数据备份文件</span><br><span class="line">dir &quot;&#x2F;home&#x2F;bigdata&#x2F;redis_cluster&quot; #设置数据目录，数据库的写入会在这个目录。rdb、aof文件也会写在这个目录</span><br><span class="line">logfile &quot;&#x2F;home&#x2F;bigdata&#x2F;redis_cluster&#x2F;redis_err_6379.log&quot; #设置日志文件地址</span><br><span class="line">cluster-enabled yes #打开集群模式</span><br><span class="line">cluster-config-file nodes-6379.conf #设定节点配置文件名</span><br><span class="line">cluster-node-timeout 15000 #设定节点失联时间，超过该时间（毫秒），集群自动进行主从切换。</span><br></pre></td></tr></table></figure></li>
<li><p>启动redis服务</p>
</li>
<li><p>合成集群：<code>redis-cli --cluster create --cluster-replicas 1 所有主机ip:端口</code>（–replicas 1 采用最简单的方式配置集群，一台主机，一台从机）</p>
</li>
<li><p>以集群方式连接：<code>redis-cli -c -p 6379 -a 123321</code></p>
</li>
</ol>
<blockquote>
<p>进入客户端后可以通过cluster nodes命令查看集群状态</p>
<p>如果想插入多个值，需要在key后面加{组名}进行分组插入</p>
<p>查询集群中的值：<code>CLUSTER GETKEYSINSLOT &lt;slot&gt; &lt;count&gt;</code></p>
</blockquote>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring_2</title>
    <url>/2021/04/25/Spring-2/</url>
    <content><![CDATA[<h1 id="Spring-学习笔记（二）"><a href="#Spring-学习笔记（二）" class="headerlink" title="Spring 学习笔记（二）"></a>Spring 学习笔记（二）</h1><h2 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h3><ul>
<li>概述：</li>
</ul>
<p>​        在软件业，AOP为Aspect Oriented Programming的缩写，意为：<a href="https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/6016335">面向切面编程</a>，通过<a href="https://baike.baidu.com/item/%E9%A2%84%E7%BC%96%E8%AF%91/3191547">预编译</a>方式和运行期间动态代理实现程序功能的统一维护的一种技术。AOP是<a href="https://baike.baidu.com/item/OOP">OOP</a>的延续，是软件开发中的一个热点，也是<a href="https://baike.baidu.com/item/Spring">Spring</a>框架中的一个重要内容，是<a href="https://baike.baidu.com/item/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/4035031">函数式编程</a>的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的<a href="https://baike.baidu.com/item/%E8%80%A6%E5%90%88%E5%BA%A6/2603938">耦合度</a>降低，提高程序的可重用性，同时提高了开发的效率。</p>
<p>​        简单的说就是把我们程序重复的代码抽取出来，在需要执行的时候，使用==动态代理==的技术，在不修改源码的基础上，对我们的已有方法进行增强。</p>
<ul>
<li>作用：<ul>
<li>在程序运行期间，不修改源码对已有方法进行加强</li>
</ul>
</li>
<li>优势<ul>
<li>减少重复代码</li>
<li>提高开发效率</li>
<li>维护方便</li>
</ul>
</li>
</ul>
<h3 id="2-AOP相关术语"><a href="#2-AOP相关术语" class="headerlink" title="2.AOP相关术语"></a>2.AOP相关术语</h3><ul>
<li>Joinpoint(连接点): 所谓连接点是指那些被拦截到的点。在spring中,这些点指的是方法,因为spring只支持方法类型的连接点。 </li>
<li>Pointcut(切入点): 所谓切入点是指我们要对哪些Joinpoint进行拦截的定义。</li>
<li>Advice(通知/增强):  所谓通知是指拦截到Joinpoint之后所要做的事情就是通知。 </li>
<li>通知的类型：<ul>
<li>前置通知,</li>
<li>后置通知,</li>
<li>异常通知</li>
<li>最终通知</li>
<li>环绕通知。</li>
</ul>
</li>
<li>Introduction(引介):  引介是一种特殊的通知在不修改类代码的前提下, Introduction可以在运行期为类动态地添加一些方法或Field。</li>
<li>Target(目标对象):  代理的目标对象。</li>
<li>Weaving(织入):  是指把增强应用到目标对象来创建新的代理对象的过程。 spring采用动态代理织入，而AspectJ采用编译期织入和类装载期织入。</li>
<li>Proxy（代理）:  一个类被AOP织入增强后，就产生一个结果代理类。 </li>
<li>Aspect(切面):  是切入点和通知（引介）的结合。</li>
</ul>
<h3 id="3-Spring-AOP的使用"><a href="#3-Spring-AOP的使用" class="headerlink" title="3.Spring AOP的使用"></a>3.Spring AOP的使用</h3><h4 id="1-基于bean-xml的使用"><a href="#1-基于bean-xml的使用" class="headerlink" title="1.基于bean.xml的使用"></a>1.基于bean.xml的使用</h4> <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    配置spring的Ioc，把service对象配置进来--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wht.service.Impl.AccountServiceImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- spring中基于xml的aop配置步骤</span></span><br><span class="line"><span class="comment">         1.把通知Bean也交给spring来管理</span></span><br><span class="line"><span class="comment">         2.使用aop:config标签表明开始AOP的配置</span></span><br><span class="line"><span class="comment">         3.使用aop：aspect标签表明配置切面</span></span><br><span class="line"><span class="comment">                id属性：是给切面提供一个唯一标识</span></span><br><span class="line"><span class="comment">                ref属性：是指定通知类bean的id</span></span><br><span class="line"><span class="comment">         4.在aop：aspect标签的内部使用对应标签来配置通知的类型</span></span><br><span class="line"><span class="comment">                通知类型：</span></span><br><span class="line"><span class="comment">                    前置通知：在切入点方法执行之前执行</span></span><br><span class="line"><span class="comment">                        aop:before:表示配置前置通知</span></span><br><span class="line"><span class="comment">                            method属性：用于指定Logger类中哪个方法是前置通知</span></span><br><span class="line"><span class="comment">                            pointcut属性：用于指定切入点表达式，该表达式的含义指的是对业务层哪些方法进行增强</span></span><br><span class="line"><span class="comment">                    后置通知：在切入点正常执行之后执行</span></span><br><span class="line"><span class="comment">                        after-returning:表示配置后置通知</span></span><br><span class="line"><span class="comment">                            method属性：用于指定Logger类中哪个方法是后置通知</span></span><br><span class="line"><span class="comment">                            pointcut属性：用于指定切入点表达式，该表达式的含义指的是对业务层哪些方法进行增强</span></span><br><span class="line"><span class="comment">                    异常通知：在切入点执行产生异常之后执行</span></span><br><span class="line"><span class="comment">                        aop:after-throwing:表示配置异常通知</span></span><br><span class="line"><span class="comment">                            method属性：用于指定Logger类中哪个方法是异常通知</span></span><br><span class="line"><span class="comment">                            pointcut属性：用于指定切入点表达式，该表达式的含义指的是对业务层哪些方法进行增强</span></span><br><span class="line"><span class="comment">                    最终通知：无论切入方法是否正常执行都会在其后面执行</span></span><br><span class="line"><span class="comment">                        aop:after :表示配置最终通知</span></span><br><span class="line"><span class="comment">                            method属性：用于指定Logger类中哪个方法是最终通知</span></span><br><span class="line"><span class="comment">                            pointcut属性：用于指定切入点表达式，该表达式的含义指的是对业务层哪些方法进行增强</span></span><br><span class="line"><span class="comment">                    环绕通知：无论切入方法是否正常执行都会在其后面执行</span></span><br><span class="line"><span class="comment">                        aop:around :表示配置环绕通知</span></span><br><span class="line"><span class="comment">                            method属性：用于指定Logger类中哪个方法是环绕通知</span></span><br><span class="line"><span class="comment">                            pointcut属性：用于指定切入点表达式，该表达式的含义指的是对业务层哪些方法进行增强</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                aop:pointcut 切入点表达式标签 可以在通知标签中使用 pointcut-ref引用</span></span><br><span class="line"><span class="comment">                    此标签写在aop:aspect标签中，只能当前切面使用</span></span><br><span class="line"><span class="comment">                    写在aop:aspect外面，就可以让所有切面使用，但是必须在所有aop:aspect标签之前</span></span><br><span class="line"><span class="comment">                    id属性：用于指定表达式的唯一标识</span></span><br><span class="line"><span class="comment">                    expression:用于表达式内容</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                切入表达式的写法：</span></span><br><span class="line"><span class="comment">                    关键字：execution(表达式)</span></span><br><span class="line"><span class="comment">                    表达式：</span></span><br><span class="line"><span class="comment">                        访问修饰符 返回值 包名.包名.包名...类名.方法名(参数列表)</span></span><br><span class="line"><span class="comment">                        访问修饰符可以省略</span></span><br><span class="line"><span class="comment">                        返回值可以使用通配符，表示任意返回值</span></span><br><span class="line"><span class="comment">                        包名可以使用通配符，表示任意包</span></span><br><span class="line"><span class="comment">                            也可以使用..表示当前包及其子包</span></span><br><span class="line"><span class="comment">                        类名和方法名都可以使用通配符表示</span></span><br><span class="line"><span class="comment">                        参数列表：</span></span><br><span class="line"><span class="comment">                            可以直接写数据类型：</span></span><br><span class="line"><span class="comment">                                基本类型直接写名称： int..</span></span><br><span class="line"><span class="comment">                                引用类型写包名.类名的方式： java.lang.String</span></span><br><span class="line"><span class="comment">                             可以使用通配符表示任意类型，但是必须有参数</span></span><br><span class="line"><span class="comment">                             可以使用..表示有无参数均可</span></span><br><span class="line"><span class="comment">                    全通配写法：</span></span><br><span class="line"><span class="comment">                        * *..*.*(...)</span></span><br><span class="line"><span class="comment">                    标准写法：</span></span><br><span class="line"><span class="comment">                        public void com.wht.service.Impl.AccountService.saveAccount()</span></span><br><span class="line"><span class="comment">                    通常写法：</span></span><br><span class="line"><span class="comment">                        * com.wht.service.impl.*.*(..)</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    配置Logger类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;logger&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wht.utils.Loogger&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置aop --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置切面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">&quot;logAdvice&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;logger&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置通知类型，并建立通知方法和切入方法的关联 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;printLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pt1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pt1&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.wht.service.impl.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="2-基于注解的使用"><a href="#2-基于注解的使用" class="headerlink" title="2.基于注解的使用"></a>2.基于注解的使用</h4><p>xml的配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        配置spring创建容器时要扫描的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.wht&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    配置spring开启注解AOP的支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;logger&quot;)</span></span><br><span class="line"><span class="meta">@Aspect</span>  <span class="comment">//表示这是一个切面类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Loogger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.wht.service.impl.*.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pt1</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//@Before(&quot;pt1()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">beforePrintLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置通知Logger类中的beforePrintLog方法开始记录日志了。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后置通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//@AfterReturning(&quot;pt1()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">afterReturningPrintLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后置通知Logger类中的afterReturningPrintLog方法开始记录日志了。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//@AfterThrowing(&quot;pt1()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">afterThrowingPrintLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;异常通知Logger类中的afterThrowingPrintLog方法开始记录日志了。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最终通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//@After(&quot;pt1()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">afterPrintLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;最终通知Logger类中的afterPrintLog方法开始记录日志了。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 环绕通知</span></span><br><span class="line"><span class="comment">     * 问题：</span></span><br><span class="line"><span class="comment">     *      当我们配置了环绕通知之后，切入点方法没有执行，而通知方法执行了。</span></span><br><span class="line"><span class="comment">     * 分析：</span></span><br><span class="line"><span class="comment">     *      通过对比动态代理中的环绕通知代码，发现动态代理的环绕通知有明确的切入点方法调用，而我们的代码中没有。</span></span><br><span class="line"><span class="comment">     * 解决：</span></span><br><span class="line"><span class="comment">     *      Spring框架为我们提供了一个接口：ProceedingJoinPoint。该接口有一个方法proceed()，此方法就相当于明确调用切入点方法。</span></span><br><span class="line"><span class="comment">     *      该接口可以作为环绕通知的方法参数，在程序执行时，spring框架会为我们提供该接口的实现类供我们使用。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * spring中的环绕通知：</span></span><br><span class="line"><span class="comment">     *      它是spring框架为我们提供的一种可以在代码中手动控制增强方法何时执行的方式。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around(&quot;pt1()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">aroundPringLog</span><span class="params">(ProceedingJoinPoint pjp)</span></span>&#123;</span><br><span class="line">        Object rtValue = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Object[] args = pjp.getArgs();<span class="comment">//得到方法执行所需的参数</span></span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;Logger类中的aroundPringLog方法开始记录日志了。。。前置&quot;</span>);</span><br><span class="line"></span><br><span class="line">            rtValue = pjp.proceed(args);<span class="comment">//明确调用业务层方法（切入点方法）</span></span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;Logger类中的aroundPringLog方法开始记录日志了。。。后置&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> rtValue;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Throwable t)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Logger类中的aroundPringLog方法开始记录日志了。。。异常&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(t);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Logger类中的aroundPringLog方法开始记录日志了。。。最终&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Spring-JdbcTemplate"><a href="#Spring-JdbcTemplate" class="headerlink" title="Spring JdbcTemplate"></a>Spring JdbcTemplate</h2><h3 id="1-JdbcTemplate的作用"><a href="#1-JdbcTemplate的作用" class="headerlink" title="1.JdbcTemplate的作用"></a>1.JdbcTemplate的作用</h3><p>它就是用于和数据库交互，实现对表的CRUD操作</p>
<h3 id="2-JdbcTemplate的使用"><a href="#2-JdbcTemplate的使用" class="headerlink" title="2.JdbcTemplate的使用"></a>2.JdbcTemplate的使用</h3><ul>
<li>bean.xml的配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context-3.2.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    配置JdbcTemplate--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    配置数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///mybatis?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8<span class="symbol">&amp;amp;</span>useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone = GMT&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>CRUD操作</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wht</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//获取对象</span></span><br><span class="line">        JdbcTemplate jdbcTemplate = ac.getBean(<span class="string">&quot;jdbcTemplate&quot;</span>, JdbcTemplate.class);</span><br><span class="line">        <span class="comment">//执行操作</span></span><br><span class="line">        <span class="comment">//保存</span></span><br><span class="line">        jdbcTemplate.update(<span class="string">&quot;insert into account(name,money) values(?,?)&quot;</span>,<span class="string">&quot;fff&quot;</span>,<span class="number">1000f</span>);</span><br><span class="line">        <span class="comment">//更新</span></span><br><span class="line">        jdbcTemplate.update(<span class="string">&quot;update account set name =?,money=? where id = ?&quot;</span>,<span class="string">&quot;fff&quot;</span>,<span class="number">2000f</span>,<span class="number">7</span>);</span><br><span class="line">        <span class="comment">//删除</span></span><br><span class="line">        jdbcTemplate.update(<span class="string">&quot;delete from account where id = ?&quot;</span>,<span class="number">7</span>);</span><br><span class="line">        <span class="comment">//查询所有或查询一个</span></span><br><span class="line">        List&lt;Account&gt; query = jdbcTemplate.query(<span class="string">&quot;select * from account where money &gt; ?&quot;</span>, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account.class), <span class="number">100</span>);</span><br><span class="line">        <span class="comment">//查询返回一行一列</span></span><br><span class="line">        Integer integer = jdbcTemplate.queryForObject(<span class="string">&quot;select count(*) from account&quot;</span>, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Integer&gt;(Integer.class));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Spring中的事务控制"><a href="#Spring中的事务控制" class="headerlink" title="Spring中的事务控制"></a>Spring中的事务控制</h2><h3 id="1-基于xml的事务"><a href="#1-基于xml的事务" class="headerlink" title="1.基于xml的事务"></a>1.基于xml的事务</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">           https://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/context/spring-context-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">           https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    配置JdbcTemplate--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    配置数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///mybatis?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8<span class="symbol">&amp;amp;</span>useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone = GMT&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    配置事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    配置事务通知--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        配置事务属性</span></span><br><span class="line"><span class="comment">            isolation:指定事务的隔离级别，默认值是DEFAULT,表示使用数据库的默认级别</span></span><br><span class="line"><span class="comment">            no-rollback-for：用于指定一个异常，当产生该异常时，事务不回滚，产生其他异常时回滚。没有默认值，表示任何异常都回滚。</span></span><br><span class="line"><span class="comment">            propagation：用于指定事务的传播行为。默认值是REQUIRED，表示一定会有事务，增删改的选择，查询方法可以选择SUPPORTS</span></span><br><span class="line"><span class="comment">            read-only：用于指定事务是否只读，只有查询方法才能设置true默认值为false。</span></span><br><span class="line"><span class="comment">            rollback-for：用于指定一个异常，当产生该异常时，事务回滚，产生其他异常时不回滚。没有默认值，表示任何异常都回滚。</span></span><br><span class="line"><span class="comment">            timeout：指定事务超时时间，默认值是-1，表示永不超时，如果指定了数值，以秒为单位。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置增删改--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置查询--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;find*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;SUPPORTS&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    配置aop --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 切入点通用表达式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pt1&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.wht.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 建立切入点表达式和事务通知的对应关系--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pt1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-基于注解的事务"><a href="#2-基于注解的事务" class="headerlink" title="2.基于注解的事务"></a>2.基于注解的事务</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">           https://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/context/spring-context-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">           https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.wht&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    配置JdbcTemplate--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    配置数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///mybatis?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8<span class="symbol">&amp;amp;</span>useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone = GMT&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    配置事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    开启spring对注解事务的支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:annotation-driven</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    最后在只需要在需要事务支持的地方使用@Transactional即可</span></span><br><span class="line"><span class="comment">        若需修改属性：则可以写成如下：</span></span><br><span class="line"><span class="comment">        @Transactional(propagation = Propagation.SUPPORTS,readOnly = true)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>SSM</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Security</title>
    <url>/2022/11/03/Spring-Security/</url>
    <content><![CDATA[<h1 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Spring Security 基于 Spring 框架，提供了一套 Web 应用安全性(两方面)的完整解决方案。目前比较主流的用法也是Spring Boot/Spring Cloud + Spring Security</p>
<p>Web 应用的安全性包括：<strong>用户认证（Authentication）</strong>和<strong>用户授权（Authorization）</strong>两个部分，这两点也是Spring Security重要核心功能。</p>
<blockquote>
<p><strong>认证</strong>：验证当前访问系统的是不是本系统的用户，并且要确认具体是哪个用户(一般采用用户名和密码的形式)</p>
<p><strong>授权</strong>：经过认证后判断当前用户是否有权限进行某个操作</p>
</blockquote>
<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><ul>
<li><p>导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>创建启动类、controller</p>
</li>
<li><p>启动项目，需要输入账号密码（用户名user密码随机生成在日志中）</p>
</li>
</ul>
<img src= "/img/loading.gif" data-lazy-src="https://blogpic-1305209282.cos.ap-chengdu.myqcloud.com/img/image-20220802182044471.png" alt="image-20220802182044471" style="zoom:67%;" />

<blockquote>
<p>可以在配置文件中修改账号密码（或者使用配置类）：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.security.user.name</span>=<span class="string">admin</span></span><br><span class="line"><span class="meta">spring.security.user.password</span>=<span class="string">123</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="用户认证"><a href="#用户认证" class="headerlink" title="用户认证"></a>用户认证</h2><p>对于用户认证，SpringSecurity提供了多种认证方式</p>
<ul>
<li>HTTP BASIC authentication headers：基于IETF RFC 标准。</li>
<li>HTTP Digest authentication headers：基于IETF RFC 标准。</li>
<li>HTTP X.509 client certificate exchange：基于IETF RFC 标准。</li>
<li>LDAP：跨平台身份验证。</li>
<li>Form-based authentication：基于表单的身份验证。</li>
<li>Run-as authentication：用户用户临时以某一个身份登录。</li>
<li>OpenID authentication：去中心化认证。</li>
<li>Jasig Central Authentication Service：单点登录。</li>
<li>Automatic “remember-me” authentication：记住我登录（允许一些非敏感操作）。</li>
<li>Anonymous authentication：匿名登录。</li>
<li>….等</li>
</ul>
<h3 id="基本登录验证"><a href="#基本登录验证" class="headerlink" title="基本登录验证"></a>基本登录验证</h3><h5 id="设置配置类"><a href="#设置配置类" class="headerlink" title="设置配置类"></a>设置配置类</h5><ul>
<li><p>首先进行密码加密配置（在 Spring Security 中，BCryptPasswordEncoder 就自带了盐，处理起来非常方便）</p>
<ul>
<li><p>BCryptPasswordEncoder 就是 PasswordEncoder 接口的实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PasswordEncoder</span> </span>&#123;</span><br><span class="line">    <span class="comment">//方法用来对明文密码进行加密，返回加密之后的密文。</span></span><br><span class="line">	<span class="function">String <span class="title">encode</span><span class="params">(CharSequence rawPassword)</span></span>; </span><br><span class="line">	<span class="comment">//方法是一个密码校对方法，在用户登录的时候，将用户传来的明文密码和数据库中保存的密文密码作为参数，传入到这个方法中去，根据返回的 Boolean 值判断用户密码是否输入正确。</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(CharSequence rawPassword, String encodedPassword)</span></span>; </span><br><span class="line">    <span class="comment">//是否还要进行再次加密，这个一般来说就不用了</span></span><br><span class="line">	<span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">upgradeEncoding</span><span class="params">(String encodedPassword)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>在内存中存入用户：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">auth.inMemoryAuthentication()</span><br><span class="line">                .withUser(<span class="string">&quot;admin&quot;</span>)  <span class="comment">//用户名</span></span><br><span class="line">                .password(<span class="string">&quot;123&quot;</span>).roles(<span class="string">&quot;admin&quot;</span>); <span class="comment">//密码和角色</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置忽略静态资源：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//web.ignoring() 用来配置忽略掉的 URL 地址，一般对于静态文件，我们可以采用此操作</span></span><br><span class="line">    web.ignoring().antMatchers(<span class="string">&quot;/js/**&quot;</span>, <span class="string">&quot;/css/**&quot;</span>,<span class="string">&quot;/images/**&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>自定义表单页面（仅适用于前后端不分离）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http.authorizeRequests()</span><br><span class="line">            .anyRequest().authenticated() <span class="comment">//任何接口都需要进行认证</span></span><br><span class="line">            .and() <span class="comment">//以and进行配置分割</span></span><br><span class="line">        	 <span class="comment">//登录</span></span><br><span class="line">            .formLogin()</span><br><span class="line">            .loginPage(<span class="string">&quot;/login.html&quot;</span>)  <span class="comment">//所使用的登录页面（该配置即是页面也是接口）</span></span><br><span class="line">        	.loginProcessingUrl(<span class="string">&quot;/doLogin&quot;</span>)  <span class="comment">//配置登录参数提交接口</span></span><br><span class="line">        	.usernameParameter(<span class="string">&quot;name&quot;</span>)      <span class="comment">//修改表单参数名</span></span><br><span class="line">			.passwordParameter(<span class="string">&quot;passwd&quot;</span>)    <span class="comment">//修改表单参数名</span></span><br><span class="line">        	.defaultSuccessUrl(<span class="string">&quot;/index&quot;</span>)   <span class="comment">//登录成功跳转接口</span></span><br><span class="line">        	.failureForwardUrl(<span class="string">&quot;/error&quot;</span>) <span class="comment">//登录失败跳转接口</span></span><br><span class="line">            .permitAll()  <span class="comment">//表示登录相关的页面/接口不要被拦截</span></span><br><span class="line">        	.and()</span><br><span class="line">        	 <span class="comment">//注销</span></span><br><span class="line">            .logout()</span><br><span class="line">            .logoutRequestMatcher(<span class="keyword">new</span> AntPathRequestMatcher(<span class="string">&quot;/logout&quot;</span>,<span class="string">&quot;POST&quot;</span>)) </span><br><span class="line">            .logoutSuccessUrl(<span class="string">&quot;/login&quot;</span>)<span class="comment">//注销成功跳转的接口</span></span><br><span class="line">            .deleteCookies() <span class="comment">//清楚cookie</span></span><br><span class="line">            .clearAuthentication(<span class="keyword">true</span>) <span class="comment">//清除认证信息，默认可以不用配置会自动清楚</span></span><br><span class="line">            .invalidateHttpSession(<span class="keyword">true</span>) <span class="comment">//使 HttpSession 失效，默认可以不用配置会自动清楚</span></span><br><span class="line">            .permitAll()</span><br><span class="line">            .and()</span><br><span class="line">            .csrf().disable(); <span class="comment">//关闭csrf</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<ol>
<li><p>注意登录表单的action必须是”/login.html”以及账号和密码输入框的name一个为username一个为password，不然就不到参会报错</p>
</li>
<li><p>登录成功的回调配置有两个：</p>
</li>
</ol>
<ul>
<li>defaultSuccessUrl ：登录成功后返回刚才页面，可以设置第二个参数true/false，若为true就跟successForwardUrl一样的效果</li>
<li>successForwardUrl：不管从哪里进入的登录界面，只要登录成功都统一进入指定的接口</li>
</ul>
<ol start="3">
<li>登录失败的回调配置：</li>
</ol>
<ul>
<li>failureForwardUrl：failureForwardUrl 是forward 跳转 ，failureForwardUrl异常信息存储在request中</li>
<li>failureUrl ：failureUrl 是redirect 跳转，failureUrl认证失败异常信息存储在session中</li>
</ul>
<ol start="4">
<li>修改注销url的配置：</li>
</ol>
<ul>
<li>logoutUrl：修改默认的注销 URL，默认为GET请求</li>
<li>logoutRequestMatcher ：logoutRequestMatcher 方法不仅可以修改注销 URL，还可以修改请求方式，实际项目中，这个方法和 logoutUrl 任意设置一个即可</li>
</ul>
</blockquote>
</li>
</ul>
<h3 id="前后端分离登录"><a href="#前后端分离登录" class="headerlink" title="前后端分离登录"></a>前后端分离登录</h3><h4 id="方式一："><a href="#方式一：" class="headerlink" title="方式一："></a>方式一：</h4><h5 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h5><p>因为Spring Security 默认是通过 key/value 的形式来传递登录参数，因为它处理的方式就是 request.getParameter，但是很多时候我们是通过json来传递数据的，就需要自定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFilter</span> <span class="keyword">extends</span> <span class="title">UsernamePasswordAuthenticationFilter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">attemptAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">//判断是否是post请求</span></span><br><span class="line">        <span class="keyword">if</span> (!request.getMethod().equals(<span class="string">&quot;POST&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationServiceException(</span><br><span class="line">                    <span class="string">&quot;Authentication method not supported: &quot;</span> + request.getMethod());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取session中存的正确验证码（也可以存redis中）</span></span><br><span class="line">        String verify_code = (String) request.getSession().getAttribute(<span class="string">&quot;verify_code&quot;</span>);</span><br><span class="line">        <span class="comment">//如果是json类型</span></span><br><span class="line">        <span class="keyword">if</span> (request.getContentType().equals(MediaType.APPLICATION_JSON_VALUE) || request.getContentType().equals(MediaType.APPLICATION_JSON_UTF8_VALUE)) &#123;</span><br><span class="line">            Map&lt;String, String&gt; loginData = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                loginData = <span class="keyword">new</span> ObjectMapper().readValue(request.getInputStream(), Map.class);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                String code = loginData.get(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">                checkCode(response, code, verify_code);</span><br><span class="line">            &#125;</span><br><span class="line">            String username = loginData.get(getUsernameParameter());</span><br><span class="line">            String password = loginData.get(getPasswordParameter());</span><br><span class="line">            <span class="keyword">if</span> (username == <span class="keyword">null</span>) &#123;</span><br><span class="line">                username = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (password == <span class="keyword">null</span>) &#123;</span><br><span class="line">                password = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            username = username.trim();</span><br><span class="line">            <span class="comment">//生成UsernamePasswordAuthenticationToken用于验证</span></span><br><span class="line">            UsernamePasswordAuthenticationToken authRequest = <span class="keyword">new</span> UsernamePasswordAuthenticationToken(</span><br><span class="line">                    username, password);</span><br><span class="line">            setDetails(request, authRequest);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.getAuthenticationManager().authenticate(authRequest);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果不是json，就用key/value形式</span></span><br><span class="line">            checkCode(response, request.getParameter(<span class="string">&quot;code&quot;</span>), verify_code);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.attemptAuthentication(request, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkCode</span><span class="params">(HttpServletResponse resp, String code, String verify_code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (code == <span class="keyword">null</span> || verify_code == <span class="keyword">null</span> || <span class="string">&quot;&quot;</span>.equals(code) || !verify_code.toLowerCase().equals(code.toLowerCase())) &#123;</span><br><span class="line">            <span class="comment">//验证码不正确</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationServiceException(<span class="string">&quot;验证码不正确&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="配置过滤器"><a href="#配置过滤器" class="headerlink" title="配置过滤器"></a>配置过滤器</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function">LoginFilter <span class="title">loginFilter</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        LoginFilter loginFilter = <span class="keyword">new</span> LoginFilter();</span><br><span class="line">        loginFilter.setAuthenticationSuccessHandler(<span class="keyword">new</span> AuthenticationSuccessHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">                response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">                PrintWriter out = response.getWriter();</span><br><span class="line">                String s = <span class="keyword">new</span> ObjectMapper().writeValueAsString(ResponseEntityDemo.successWithData(authentication.getPrincipal()));</span><br><span class="line">                out.write(s);</span><br><span class="line">                out.flush();</span><br><span class="line">                out.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        loginFilter.setAuthenticationFailureHandler(<span class="keyword">new</span> AuthenticationFailureHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationFailure</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">                response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">                PrintWriter out = response.getWriter();</span><br><span class="line">                ResponseEntityDemo responseEntityDemo = ResponseEntityDemo.failed(exception.getMessage());</span><br><span class="line">                <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> LockedException) &#123;</span><br><span class="line">                    responseEntityDemo.setMessage(<span class="string">&quot;账户被锁定，请联系管理员!&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> CredentialsExpiredException) &#123;</span><br><span class="line">                    responseEntityDemo.setMessage(<span class="string">&quot;密码过期，请联系管理员!&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> AccountExpiredException) &#123;</span><br><span class="line">                    responseEntityDemo.setMessage(<span class="string">&quot;账户过期，请联系管理员!&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> DisabledException) &#123;</span><br><span class="line">                    responseEntityDemo.setMessage(<span class="string">&quot;账户被禁用，请联系管理员!&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> BadCredentialsException) &#123;</span><br><span class="line">                    responseEntityDemo.setMessage(<span class="string">&quot;用户名或者密码输入错误，请重新输入!&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                out.write(<span class="keyword">new</span> ObjectMapper().writeValueAsString(responseEntityDemo));</span><br><span class="line">                out.flush();</span><br><span class="line">                out.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        loginFilter.setAuthenticationManager(authenticationManagerBean());</span><br><span class="line">        loginFilter.setFilterProcessesUrl(<span class="string">&quot;/doLogin&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> loginFilter;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="方式二："><a href="#方式二：" class="headerlink" title="方式二："></a>方式二：</h4><h5 id="从数据库中获取用户信息"><a href="#从数据库中获取用户信息" class="headerlink" title="从数据库中获取用户信息"></a>从数据库中获取用户信息</h5><p><img src= "/img/loading.gif" data-lazy-src="https://blogpic-1305209282.cos.ap-chengdu.myqcloud.com/img/image-20220803212446730.png" alt="image-20220803212446730"></p>
<p>因为需要从数据库中获取用户信息，则不需要InMemoryUserDetailsManager（将用户存入内存数据源中），需要自定义UserDetailsService的实现类</p>
<ul>
<li><p>定义UserDetails对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wht.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginUser</span> <span class="keyword">implements</span> <span class="title">UserDetails</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user.getPassword();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user.getUserName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>再定义自定义UserDetailsService的实现类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wht.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.wht.entity.LoginUser;</span><br><span class="line"><span class="keyword">import</span> com.wht.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.wht.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//根据用户名查询用户信息</span></span><br><span class="line">        User user = userMapper.selectOne(<span class="keyword">new</span> LambdaQueryWrapper&lt;User&gt;().eq(User::getUserName,username));</span><br><span class="line">        <span class="comment">//如果查询不到数据就通过抛出异常来给出提示</span></span><br><span class="line">        <span class="keyword">if</span>(Objects.isNull(user))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//TODO 根据用户查询权限信息 添加到LoginUser中</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//封装成UserDetails对象返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LoginUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>将AuthenticationManager注入进容器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AuthenticationManager <span class="title">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.authenticationManagerBean();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>定义service来处理具体登录逻辑：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisUtil redisUtil;	</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntityDemo <span class="title">login</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//AuthenticationManager authenticate进行用户认证</span></span><br><span class="line">    UsernamePasswordAuthenticationToken authenticationToken = <span class="keyword">new</span> UsernamePasswordAuthenticationToken(user.getUserName(),user.getPassword());</span><br><span class="line">    Authentication authenticate = authenticationManager.authenticate(authenticationToken);</span><br><span class="line">    <span class="comment">//如果认证没通过，给出对应的提示</span></span><br><span class="line">    <span class="keyword">if</span>(Objects.isNull(authenticate))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果认证通过了，使用userid生成一个jwt jwt存入ResponseResult返回</span></span><br><span class="line">    LoginUser loginUser = (LoginUser) authenticate.getPrincipal();</span><br><span class="line">    String userid = loginUser.getUser().getId().toString();</span><br><span class="line">    String jwt = JwtUtil.createJWT(userid);</span><br><span class="line">    Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;token&quot;</span>,jwt);</span><br><span class="line">    <span class="comment">//把完整的用户信息存入redis  userid作为key</span></span><br><span class="line">    redisUtil.set(<span class="string">&quot;login:&quot;</span>+userid,loginUser);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntityDemo.successWithData(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>配置SpringSecurity</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http</span><br><span class="line">        <span class="comment">//关闭csrf</span></span><br><span class="line">        .csrf().disable()</span><br><span class="line">        <span class="comment">//不通过Session获取SecurityContext</span></span><br><span class="line">        .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">        .and()</span><br><span class="line">        .authorizeRequests()</span><br><span class="line">        <span class="comment">// 对于登录接口 允许匿名访问</span></span><br><span class="line">        .antMatchers(<span class="string">&quot;/user/login&quot;</span>).anonymous()</span><br><span class="line">        <span class="comment">// 除上面外的所有请求全部需要鉴权认证</span></span><br><span class="line">        .anyRequest().authenticated();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>继续配置过滤器将用户封装成Authentication放入SecurityContextHolder中方便后面的认证流程使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wht.Filter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wht.entity.LoginUser;</span><br><span class="line"><span class="keyword">import</span> com.wht.utils.JwtUtil;</span><br><span class="line"><span class="keyword">import</span> com.wht.utils.RedisUtil;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.OncePerRequestFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtAuthenticationTokenFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisUtil redisUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取token</span></span><br><span class="line">        String token = request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasText(token)) &#123;</span><br><span class="line">            <span class="comment">//放行</span></span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//解析token</span></span><br><span class="line">        String userid;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Claims claims = JwtUtil.parseJWT(token);</span><br><span class="line">            userid = claims.getSubject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;token非法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从redis中获取用户信息</span></span><br><span class="line">        String redisKey = <span class="string">&quot;login:&quot;</span> + userid;</span><br><span class="line">        LoginUser loginUser = (LoginUser) redisUtil.get(redisKey);</span><br><span class="line">        <span class="keyword">if</span>(Objects.isNull(loginUser))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;用户未登录&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//存入SecurityContextHolder</span></span><br><span class="line">        <span class="comment">//TODO 获取权限信息封装到Authentication中</span></span><br><span class="line">        UsernamePasswordAuthenticationToken authenticationToken =</span><br><span class="line">                <span class="keyword">new</span> UsernamePasswordAuthenticationToken(loginUser,<span class="keyword">null</span>,loginUser.getAuthorities());</span><br><span class="line">        SecurityContextHolder.getContext().setAuthentication(authenticationToken);</span><br><span class="line">        <span class="comment">//放行</span></span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>配置过滤器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在UsernamePasswordAuthenticationFilter过滤器认证之前拦截</span></span><br><span class="line">    http.addFilterBefore(jwtAuthenticationTokenFilter,UsernamePasswordAuthenticationFilter.class);</span><br></pre></td></tr></table></figure>
<h4 id="用户注销"><a href="#用户注销" class="headerlink" title="用户注销"></a>用户注销</h4></li>
</ul>
<p>只需要提供一个接口，删除掉存入redis中的用户信息即可</p>
<ul>
<li><p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/logout&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntityDemo <span class="title">logout</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> loginServcie.logout();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntityDemo <span class="title">logout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取SecurityContextHolder中的用户id</span></span><br><span class="line">    UsernamePasswordAuthenticationToken authentication = (UsernamePasswordAuthenticationToken) SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">    LoginUser loginUser = (LoginUser) authentication.getPrincipal();</span><br><span class="line">    Long userid = loginUser.getUser().getId();</span><br><span class="line">    <span class="comment">//删除redis中的值</span></span><br><span class="line">    redisUtil.del(<span class="string">&quot;login:&quot;</span>+userid);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntityDemo.successWithoutData();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




</li>
</ul>
<h2 id="用户授权"><a href="#用户授权" class="headerlink" title="用户授权"></a>用户授权</h2><h3 id="大致流程"><a href="#大致流程" class="headerlink" title="大致流程"></a>大致流程</h3><p>在SpringSecurity中，会使用默认的FilterSecurityInterceptor来进行权限校验。在FilterSecurityInterceptor中会从SecurityContextHolder获取其中的Authentication，然后获取其中的权限信息。当前用户是否拥有访问当前资源所需的权限。</p>
<p>所以我们只需要做好两步：</p>
<ul>
<li>把当前登录用户的权限信息也存入Authentication。</li>
<li>设置我们的资源所需要的权限即可。</li>
</ul>
<h3 id="授权配置"><a href="#授权配置" class="headerlink" title="授权配置"></a>授权配置</h3><h4 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h4><ul>
<li><p>给资源分配权限：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http.authorizeRequests()</span><br><span class="line">        .antMatchers(<span class="string">&quot;/admin/**&quot;</span>).hasRole(<span class="string">&quot;admin&quot;</span>) <span class="comment">//只允许admin进入</span></span><br><span class="line">        .antMatchers(<span class="string">&quot;/user/**&quot;</span>).hasRole(<span class="string">&quot;user&quot;</span>)  <span class="comment">//允许有user角色的进入</span></span><br><span class="line">        .anyRequest().authenticated() <span class="comment">//一定要放最后</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果要让admin有user权限，可以使用角色继承，使上级可能具备下级的所有权限</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">RoleHierarchy <span class="title">roleHierarchy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> RoleHierarchyImpl hierarchy = <span class="keyword">new</span> RoleHierarchyImpl();</span><br><span class="line"> hierarchy.setHierarchy(<span class="string">&quot;ROLE_admin &gt; ROLE_user&quot;</span>);</span><br><span class="line"> <span class="keyword">return</span> hierarchy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，在配置时，需要给角色手动加上 ROLE_ 前缀。上面的配置表示 ROLE_admin 自动具备 ROLE_user 的权限。</p>
</blockquote>
</li>
</ul>
<h4 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h4><ol>
<li><p>添加权限</p>
<ul>
<li><p>先开启相关配置：<code>@EnableGlobalMethodSecurity(prePostEnabled = true)</code></p>
</li>
<li><p>给接口添加权限限制：<code>@PreAuthorize(hasAuthority(&#39;权限名&#39;))</code></p>
<ul>
<li>hasAuthority：只有有这个权限才能访问</li>
<li>hasAnyAuthority：只要有其中任一一个权限即可访问</li>
<li>hasRole：只有有这个角色才能访问（但是会有一个ROLE_前缀）</li>
<li>hasAnyRole：只要有其中任一一个角色即可访问（同样会有ROLE_前缀）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;test&#x27;)&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>权限判断可以使用自定义方法：</p>
<ul>
<li><p>先定义方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;ex&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExpressionRoot</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasAuthority</span><span class="params">(String authority)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取当前用户的权限</span></span><br><span class="line">        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">        LoginUser loginUser = (LoginUser) authentication.getPrincipal();</span><br><span class="line">        List&lt;String&gt; permissions = loginUser.getPermissions();</span><br><span class="line">        <span class="comment">//判断用户权限集合中是否存在authority</span></span><br><span class="line">        <span class="keyword">return</span> permissions.contains(authority);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在授权时使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PreAuthorize(&quot;@ex.hasAuthority(&#x27;system:dept:list&#x27;)&quot;)</span></span><br></pre></td></tr></table></figure></li>
</ul>
</blockquote>
</li>
</ul>
</li>
<li><p>获取权限</p>
<ul>
<li><p>给UserDetails添加权限属性(保证登录时将权限存入)：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//存储权限信息</span></span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; permissions;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LoginUser</span><span class="params">(User user,List&lt;String&gt; permissions)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.user = user;</span><br><span class="line">    <span class="keyword">this</span>.permissions = permissions;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//存储SpringSecurity所需要的权限信息的集合</span></span><br><span class="line"><span class="meta">@JSONField(serialize = false)</span></span><br><span class="line"><span class="keyword">private</span> List&lt;GrantedAuthority&gt; authorities;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span>  Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">    <span class="keyword">if</span>(authorities!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> authorities;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//把permissions中字符串类型的权限信息转换成GrantedAuthority对象存入authorities中</span></span><br><span class="line">    authorities = permissions.stream().</span><br><span class="line">        map(SimpleGrantedAuthority::<span class="keyword">new</span>)</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line">    <span class="keyword">return</span> authorities;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在登录时从数据库查询权限列表封装成loginUser</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">    <span class="comment">//根据用户名查询用户信息</span></span><br><span class="line">    User user = userMapper.selectOne(<span class="keyword">new</span> LambdaQueryWrapper&lt;User&gt;().eq(User::getUserName,username));</span><br><span class="line">    <span class="comment">//如果查询不到数据就通过抛出异常来给出提示</span></span><br><span class="line">    <span class="keyword">if</span>(Objects.isNull(user))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//封装成UserDetails对象返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LoginUser(user,menuMapper.selectPermsByUserId(user.getId()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在认证过滤时封装进Authentication</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">UsernamePasswordAuthenticationToken authenticationToken =</span><br><span class="line">   <span class="keyword">new</span> UsernamePasswordAuthenticationToken(loginUser,<span class="keyword">null</span>,loginUser.getAuthorities());</span><br></pre></td></tr></table></figure>
<h2 id="统一处理认证与授权异常"><a href="#统一处理认证与授权异常" class="headerlink" title="统一处理认证与授权异常"></a>统一处理认证与授权异常</h2></li>
</ul>
</li>
</ol>
<p>在SpringSecurity中，如果我们在认证或者授权的过程中出现了异常会被ExceptionTranslationFilter捕获到。在ExceptionTranslationFilter中会去判断是认证失败还是授权失败出现的异常。</p>
<p>​    如果是认证过程中出现的异常会被封装成AuthenticationException然后调用<strong>AuthenticationEntryPoint</strong>对象的方法去进行异常处理。</p>
<p>​    如果是授权过程中出现的异常会被封装成AccessDeniedException然后调用<strong>AccessDeniedHandler</strong>对象的方法去进行异常处理。</p>
<p>直接可以在配置类中进行配置（也可以实现接口）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置异常处理器</span></span><br><span class="line">        http.exceptionHandling()</span><br><span class="line">            .authenticationEntryPoint((req, resp, authException) -&gt; &#123;</span><br><span class="line">                WebUtils.renderString(resp,JSON.toJSONString(ResponseEntityDemo.failed(ResultCode.UNAUTHORIZED)));</span><br><span class="line">            &#125;)</span><br><span class="line">            .accessDeniedHandler((req, resp, authException) -&gt; &#123;</span><br><span class="line">                WebUtils.renderString(resp,JSON.toJSONString(ResponseEntityDemo.failed(ResultCode.FORBIDDEN)));</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Spring Security</category>
      </categories>
      <tags>
        <tag>Spring Security</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot</title>
    <url>/2022/09/15/SpringBoot/</url>
    <content><![CDATA[<h1 id="SpringBoot简介"><a href="#SpringBoot简介" class="headerlink" title="SpringBoot简介"></a>SpringBoot简介</h1><p>​        SpringBoot本质就是一个javaweb的开发框架，和SpringMVC类似，对比其他javaweb框架的好处，官方说是简化开发，约定大于配置，能迅速的开发web应用。不仅继承了Spring框架原有的优秀特性，而且还通过简化配置来进一步简化了Spring应用的整个搭建和开发过程。另外SpringBoot通过集成大量的框架使得依赖包的版本冲突，以及引用的不稳定性等问题得到了很好的解决。</p>
<ul>
<li>特点：</li>
</ul>
<p>（1）可以创建独立的Spring应用程序，并且基于其Maven或Gradle插件，可以创建可执行的JARs和WARs；</p>
<p>（2）内嵌Tomcat或Jetty等Servlet容器；</p>
<p>（3）提供自动配置的“starter”项目对象模型（POMS）以简化Maven配置；</p>
<p>（4）自动配置Spring以及第三方功能；</p>
<p>（5）提供生产级别的监控、健康检查及外部化配置；</p>
<p>（6）无代码生成、无需编写XML；</p>
<h1 id="SpringBoot的使用"><a href="#SpringBoot的使用" class="headerlink" title="SpringBoot的使用"></a>SpringBoot的使用</h1><h2 id="SpringBoot的入门使用"><a href="#SpringBoot的入门使用" class="headerlink" title="SpringBoot的入门使用"></a>SpringBoot的入门使用</h2><h5 id="一、Maven方式创建"><a href="#一、Maven方式创建" class="headerlink" title="一、Maven方式创建"></a>一、Maven方式创建</h5><ol>
<li><p>创建一个maven工程</p>
</li>
<li><p>导入maven依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springBoot_01<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--父项目做依赖管理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--开发导入starter场景启动器</span></span><br><span class="line"><span class="comment">          1、见到很多 spring-boot-starter-* ： *就某种场景</span></span><br><span class="line"><span class="comment">      2、只要引入starter，这个场景的所有常规需要的依赖我们都自动引入</span></span><br><span class="line"><span class="comment">      3、SpringBoot所有支持的场景</span></span><br><span class="line"><span class="comment">      https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter</span></span><br><span class="line"><span class="comment">      4、见到的  *-spring-boot-starter： 第三方为我们提供的简化开发的场景启动器。</span></span><br><span class="line"><span class="comment">      5、所有场景启动器最底层的依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 把项目打成jar包，直接在目标服务器执行即可。--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>创建主程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wht.boot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@SpringBootApplication</span>告诉springboot这是个springboot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>编写业务层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wht.boot.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handler01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span><span class="string">&quot;hello ,spring boot 2!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>测试</p>
<p>直接运行main方法</p>
</li>
</ol>
<h5 id="二、通过idea直接创建SpringBoot工程"><a href="#二、通过idea直接创建SpringBoot工程" class="headerlink" title="二、通过idea直接创建SpringBoot工程"></a>二、通过idea直接创建SpringBoot工程</h5><p><img src= "/img/loading.gif" data-lazy-src="https://blogpic-1305209282.cos.ap-chengdu.myqcloud.com/img/image-20220718151148104.png" alt="image-20220718151148104"></p>
<h2 id="SpringBoot的自动配置"><a href="#SpringBoot的自动配置" class="headerlink" title="SpringBoot的自动配置"></a>SpringBoot的自动配置</h2><ul>
<li><p>自动配好Tomcat</p>
</li>
<li><p>引入Tomcat依赖。</p>
<p>配置Tomcat</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-tomcat&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.3.4.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">      &lt;scope&gt;compile&lt;&#x2F;scope&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>自动配好SpringMVC</p>
<ul>
<li><p>引入SpringMVC全套组件</p>
</li>
<li><p>自动配好SpringMVC常用组件（功能）</p>
</li>
</ul>
</li>
<li><p>自动配好Web常见功能，如：字符编码问题</p>
</li>
<li><p>SpringBoot帮我们配置好了所有web开发的常见场景</p>
</li>
<li><p>默认的包结构</p>
<ul>
<li><p>主程序所在包及其下面的所有子包里面的组件都会被默认扫描进来</p>
</li>
<li><p>无需以前的包扫描配置</p>
</li>
<li><p>想要改变扫描路径，@SpringBootApplication(scanBasePackages=<strong>“com.wht”</strong>)</p>
</li>
<li><p>或者@ComponentScan 指定扫描路径</p>
<p>@SpringBootApplication是合成注解<br>等同于<br>@SpringBootConfiguration<br>@EnableAutoConfiguration<br>@ComponentScan(“com.wht.boot”)</p>
</li>
</ul>
</li>
<li><p>各种配置拥有默认值</p>
<ul>
<li><p>默认配置最终都是映射到某个类上，如：MultipartProperties</p>
</li>
<li><p>配置文件的值最终会绑定每个类上，这个类会在容器中创建对象</p>
</li>
</ul>
</li>
<li><p>按需加载所有自动配置项</p>
<ul>
<li><p>非常多的starter</p>
</li>
<li><p>引入了哪些场景这个场景的自动配置才会开启</p>
</li>
<li><p>SpringBoot所有的自动配置功能都在 spring-boot-autoconfigure 包里面</p>
</li>
</ul>
</li>
</ul>
<h2 id="SpringBoot相关注解"><a href="#SpringBoot相关注解" class="headerlink" title="SpringBoot相关注解"></a>SpringBoot相关注解</h2><h3 id="1、-Configuration"><a href="#1、-Configuration" class="headerlink" title="1、@Configuration"></a>1、@Configuration</h3><ul>
<li><p>基本使用</p>
</li>
<li><p><strong>Full模式与Lite模式</strong></p>
<ul>
<li><p>配置 类组件之间无依赖关系用Lite模式加速容器启动过程，减少判断</p>
</li>
<li><p>配置类组件之间有依赖关系，方法会被调用得到之前单实例组件，用Full模式</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、配置类里面使用<span class="doctag">@Bean</span>标注在方法上给容器注册组件，默认也是单实例的</span></span><br><span class="line"><span class="comment"> * 2、配置类本身也是组件</span></span><br><span class="line"><span class="comment"> * 3、proxyBeanMethods：代理bean的方法</span></span><br><span class="line"><span class="comment"> *      Full(proxyBeanMethods = true)、【保证每个<span class="doctag">@Bean</span>方法被调用多少次返回的组件都是单实例的】</span></span><br><span class="line"><span class="comment"> *      Lite(proxyBeanMethods = false)【每个<span class="doctag">@Bean</span>方法被调用多少次返回的组件都是新创建的】</span></span><br><span class="line"><span class="comment"> *      组件依赖必须使用Full模式默认。其他默认是否Lite模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Full:外部无论对配置类中的这个组件注册方法调用多少次获取的都是之前注册容器中的单实例对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//给容器中添加组件。以方法名作为组件的id。返回类型就是组件类型。返回的值，就是组件在容器中的实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User zhangsan = <span class="keyword">new</span> User(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="comment">//user组件依赖了Pet组件</span></span><br><span class="line">        zhangsan.setPet(tomcatPet());</span><br><span class="line">        <span class="keyword">return</span> zhangsan;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;tom&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pet <span class="title">tomcatPet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pet(<span class="string">&quot;tomcat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2、-Bean、-Component、-Controller、-Service、-Repository"><a href="#2、-Bean、-Component、-Controller、-Service、-Repository" class="headerlink" title="2、@Bean、@Component、@Controller、@Service、@Repository"></a>2、@Bean、@Component、@Controller、@Service、@Repository</h3><p>与spring用法相同</p>
<h3 id="3、-ComponentScan、-Import"><a href="#3、-ComponentScan、-Import" class="headerlink" title="3、@ComponentScan、@Import"></a>3、@ComponentScan、@Import</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 4、@Import(&#123;User.class, DBHelper.class&#125;)</span></span><br><span class="line"><span class="comment"> *      给容器中自动创建出这两个类型的组件、默认组件的名字就是全类名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Import(&#123;User.class, DBHelper.class&#125;)</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4、-Conditional"><a href="#4、-Conditional" class="headerlink" title="4、@Conditional"></a>4、@Conditional</h3><p>条件装配：满足Conditional指定的条件，则进行组件注入</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1602835786727-28b6f936-62f5-4fd6-a6c5-ae690bd1e31d.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_10,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="image.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span> </span><br><span class="line"><span class="meta">@ConditionalOnBean(name = &quot;tom&quot;)</span><span class="comment">//给类上加，只有当条件满足这个类中的所有bean才会注册到容器中</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = &quot;tom&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User zhangsan = <span class="keyword">new</span> User(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="comment">//user组件依赖了Pet组件</span></span><br><span class="line">        zhangsan.setPet(tomcatPet());</span><br><span class="line">        <span class="keyword">return</span> zhangsan;</span><br><span class="line">    &#125;</span><br><span class="line">		<span class="meta">@ConditionalOnBean(name = &quot;tom&quot;)</span><span class="comment">//给方法加，只有当条件满足这个bean才会注册到容器中</span></span><br><span class="line">    <span class="meta">@Bean(&quot;tom22&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pet <span class="title">tomcatPet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pet(<span class="string">&quot;tomcat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1、返回我们IOC容器</span></span><br><span class="line">        ConfigurableApplicationContext run = SpringApplication.run(MainApplication.class, args);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、查看容器里面的组件</span></span><br><span class="line">        String[] names = run.getBeanDefinitionNames();</span><br><span class="line">        <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> tom = run.containsBean(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;容器中Tom组件：&quot;</span>+tom);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> user01 = run.containsBean(<span class="string">&quot;user01&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;容器中user01组件：&quot;</span>+user01);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> tom22 = run.containsBean(<span class="string">&quot;tom22&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;容器中tom22组件：&quot;</span>+tom22);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="5、原生配置文件引入-ImportResource"><a href="#5、原生配置文件引入-ImportResource" class="headerlink" title="5、原生配置文件引入  @ImportResource"></a>5、原生配置文件引入  @ImportResource</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=<span class="string">&quot;haha&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.atguigu.boot.bean.User&quot;</span>&gt;</span><br><span class="line">        &lt;property name=&quot;name&quot; value=&quot;zhangsan&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;age&quot; value=&quot;18&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=<span class="string">&quot;hehe&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.atguigu.boot.bean.Pet&quot;</span>&gt;</span><br><span class="line">        &lt;property name=&quot;name&quot; value=&quot;tomcat&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ImportResource(&quot;classpath:beans.xml&quot;)</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1、返回我们IOC容器</span></span><br><span class="line">    ConfigurableApplicationContext run = SpringApplication.run(MainApplication.class, args);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、查看容器里面的组件</span></span><br><span class="line">    String[] names = run.getBeanDefinitionNames();</span><br><span class="line">    <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">      System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">boolean</span> haha = run.containsBean(<span class="string">&quot;haha&quot;</span>);</span><br><span class="line">  <span class="keyword">boolean</span> hehe = run.containsBean(<span class="string">&quot;hehe&quot;</span>);</span><br><span class="line">  System.out.println(<span class="string">&quot;haha：&quot;</span>+haha);<span class="comment">//true</span></span><br><span class="line">  System.out.println(<span class="string">&quot;hehe：&quot;</span>+hehe);<span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line">        </span><br></pre></td></tr></table></figure>
<h3 id="6、配置绑定"><a href="#6、配置绑定" class="headerlink" title="6、配置绑定"></a>6、配置绑定</h3><h4 id="1、-Component-ConfigurationProperties"><a href="#1、-Component-ConfigurationProperties" class="headerlink" title="1、@Component + @ConfigurationProperties"></a>1、@Component + @ConfigurationProperties</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 只有在容器中的组件，才会拥有SpringBoot提供的强大功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span><span class="comment">//绑定yml配置文件 prefix为在yml文件中的前缀名</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBrand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBrand</span><span class="params">(String brand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.brand = brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(Integer price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Car&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;brand=&#x27;&quot;</span> + brand + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, price=&quot;</span> + price +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2、-EnableConfigurationProperties-ConfigurationProperties"><a href="#2、-EnableConfigurationProperties-ConfigurationProperties" class="headerlink" title="2、@EnableConfigurationProperties + @ConfigurationProperties"></a>2、@EnableConfigurationProperties + @ConfigurationProperties</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@EnableConfigurationProperties(Car.class)</span><br><span class="line">&#x2F;&#x2F;1、开启Car配置绑定功能</span><br><span class="line">&#x2F;&#x2F;2、把这个Car这个组件自动注册到容器中</span><br><span class="line">public class MyConfig &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="7、使用外部properties文件-PropertySource-value"><a href="#7、使用外部properties文件-PropertySource-value" class="headerlink" title="7、使用外部properties文件@PropertySource+@value"></a>7、使用外部properties文件@PropertySource+@value</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:db.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driverClassName&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driverClassName;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.initialSize&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> initialSize;</span><br><span class="line">	</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DruidDataSource ds = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        ds.setDriverClassName(driverClassName);</span><br><span class="line">        ds.setUrl(url);</span><br><span class="line">        ds.setUsername(username);</span><br><span class="line">        ds.setPassword(password);</span><br><span class="line">        ds.setInitialSize(initialSize);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="各种插件"><a href="#各种插件" class="headerlink" title="各种插件"></a>各种插件</h2><h4 id="Lombok插件"><a href="#Lombok插件" class="headerlink" title="Lombok插件"></a>Lombok插件</h4><p>简化javaBean的编写</p>
<ol>
<li><p>依赖:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span> <span class="comment">//空参构造</span></span><br><span class="line"><span class="comment">//@AllArgsConstructor 全参构造</span></span><br><span class="line"><span class="meta">@Slf4j</span> <span class="comment">//日志</span></span><br><span class="line"><span class="meta">@Data</span> <span class="comment">//设置get/set</span></span><br><span class="line"><span class="meta">@ToString</span> <span class="comment">//重写toString</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span> <span class="comment">//重写equals和hashCode</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Pet pet;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name,Integer age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        log.info(<span class="string">&quot;构造函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="dev-tool"><a href="#dev-tool" class="headerlink" title="dev-tool"></a>dev-tool</h4></li>
</ol>
<p>对项目进行热部署</p>
<ol>
<li><p>依赖:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>使用</p>
<p>导入依赖后，每次修改后使用Ctrl+F重新build项目</p>
</li>
</ol>
<h4 id="配置提示插件"><a href="#配置提示插件" class="headerlink" title="配置提示插件"></a>配置提示插件</h4><p>将自定义的类的属性在配置文件中进行提示</p>
<ol>
<li><p>依赖:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>使用</p>
<p>属性绑定后，在配置文件中就会有提示</p>
</li>
</ol>
<h2 id="配置文件YAML"><a href="#配置文件YAML" class="headerlink" title="配置文件YAML"></a>配置文件YAML</h2><ul>
<li><p>key: value kv之间有空格</p>
</li>
<li><p>大小写敏感</p>
</li>
<li><p>使用缩进表示层级关系</p>
</li>
<li><p>缩进不允许使用tab，只允许空格</p>
</li>
<li><p>缩进的空格数不重要，只要相同层级的元素左对齐即可</p>
</li>
<li><p>‘#’表示注释</p>
</li>
<li><p>字符串无需加引号，如果要加，’’与””表示字符串内容 会被 转义/不转义</p>
</li>
<li><p>字面量：单个的、不可再分的值。date、boolean、string、number、null</p>
<ul>
<li>k：v</li>
</ul>
</li>
<li><p>对象：键值对的集合。map、hash、set、object </p>
<ul>
<li>行内写法：  k: {k1:v1,k2:v2,k3:v3}</li>
<li>k: <pre><code>k1: v1
k2: v2
k3: v3
</code></pre>
</li>
</ul>
</li>
<li><p>数组：一组按次序排列的值。array、list、queue</p>
<ul>
<li>行内写法：  k: [v1,v2,v3]</li>
<li>k:<ul>
<li>v1</li>
<li>v2</li>
<li>v3</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>多配置文件：</p>
<ul>
<li>我们在配置文件编写的时候，文件名可以是 application-{profile}.properties/yml用来指定多个环境版本如：<ul>
<li>application-test.properties 代表测试环境配置</li>
<li>application-dev.properties 代表开发环境配置</li>
</ul>
</li>
<li>并在默认<code>application.properties</code>主配置文件中配置：<code>spring.profiles.active=dev</code></li>
</ul>
</blockquote>
<h2 id="Web开发"><a href="#Web开发" class="headerlink" title="Web开发"></a>Web开发</h2><h4 id="1、静态资源目录"><a href="#1、静态资源目录" class="headerlink" title="1、静态资源目录"></a>1、静态资源目录</h4><p>只要静态资源放在类路径下： called /static (or /public or /resources or /META-INF/resources</p>
<ul>
<li><p>访问 ： 当前项目根路径/ + 静态资源名 </p>
</li>
<li><p>原理：请求进来，先去找Controller看能不能处理。不能处理的所有请求又都交给静态资源处理器。静态资源也找不到则响应404页面</p>
</li>
<li><p>改变默认的静态资源路径</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/res/**</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">static-locations:</span> [<span class="string">classpath:/haha/</span>]</span><br></pre></td></tr></table></figure>
<h4 id="2、欢迎页以及错误页面"><a href="#2、欢迎页以及错误页面" class="headerlink" title="2、欢迎页以及错误页面"></a>2、欢迎页以及错误页面</h4></li>
<li><p>静态资源路径下  index.html<br>○ 可以配置静态资源路径<br>○ 但是不可以配置静态资源的访问前缀。否则导致 index.html不能被默认访问</p>
</li>
<li><p>错误页面：静态资源路径下创建/error文件夹下4xx.html，5xx.html，springboot会被自动解析(需要有模板引擎thymeleaf等)</p>
</li>
</ul>
<h4 id="3、自定义Favicon"><a href="#3、自定义Favicon" class="headerlink" title="3、自定义Favicon"></a>3、自定义Favicon</h4><p>favicon.ico 放在静态资源目录下即可，会自动展示</p>
<h4 id="4、使用Restful风格请求"><a href="#4、使用Restful风格请求" class="headerlink" title="4、使用Restful风格请求"></a>4、使用Restful风格请求</h4><ul>
<li><p>配置请求方式过滤器：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">hiddenmethod:</span></span><br><span class="line">      <span class="attr">filter:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span>   <span class="comment">#开启页面表单的Rest功能</span></span><br></pre></td></tr></table></figure></li>
<li><p>注意表单要添加**_method=GET/PUT/POST..**的隐藏input</p>
</li>
<li><p>配置请求映射：<code>@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.GET)</code></p>
</li>
</ul>
<h4 id="5、相关注解"><a href="#5、相关注解" class="headerlink" title="5、相关注解"></a>5、相关注解</h4><ol>
<li>@PathVariable：获取路径参数<code>/car/&#123;id&#125;</code></li>
<li>@RequestHeader：获取请求头</li>
<li>@RequestParam：获取请求参数</li>
<li>@MatrixVariable：获取矩阵变量如<code>/car/sell;low=34;brand=byd</code>(但需要在webMvcConfigurer进行配置开启)</li>
<li>@CookieValue：获取cookie</li>
<li>@RequestBody：获取请求体的内容</li>
<li>@ResponseBody：可以配合json的三方依赖如：fastJson等来实现直接将响应对象转换为json传给前端</li>
<li>……同SpringMVC</li>
</ol>
<h4 id="6、注入web原生组件（Servlet、Filter、Listener）"><a href="#6、注入web原生组件（Servlet、Filter、Listener）" class="headerlink" title="6、注入web原生组件（Servlet、Filter、Listener）"></a>6、注入web原生组件（Servlet、Filter、Listener）</h4><ul>
<li><p>Servlet</p>
<p>创建servlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 处理get请求</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;Hello MyServlet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注册servlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">myServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServletRegistrationBean register = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> MyServlet(), <span class="string">&quot;/myServlet&quot;</span>);</span><br><span class="line">        <span class="comment">// 可以在这里设置相关配置</span></span><br><span class="line">        register.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> register;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Filter</p>
<p>创建Filter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyFilter process...&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注册Filter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">myFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FilterRegistrationBean register = <span class="keyword">new</span> FilterRegistrationBean(<span class="keyword">new</span> MyFilter());</span><br><span class="line">        register.setUrlPatterns(Arrays.asList(<span class="string">&quot;/myServlet&quot;</span>,<span class="string">&quot;/&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> register;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Listener</p>
<p>创建Listener</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyListener.contextInitialized -- web应用启动&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyListener.contextDestroyed -- web应用关闭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注册Listener</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean <span class="title">myServletContextListener</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServletListenerRegistrationBean(<span class="keyword">new</span> MyServletContextListener());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2></li>
</ul>
<ol>
<li><p>创建拦截器（实现<strong>HandlerInterceptor 接口</strong>）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 目标方法执行之前</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        String requestURI = request.getRequestURI();</span><br><span class="line">        log.info(<span class="string">&quot;preHandle拦截的请求路径是&#123;&#125;&quot;</span>,requestURI);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//登录检查逻辑</span></span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        Object loginUser = session.getAttribute(<span class="string">&quot;loginUser&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(loginUser != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//放行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拦截住。未登录。跳转到登录页</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;请先登录&quot;</span>);</span><br><span class="line">		<span class="comment">//re.sendRedirect(&quot;/&quot;);重定向</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/&quot;</span>).forward(request,response);<span class="comment">//请求转发</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 目标方法执行完成以后</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modelAndView</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;postHandle执行&#123;&#125;&quot;</span>,modelAndView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页面渲染以后</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;afterCompletion执行异常&#123;&#125;&quot;</span>,ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在web配置类中添加拦截器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、编写一个拦截器实现HandlerInterceptor接口</span></span><br><span class="line"><span class="comment"> * 2、拦截器注册到容器中（实现WebMvcConfigurer的addInterceptors）</span></span><br><span class="line"><span class="comment"> * 3、指定拦截规则【如果是拦截所有，静态资源也会被拦截】</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminWebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> LoginInterceptor())            									.addPathPatterns(<span class="string">&quot;/**&quot;</span>)   <span class="comment">//所有请求都被拦截包括静态资源      </span></span><br><span class="line">            .excludePathPatterns(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/login&quot;</span>,<span class="string">&quot;/css/**&quot;</span>,<span class="string">&quot;/fonts/**&quot;</span>,<span class="string">&quot;/images/**&quot;</span>,<span class="string">&quot;/js/**&quot;</span>); <span class="comment">//放行的请求</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2></li>
</ol>
<p>Spring Boot 2.2.0 版本开始引入 JUnit 5 作为单元测试默认库</p>
<p>如果要继续使用JUnit 4需要导入vintage的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hamcrest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hamcrest-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p> SpringBoot中JUnit 5的使用：</p>
<ul>
<li><p>依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>创建测试类：</p>
<p>现在的Junit类具有Spring的功能，@Autowired、比如 @Transactional 标注测试方法，测试完成后自动回滚</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Junit5的常用注解：</p>
<ul>
<li><code>@Test</code> :表示方法是测试方法。但是与JUnit4的@Test不同，他的职责非常单一不能声明任何属性，拓展的测试将会由Jupiter提供额外测试</li>
<li><code>@ParameterizedTest </code>:表示方法是参数化测试，下方会有详细介绍</li>
<li><code>@RepeatedTest</code> :表示方法可重复执行，下方会有详细介绍</li>
<li><code>@DisplayName</code> :为测试类或者测试方法设置展示名称</li>
<li><code>@BeforeEach </code>:表示在每个单元测试之前执行</li>
<li><code>@AfterEach</code> :表示在每个单元测试之后执行</li>
<li><code>@BeforeAll</code> :表示在所有单元测试之前执行</li>
<li><code>@AfterAll</code> :表示在所有单元测试之后执行</li>
<li><code>@Tag</code> :表示单元测试类别，类似于JUnit4中的@Categories</li>
<li><code>@Disabled </code>:表示测试类或测试方法不执行，类似于JUnit4中的@Ignore</li>
<li><code>@Timeout </code>:表示测试方法运行如果超过了指定时间将会返回错误</li>
<li><code>@ExtendWith</code> :为测试类或测试方法提供扩展类引用</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Spring框架</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot参数校验</title>
    <url>/2022/09/19/SpringBoot%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/</url>
    <content><![CDATA[<h1 id="参数校验"><a href="#参数校验" class="headerlink" title="参数校验"></a>参数校验</h1><p>在日常开发中，经常需要对前端传过来的数据进行，非空等有效校验。但是如果使用<code>if (username == null)</code>的方式进行手动判断，会十分麻烦并且每次都需要校验；</p>
<p>于是Validator框架应运而生，提供了很多方便的校验注解（非空、邮箱是否有效、长度限制等）</p>
<h2 id="详细使用"><a href="#详细使用" class="headerlink" title="详细使用"></a>详细使用</h2><p>一般SpringBoot的项目会使用<strong>Spring Validation</strong>，它是对Hibernate Validation的二次封装。在SpringMVC模块中添加了自动校验。并将校验信息封装到特定的类中。</p>
<h3 id="提供的校验注解："><a href="#提供的校验注解：" class="headerlink" title="提供的校验注解："></a>提供的校验注解：</h3><ul>
<li><code>@Null</code> 被注释的元素必须为null</li>
<li><code>@NotNull </code>被注释的元素必须不为null</li>
<li><code>@AssertTrue</code> 被注释的元素必须为true</li>
<li><code>@AssertFalse </code>被注释的元素必须为false</li>
<li><code>@Min(value) </code>被注释的元素必须是一个数字，其值必须大于等于指定的最小值</li>
<li><code>@Max(value) </code>被注释的元素必须是一个数字，其值必须小于等于指定的最大值</li>
<li><code>@DecimalMin(value)</code> 被注释的元素必须是一个数字，其值必须大于等于指定的最小值</li>
<li><code>@DecimalMax(value) </code>被注释的元素必须是一个数字，其值必须小于等于指定的最大值</li>
<li><code>@Size(max, min) </code>被注释的元素的大小必须在指定的范围内</li>
<li><code>@Digits (integer, fraction)</code> 被注释的元素必须是一个数字，其值必须在可接受的范围内</li>
<li><code>@Past </code>被注释的元素必须是一个过去的日期</li>
<li><code>@Future </code>被注释的元素必须是一个将来的日期</li>
<li><code>@Pattern(value) </code>被注释的元素必须符合指定的正则表达式</li>
<li><code>@NotBlank(message =)</code> 验证字符串非 null，且长度必须大于 0</li>
<li><code>@Email</code> 被注释的元素必须是电子邮箱地址</li>
<li><code>@Length(min=,max=)</code> 被注释的字符串的大小必须在指定的范围内</li>
<li><code>@NotEmpty</code> 被注释的字符串的必须非空</li>
<li><code>@Range(min=,max=,message=)</code> 被注释的元素必须在合适的范围内</li>
</ul>
<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><h4 id="首先导入依赖"><a href="#首先导入依赖" class="headerlink" title="首先导入依赖"></a>首先导入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SpringBoot有专门的启动器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="给需要校验的实体类添加校验注解"><a href="#给需要校验的实体类添加校验注解" class="headerlink" title="给需要校验的实体类添加校验注解"></a>给需要校验的实体类添加校验注解</h4><p>TestDemo：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Email;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotBlank;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Size;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotNull(message = &quot;id必须非空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;用户名不能为空,并且长度必须大于0&quot;)</span></span><br><span class="line">    <span class="meta">@Size(min = 6, max = 11, message = &quot;用户名长度必须是6-11个字符&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;用户密码不能为空,并且长度必须大于0&quot;)</span></span><br><span class="line">    <span class="meta">@Size(min = 6, max = 16, message = &quot;密码长度必须是6-16个字符&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Email(message = &quot;邮箱格式错误&quot;)</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;邮箱不能为空,并且长度必须大于0&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 嵌套校验需要加<span class="doctag">@Valid</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Valid</span></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> Test02 test02;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Test02：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;id必须非空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="测试校验"><a href="#测试校验" class="headerlink" title="测试校验"></a>测试校验</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注意需要给要校验的对象添加@Validated或者@valid</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/insert&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">insertTestUser</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> TestDemo testUser, BindingResult bindingResult)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 如果有参数校验失败，会将错误信息封装成对象组装在BindingResult里</span></span><br><span class="line">    <span class="keyword">for</span> (ObjectError error : bindingResult.getAllErrors()) &#123;</span><br><span class="line">        <span class="keyword">return</span> error.getDefaultMessage();</span><br><span class="line">    &#125;</span><br><span class="line">    log.info(<span class="string">&quot;用户名&#123;&#125;的邮箱为&#123;&#125;&quot;</span>, testUser.getUsername(),testUser.getEmail());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>@Valid注解与@Validated注解功能差不多</p>
<p>不同点在于：</p>
<ul>
<li>@Valid属于javax包下，而@Validated属于Spring下</li>
<li>@Valid支持嵌套校验、而@Validated不支持</li>
<li>@Validated支持分组，而@Valid不支持</li>
</ul>
</blockquote>
<h3 id="自定义校验注解"><a href="#自定义校验注解" class="headerlink" title="自定义校验注解"></a>自定义校验注解</h3><h4 id="定义自定义注解"><a href="#定义自定义注解" class="headerlink" title="定义自定义注解"></a>定义自定义注解</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.TYPE_USE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Constraint(</span></span><br><span class="line"><span class="meta">    validatedBy = PhoneValidator.class</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Phone &#123;</span><br><span class="line">    <span class="function">String <span class="title">message</span><span class="params">()</span> <span class="keyword">default</span> &quot;手机格式不正确!&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;? extends Payload&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="定义该注解的校验器"><a href="#定义该注解的校验器" class="headerlink" title="定义该注解的校验器"></a>定义该注解的校验器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.validation.ConstraintValidator;</span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintValidatorContext;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneValidator</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">Phone</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String phoneNum, ConstraintValidatorContext constraintValidatorContext)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1: 如果用户没输入直接返回不校验，因为空的判断交给@NotNull去做就行了</span></span><br><span class="line">        <span class="keyword">if</span> (phoneNum == <span class="keyword">null</span> &amp;&amp; phoneNum.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Pattern p = Pattern.compile(<span class="string">&quot;^(13[0-9]|14[5|7|9]|15[0|1|2|3|5|6|7|8|9]|17[0|1|6|7|8]|18[0-9])\\d&#123;8&#125;$&quot;</span>);</span><br><span class="line">        <span class="comment">// 2：如果校验通过就返回true,否则返回false;</span></span><br><span class="line">        Matcher matcher = p.matcher(phoneNum);</span><br><span class="line">        <span class="keyword">return</span> matcher.matches();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="分组校验"><a href="#分组校验" class="headerlink" title="分组校验"></a>分组校验</h3><p>比如当更新时需要带用户id，但当插入时不需要，这个时候就需要分组校验来处理</p>
<h4 id="定义分组"><a href="#定义分组" class="headerlink" title="定义分组"></a>定义分组</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.validation.groups.Default;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Update</span> <span class="keyword">extends</span> <span class="title">Default</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="指定分组"><a href="#指定分组" class="headerlink" title="指定分组"></a>指定分组</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 只有当为Update分组时才会进行校验</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@NotNull(message = &quot;id必须非空&quot;,groups =&#123;Update.class&#125;)</span></span><br><span class="line"><span class="keyword">private</span> Long id;</span><br></pre></td></tr></table></figure>
<h4 id="测试使用"><a href="#测试使用" class="headerlink" title="测试使用"></a>测试使用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/insert&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">insertTestUser</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated(value = Update.class)</span> TestDemo testUser, BindingResult bindingResult)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 如果有参数校验失败，会将错误信息封装成对象组装在BindingResult里</span></span><br><span class="line">    <span class="keyword">for</span> (ObjectError error : bindingResult.getAllErrors()) &#123;</span><br><span class="line">        <span class="keyword">return</span> error.getDefaultMessage();</span><br><span class="line">    &#125;</span><br><span class="line">    log.info(<span class="string">&quot;用户名&#123;&#125;的邮箱为&#123;&#125;&quot;</span>, testUser.getUsername(),testUser.getEmail());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Tip：当不使用BindingResult时，校验失败会引发MethodArgumentNotValidException异常，这样就正好可以使用<a href="">SpringBoot全局异常处理</a></p>
</blockquote>
<h3 id="快速失败（failFast）"><a href="#快速失败（failFast）" class="headerlink" title="快速失败（failFast）"></a>快速失败（failFast）</h3><p>SpringValidation框架默认是关闭快速失败的，也就是说当一个参数校验不通过的时候它不会直接停止，而是会继续校验剩余的参数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidatorConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Validator <span class="title">validator</span><span class="params">(AutowireCapableBeanFactory springFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (ValidatorFactory factory = Validation.byProvider(HibernateValidator.class)</span><br><span class="line">                .configure()</span><br><span class="line">                <span class="comment">// 快速失败</span></span><br><span class="line">                .failFast(<span class="keyword">true</span>)</span><br><span class="line">                <span class="comment">// 解决 SpringBoot 依赖注入问题</span></span><br><span class="line">                .constraintValidatorFactory(<span class="keyword">new</span> SpringConstraintValidatorFactory(springFactory))</span><br><span class="line">                .buildValidatorFactory()) &#123;</span><br><span class="line">            <span class="keyword">return</span> factory.getValidator();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/340620501">【项目实践】SpringBoot三招组合拳，手把手教你打出优雅的后端接口</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring框架</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot的异常处理</title>
    <url>/2022/09/20/SpringBoot%E7%9A%84%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="SpringBoot的异常处理"><a href="#SpringBoot的异常处理" class="headerlink" title="SpringBoot的异常处理"></a>SpringBoot的异常处理</h1><h2 id="全局异常处理"><a href="#全局异常处理" class="headerlink" title="全局异常处理"></a>全局异常处理</h2><p>对整个项目的异常进行自动拦截处理，方便以后抛出自定义异常</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">    <span class="meta">@ExceptionHandler(MethodArgumentNotValidException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">MethodArgumentNotValidExceptionHandler</span><span class="params">(MethodArgumentNotValidException e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 从异常对象中拿到ObjectError对象</span></span><br><span class="line">        ObjectError objectError = e.getBindingResult().getAllErrors().get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 然后提取错误提示信息进行返回</span></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.failed(objectError.getDefaultMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">exceptionHandler</span><span class="params">(Exception e)</span></span>&#123;</span><br><span class="line">        <span class="comment">//打印异常信息</span></span><br><span class="line">        log.error(<span class="string">&quot;出现了异常！ &#123;&#125;&quot;</span>,e);</span><br><span class="line">        <span class="comment">//从异常对象中获取提示信息封装返回</span></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.failed(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><p>@RestControllerAdvice表示该类为异常处理类，rest是对ControllerAdvice的增强同RestController</p>
</li>
<li><p>@ExceptionHandler指定你需要处理的异常类</p>
</li>
</ul>
</blockquote>
<h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><p>方便携带更多的错误信息如状态码等..</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span> <span class="comment">//只要getter方法，无需setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">APIException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">APIException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(XXX, <span class="string">&quot;接口错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">APIException</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(XXX, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">APIException</span><span class="params">(<span class="keyword">int</span> code, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(msg);</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>交给全局异常处理解决：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(APIException.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">APIExceptionHandler</span><span class="params">(APIException e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//打印异常信息</span></span><br><span class="line">    log.error(<span class="string">&quot;出现了异常！ &#123;&#125;&quot;</span>,e);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.failed(e.getMsg());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>ResponseEntity为<a href="">统一的响应实体</a>方便与前端联调</p>
</blockquote>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><p><a href="https://longda.wang/post/a9ecfbba.html">Spring Boot 统一异常处理</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/340620501">【项目实践】SpringBoot三招组合拳，手把手教你打出优雅的后端接口</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Spring框架</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot日志</title>
    <url>/2022/11/08/SpringBoot%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<h1 id="SpringBoot日志"><a href="#SpringBoot日志" class="headerlink" title="SpringBoot日志"></a>SpringBoot日志</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul>
<li>日志文件：日志文件是用于记录系统操作事件的文件集合，可分为调试日志和系统日志。具有处理历史数据、诊断问题的追踪以及理解系统的活动等重要作用。<ul>
<li>调试日志文件：软件开发中，我们经常需要去调试程序，做一些信息，状态的输出便于我们查询程序的运行状况，调试日志就可以帮我们记录下来方便查看</li>
<li>系统日志：系统日志是记录系统中硬件、软件和系统问题的信息，同时还可以监视系统中发生的事件。用户可以通过它来检查错误发生的原因，或者寻找受到攻击时攻击者留下的痕迹。系统日志包括系统日志、应用程序日志和安全日志。</li>
</ul>
</li>
</ul>
<h2 id="日志框架介绍"><a href="#日志框架介绍" class="headerlink" title="日志框架介绍"></a>日志框架介绍</h2><h3 id="日志门面："><a href="#日志门面：" class="headerlink" title="日志门面："></a>日志门面：</h3><ul>
<li>JCL</li>
<li>SLF4j</li>
</ul>
<h3 id="日志实现："><a href="#日志实现：" class="headerlink" title="日志实现："></a>日志实现：</h3><ul>
<li>JUL</li>
<li>Logback</li>
<li>Log4j</li>
<li>Log4j2</li>
</ul>
<blockquote>
<p>日志门面就是在日志框架和应用程序之间架设一个沟通的桥梁(如JDBC),主要是为了给Java日志访问提供一套标准、规范的API框架。但是日志的配置文件还是写日志实现自身的配置文件</p>
</blockquote>
<p>常用选择（SpringBoot底层也是这样的搭配）：SLF4j（门面）+ Logback（实现）</p>
<h3 id="SLF4j使用"><a href="#SLF4j使用" class="headerlink" title="SLF4j使用"></a>SLF4j使用</h3><h4 id="最基本的使用"><a href="#最基本的使用" class="headerlink" title="最基本的使用"></a>最基本的使用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">logTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//级别由低到高</span></span><br><span class="line">        <span class="comment">//可以调整输出的日志级别，这样就只会打印等于或大于该级别的日志</span></span><br><span class="line">        log.trace(<span class="string">&quot;trace级别&quot;</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;debug级别&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;info级别&quot;</span>);</span><br><span class="line">        log.warn(<span class="string">&quot;warning级别&quot;</span>);</span><br><span class="line">        log.error(<span class="string">&quot;error级别&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://blogpic-1305209282.cos.ap-chengdu.myqcloud.com/img/image-20220725102611083.png" alt="image-20220725102611083"></p>
<blockquote>
<p>SpringBoot默认是INFO级别</p>
</blockquote>
<h4 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h4><ul>
<li>修改级别：<code>logging.level.包名=级别</code></li>
<li>输出日志文件：可以配置<code>logging.file=文件名/路径</code>或者<code>logging.path=目录</code></li>
<li>修改输出日志的格式：<code>logging.pattern.console/file=格式</code></li>
<li>如果需要指定完整的配置，可以将logback的配置文件(logback.xml/logback-spring.xml)放在类路径下</li>
</ul>
<h4 id="通过AOP来打日志"><a href="#通过AOP来打日志" class="headerlink" title="通过AOP来打日志"></a>通过AOP来打日志</h4><p>如果一个一个接口的自己手动打日志相当麻烦，完全就可以通过<strong>注解+AOP</strong>的方式来打日志，这样也比较灵活方便，只需要给想打日志的方法上加上注解，aop会自动对方法进行代理增强，切入日志进来</p>
<h5 id="自定义的日志注解"><a href="#自定义的日志注解" class="headerlink" title="自定义的日志注解"></a>自定义的日志注解</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 日志标志注解(加了该注解会使用aop打印日志)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wht</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SystemLog &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *业务的简单描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">businessName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="配置切面类"><a href="#配置切面类" class="headerlink" title="配置切面类"></a>配置切面类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.wht.annotation.SystemLog)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pt</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">printLog</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object res;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            handleBefore(joinPoint);</span><br><span class="line">            res = joinPoint.proceed();</span><br><span class="line">            handleAfter(res);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;=======END=======&quot;</span>+System.lineSeparator());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方法执行后的日志</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleAfter</span><span class="params">(Object res)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;Response       :&#123;&#125;&quot;</span>,JSON.toJSONString(res));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//执行前的日志</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleBefore</span><span class="params">(ProceedingJoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        ServletRequestAttributes requestAttributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        HttpServletRequest request = requestAttributes.getRequest();</span><br><span class="line"></span><br><span class="line">        SystemLog systemLog = getSystemLog(joinPoint);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;=======Start=======&quot;</span>);</span><br><span class="line">        <span class="comment">// 打印请求 URL</span></span><br><span class="line">        log.info(<span class="string">&quot;URL            : &#123;&#125;&quot;</span>,request.getRequestURI());</span><br><span class="line">        <span class="comment">// 打印描述信息</span></span><br><span class="line">        log.info(<span class="string">&quot;BusinessName   : &#123;&#125;&quot;</span>,systemLog.businessName());</span><br><span class="line">        <span class="comment">// 打印 Http method</span></span><br><span class="line">        log.info(<span class="string">&quot;HTTP Method    : &#123;&#125;&quot;</span>,request.getMethod() );</span><br><span class="line">        <span class="comment">// 打印调用 controller 的全路径以及执行方法</span></span><br><span class="line">        log.info(<span class="string">&quot;Class Method   : &#123;&#125;.&#123;&#125;&quot;</span>, joinPoint.getSignature().getDeclaringTypeName(),((MethodSignature) joinPoint.getSignature()).getName());</span><br><span class="line">        <span class="comment">// 打印请求的 IP</span></span><br><span class="line">        log.info(<span class="string">&quot;IP             : &#123;&#125;&quot;</span>,request.getRemoteHost());</span><br><span class="line">        <span class="comment">// 打印请求入参</span></span><br><span class="line">        log.info(<span class="string">&quot;Request Args   : &#123;&#125;&quot;</span>, JSON.toJSONString(joinPoint.getArgs()));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> SystemLog <span class="title">getSystemLog</span><span class="params">(ProceedingJoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();</span><br><span class="line">        SystemLog systemLog = methodSignature.getMethod().getAnnotation(SystemLog.class);</span><br><span class="line">        <span class="keyword">return</span> systemLog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意需要导入AOP依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- AOP的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>测试：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SystemLog(businessName = &quot;测试校验&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/insert&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">insertTestUser</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> TestDemo testUser)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://blogpic-1305209282.cos.ap-chengdu.myqcloud.com/img/image-20220726095213742.png" alt="image-20220726095213742"></p>
]]></content>
      <categories>
        <category>Spring框架</category>
        <category>日志</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot统一响应处理</title>
    <url>/2022/09/21/SpringBoot%E7%BB%9F%E4%B8%80%E5%93%8D%E5%BA%94%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="SpringBoot统一响应处理"><a href="#SpringBoot统一响应处理" class="headerlink" title="SpringBoot统一响应处理"></a>SpringBoot统一响应处理</h1><p>目前很多项目都是前后端分离，在这样的大趋势下，后端向前端的响应结果规范格外地重要。</p>
<h2 id="自定义响应结果"><a href="#自定义响应结果" class="headerlink" title="自定义响应结果"></a>自定义响应结果</h2><h3 id="响应实体"><a href="#响应实体" class="headerlink" title="响应实体"></a>响应实体</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseEntityDemo</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求处理成功且不需要返回数据时使用的工具方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;Type&gt; <span class="function">ResponseEntityDemo&lt;Type&gt; <span class="title">successWithoutData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntityDemo&lt;Type&gt;(ResultCode.SUCCESS, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求处理成功且需要返回数据时使用的工具方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 要返回的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;Type&gt; <span class="function">ResponseEntityDemo&lt;Type&gt; <span class="title">successWithData</span><span class="params">(Type data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntityDemo&lt;Type&gt;(ResultCode.SUCCESS, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求处理失败后使用的工具方法（需要传错误信息）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 失败的错误消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;Type&gt; <span class="function">ResponseEntityDemo&lt;Type&gt; <span class="title">failed</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntityDemo&lt;Type&gt;(ResultCode.FAILED.getCode(), message, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 请求处理失败后使用的工具方法（需要传状态码以及错误信息）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resultCode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;Type&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;Type&gt; <span class="function">ResponseEntityDemo&lt;Type&gt; <span class="title">failed</span><span class="params">(ResultCode resultCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntityDemo&lt;Type&gt;(resultCode, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 请求处理失败后使用的工具方法（使用默认错误信息）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;Type&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;Type&gt; <span class="function">ResponseEntityDemo&lt;Type&gt; <span class="title">failed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntityDemo&lt;Type&gt;(ResultCode.FAILED, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ResponseEntityDemo</span><span class="params">(ResultCode resultCode, T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = resultCode.getCode();</span><br><span class="line">        <span class="keyword">this</span>.message = resultCode.getMsg();</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">ResultCode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    SUCCESS(<span class="number">200</span>, <span class="string">&quot;操作成功&quot;</span>),</span><br><span class="line"></span><br><span class="line">    FAILED(<span class="number">1001</span>, <span class="string">&quot;响应失败&quot;</span>),</span><br><span class="line"></span><br><span class="line">    VALIDATE_FAILED(<span class="number">1002</span>, <span class="string">&quot;参数校验失败&quot;</span>),</span><br><span class="line"></span><br><span class="line">    ERROR(<span class="number">5000</span>, <span class="string">&quot;未知错误&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code; <span class="comment">//状态码</span></span><br><span class="line">    <span class="keyword">private</span> String msg; <span class="comment">//响应信息</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="响应数据的统一处理"><a href="#响应数据的统一处理" class="headerlink" title="响应数据的统一处理"></a>响应数据的统一处理</h2><p>先创建一个类加上注解使其成为全局处理类并使用同异常处理的全局处理所使用的@RestControllerAdvice注解。然后继承<code>ResponseBodyAdvice</code>接口重写其中的方法，即可对我们的<code>controller</code>进行增强操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice(basePackages = &#123;&quot;com.wht.houtaidemo.controller&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseControllerAdvice</span> <span class="keyword">implements</span> <span class="title">ResponseBodyAdvice</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(MethodParameter returnType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; aClass)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果接口返回的类型本身就已经包装好了直接返回就行，返回false不用执行beforeBodyWrite进行后续处理</span></span><br><span class="line">        <span class="keyword">return</span> !returnType.getParameterType().equals(ResponseEntityDemo.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">beforeBodyWrite</span><span class="params">(Object result, MethodParameter methodParameter, MediaType mediaType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; aClass, ServerHttpRequest serverHttpRequest, ServerHttpResponse serverHttpResponse)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//对数据进行包装</span></span><br><span class="line">        <span class="keyword">return</span> ResponseEntityDemo.successWithData(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Tip：ResponseBodyAdvice中<code>supports</code>方法要返回为<code>true</code>才会执行<code>beforeBodyWrite</code>方法</p>
<p>上述写法会有一个小问题：</p>
<ul>
<li><p>如果返回类型为String的话会报类型转换异常，所以需要进行特判</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://blogpic-1305209282.cos.ap-chengdu.myqcloud.com/img/image-20220723112607503.png" alt="image-20220723112607503"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// String类型不能直接包装,会被其他转换器识别，所以要进行些特别的处理</span></span><br><span class="line"><span class="keyword">if</span> (returnType.getGenericParameterType().equals(String.class)) &#123;</span><br><span class="line">    ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 将数据包装在ResponseEntity里后，再转换为json字符串响应给前端</span></span><br><span class="line">        <span class="keyword">return</span> objectMapper.writeValueAsString(ResponseEntityDemo.successWithData(result));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">        <span class="comment">//返回自定义异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> APIException(<span class="string">&quot;返回String类型错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h4 id="完整版本"><a href="#完整版本" class="headerlink" title="完整版本"></a>完整版本</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice(basePackages = &#123;&quot;com.wht.houtaidemo.controller&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseControllerAdvice</span> <span class="keyword">implements</span> <span class="title">ResponseBodyAdvice</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(MethodParameter returnType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; aClass)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果接口返回的类型本身就已经包装好了直接返回就行，返回false不用执行beforeBodyWrite进行后续处理</span></span><br><span class="line">        <span class="keyword">return</span> !(returnType.getParameterType().equals(ResponseEntityDemo.class)||returnType.getParameterType().equals(ResponseEntity.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">beforeBodyWrite</span><span class="params">(Object result, MethodParameter returnType, MediaType mediaType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; aClass, ServerHttpRequest serverHttpRequest, ServerHttpResponse serverHttpResponse)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//结果为空也返回错误</span></span><br><span class="line">        <span class="keyword">if</span>(result == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntityDemo.failed();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// String类型不能直接包装，所以要进行些特别的处理</span></span><br><span class="line">        <span class="keyword">if</span> (returnType.getGenericParameterType().equals(String.class)) &#123;</span><br><span class="line">            ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 将数据包装在ResponseEntity里后，再转换为json字符串响应给前端</span></span><br><span class="line">                <span class="keyword">return</span> objectMapper.writeValueAsString(ResponseEntityDemo.successWithData(result));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">                <span class="comment">//返回自定义异常</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> APIException(<span class="string">&quot;返回String类型错误&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果返回false返回错误</span></span><br><span class="line">        <span class="keyword">if</span>(returnType.getGenericParameterType().equals(Boolean.class) &amp;&amp; (Boolean)result == <span class="keyword">false</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntityDemo.failed();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对数据进行包装</span></span><br><span class="line">        <span class="keyword">return</span> ResponseEntityDemo.successWithData(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>直接返回数据不进行响应包装</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/getDemo&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TestDemo <span class="title">getTestDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    TestDemo demo = <span class="keyword">new</span> TestDemo();</span><br><span class="line">    demo.setId(<span class="number">1L</span>);</span><br><span class="line">    demo.setUsername(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> demo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<p>​    <img src= "/img/loading.gif" data-lazy-src="https://blogpic-1305209282.cos.ap-chengdu.myqcloud.com/img/image-20220723123942747.png" alt="image-20220723123942747" style="zoom:50%;" /></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><p><a href="https://longda.wang/post/ccf439cc.html">Spring Boot 统一响应处理</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/340620501">【项目实践】SpringBoot三招组合拳，手把手教你打出优雅的后端接口</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Spring框架</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC_1</title>
    <url>/2021/04/27/SpringMVC-1/</url>
    <content><![CDATA[<h1 id="SpringMVC-学习笔记"><a href="#SpringMVC-学习笔记" class="headerlink" title="SpringMVC 学习笔记"></a>SpringMVC 学习笔记</h1><h2 id="MVC设计模型"><a href="#MVC设计模型" class="headerlink" title="MVC设计模型"></a>MVC设计模型</h2><ul>
<li><p>M : model 模型 —–&gt;JavaBean</p>
</li>
<li><p>V  :  View 视图 ——&gt; JSP</p>
</li>
<li><p>C  :   Controller控制器 —–&gt; Servlet</p>
</li>
</ul>
<h4 id="MVC职责分析"><a href="#MVC职责分析" class="headerlink" title="MVC职责分析"></a>MVC职责分析</h4><ul>
<li><p>Controller</p>
<ol>
<li>取得表单数据</li>
<li>调用业务逻辑</li>
<li>转向指定的页面</li>
</ol>
</li>
<li><p>Model</p>
<ol>
<li>业务逻辑</li>
<li>保存数据的状态</li>
</ol>
</li>
<li><p>View</p>
<ol>
<li>显示页面</li>
</ol>
</li>
</ul>
<h2 id="SpringMVC概述"><a href="#SpringMVC概述" class="headerlink" title="SpringMVC概述"></a>SpringMVC概述</h2><p>​    SpringMVC是一种基于Java的实现MVC设计模型的请求驱动类型的轻量级Web框架，属于 Spring FrameWork 的后续产品，已经融合在Spring Web Flow里面。Spring 框架提供了构建 Web 应用程序的全功能 MVC 模块。</p>
<p>​    SpringMVC已经成为目前最主流的 MVC 框架之一，并且随着Spring3.0的发布，全面超越 Struts2，成为最优秀的 MVC 框架。 它通过一套注解，让一个简单的Java类成为处理请求的控制器，而无须实现任何接口。同时它还支持RESTful编程风格的请求。</p>
<h2 id="SpringMVC在三层架构的位置"><a href="#SpringMVC在三层架构的位置" class="headerlink" title="SpringMVC在三层架构的位置"></a>SpringMVC在三层架构的位置</h2><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Iooooot/photos@master/blogAboutPic/image-20210301144834860.png" alt="image-20210301144834860"></p>
<h2 id="SpringMVC详细的执行流程"><a href="#SpringMVC详细的执行流程" class="headerlink" title="SpringMVC详细的执行流程"></a>SpringMVC详细的执行流程</h2><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Iooooot/photos@master/blogAboutPic/image-20210302203740236.png" alt="image-20210302203740236"></p>
<p>前端控制器的配置(配置在web.xml中)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其余配置在xml中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启注解扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.wht&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 文件位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/pages/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 文件后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启SpringMVC框架的注解支持并创建处理器映射器和处理器适配器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="SpringMVC-相关注解的讲解"><a href="#SpringMVC-相关注解的讲解" class="headerlink" title="SpringMVC 相关注解的讲解"></a>SpringMVC 相关注解的讲解</h2><ul>
<li><p>@RequestMapping():</p>
<ul>
<li>作用：与前端请求建立映射关联</li>
<li>作用位置：<ul>
<li>方法上</li>
<li>类上</li>
</ul>
</li>
<li>属性：<ul>
<li>path：用于指定请求的URL</li>
<li>value：就等同于path</li>
<li>method：用于指定请求方式(get/post等)</li>
<li>params：用于指定限制请求参数的条件<ul>
<li>例如：<ul>
<li>params = {“username”}表示必须有username属性</li>
<li>params = {“username !root”}表示必须有username属性并值不为root</li>
</ul>
</li>
</ul>
</li>
<li>headers：用于指定发送的请求中必须包含的请求头</li>
</ul>
</li>
</ul>
</li>
<li><p>@RequestParam():</p>
<ul>
<li><p>作用：把请求中的指定名称的参数传递给控制器中的形参赋值</p>
</li>
<li><p>作用位置：</p>
<ul>
<li>方法参数</li>
</ul>
</li>
<li><p>属性：</p>
<ul>
<li>value：就等同于path</li>
<li>required：请求参数中是否必须提供此参数，默认值是true，必须提供</li>
</ul>
</li>
</ul>
</li>
<li><p>@RequestBody():</p>
<ul>
<li><p>作用：用于获取请求体的内容（注意：get方法不可以）</p>
</li>
<li><p>作用位置：</p>
<ul>
<li>方法参数</li>
</ul>
</li>
<li><p>属性：</p>
<ul>
<li>required：是否必须有请求体，默认值是true</li>
</ul>
</li>
</ul>
</li>
<li><p>@PathVariable():</p>
<ul>
<li><p>作用：拥有绑定url中的占位符的。例如：url中有/delete/{id}，{id}就是占位符</p>
</li>
<li><p>作用位置：</p>
<ul>
<li>方法参数</li>
</ul>
</li>
<li><p>属性：</p>
<ul>
<li>value：指定url中的占位符名称</li>
</ul>
</li>
</ul>
</li>
<li><p>@RequestHeader():</p>
<ul>
<li><p>作用：获取指定请求头的值</p>
</li>
<li><p>作用位置：</p>
<ul>
<li>方法参数</li>
</ul>
</li>
<li><p>属性：</p>
<ul>
<li>value：请求头的名称</li>
</ul>
</li>
</ul>
</li>
<li><p>@CookieValue():</p>
<ul>
<li><p>作用：用于获取指定cookie的名称的值</p>
</li>
<li><p>作用位置：</p>
<ul>
<li>方法参数</li>
</ul>
</li>
<li><p>属性：</p>
<ul>
<li>value：cookie的名称</li>
</ul>
</li>
</ul>
</li>
<li><p>@ModelAttribute():</p>
<ul>
<li><p>作用：1.出现在方法上：表示当前方法会在控制器方法执行前线执行。</p>
<p>  ​            2. 出现在参数上：获取指定的数据给参数赋值。</p>
</li>
<li><p>作用位置：</p>
<ul>
<li>方法</li>
<li>方法参数</li>
</ul>
</li>
<li><p>使用场景：</p>
<ul>
<li>当提交表单数据不是完整的实体数据时，保证没有提交的字段使用数据库原来的数据。</li>
</ul>
</li>
<li><p>示例：</p>
<ul>
<li>```java<br>  /**<ul>
<li>作用在方法，先执行</li>
<li>@param name</li>
<li>@return</li>
<li>/<br>@ModelAttribute<br>public User showUser(String name) {<pre><code>   System.out.println(&quot;showUser执行了...&quot;);
</code></pre>
   // 模拟从数据库中查询对象<br>   User user = new User();<br>   user.setName(“哈哈”);<br>   user.setPassword(“123”);<br>   user.setMoney(100d);<br>   return user;<br>}<br>/**</li>
<li>修改用户的方法</li>
<li>@param cookieValue</li>
<li>@return</li>
<li>/<br>@RequestMapping(path=”/updateUser”)<br>public String updateUser(User user) {<pre><code> System.out.println(user);
 return &quot;success&quot;;
</code></pre>
}<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- &#96;&#96;&#96;java</span><br><span class="line">	&#x2F;**</span><br><span class="line">	* 作用在方法，先执行</span><br><span class="line">	* @param name</span><br><span class="line">	* @return</span><br><span class="line">	*&#x2F;</span><br><span class="line">	@ModelAttribute</span><br><span class="line">	public void showUser(String name,Map&lt;String, User&gt; map) &#123;</span><br><span class="line">	      System.out.println(&quot;showUser执行了...&quot;);</span><br><span class="line">	      &#x2F;&#x2F; 模拟从数据库中查询对象</span><br><span class="line">	      User user &#x3D; new User();</span><br><span class="line">	      user.setName(&quot;哈哈&quot;);</span><br><span class="line">	      user.setPassword(&quot;123&quot;);</span><br><span class="line">	      user.setMoney(100d);</span><br><span class="line">	      map.put(&quot;abc&quot;, user);</span><br><span class="line">	&#125;</span><br><span class="line">	&#x2F;**</span><br><span class="line">	* 修改用户的方法</span><br><span class="line">	* @param cookieValue</span><br><span class="line">	* @return</span><br><span class="line">	*&#x2F;</span><br><span class="line">	@RequestMapping(path&#x3D;&quot;&#x2F;updateUser&quot;)</span><br><span class="line">	public String updateUser(@ModelAttribute(value&#x3D;&quot;abc&quot;) User user) &#123;</span><br><span class="line">	      System.out.println(user);</span><br><span class="line">	      return &quot;success&quot;;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>@SessionAttributes():</p>
<ul>
<li><p>作用：用于多次执行控制器方法间的参数共享</p>
</li>
<li><p>作用位置：</p>
<ul>
<li>类上</li>
</ul>
</li>
<li><p>属性：</p>
<ul>
<li>value：指定存入属性的名称</li>
</ul>
</li>
<li><p>示例：</p>
<ul>
<li>```java<br>  @Controller<br>  @RequestMapping(path=”/user”)<br>  @SessionAttributes(value= {“username”,”password”,”age”},types=<br>  {String.class,Integer.class}) // 把数据存入到session域对象中<br>  public class HelloController {<br>  /**<ul>
<li>向session中存入值</li>
<li>@return</li>
<li>/<br>@RequestMapping(path=”/save”)<br>public String save(Model model) {<pre><code> System.out.println(&quot;向session域中保存数据&quot;);
 model.addAttribute(&quot;username&quot;, &quot;root&quot;);
 model.addAttribute(&quot;password&quot;, &quot;123&quot;);
 model.addAttribute(&quot;age&quot;, 20);
 return &quot;success&quot;;
</code></pre>
}<br>/**</li>
<li>从session中获取值</li>
<li>@return</li>
<li>/<br>@RequestMapping(path=”/find”)<br>public String find(ModelMap modelMap) {<pre><code> String username = (String) modelMap.get(&quot;username&quot;);
 String password = (String) modelMap.get(&quot;password&quot;);
 Integer age = (Integer) modelMap.get(&quot;age&quot;);
 System.out.println(username + &quot; : &quot;+password +&quot; : &quot;+age);
 return &quot;success&quot;;
</code></pre>
}<br>/**</li>
<li>清除值</li>
<li>@return</li>
<li>/<br>@RequestMapping(path=”/delete”)<br>public String delete(SessionStatus status) {<pre><code> status.setComplete();
 return &quot;success&quot;;
</code></pre>
}<br>}<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">		- </span><br><span class="line"></span><br><span class="line">## SpringMVC请求参数的绑定</span><br><span class="line"></span><br><span class="line">1. 请求参数的绑定说明</span><br><span class="line"></span><br><span class="line">	1. 绑定机制</span><br><span class="line"></span><br><span class="line">		1. 表单提交的数据都是k&#x3D;v格式的 username&#x3D;haha&amp;password&#x3D;123</span><br><span class="line">		2. SpringMVC的参数绑定过程是把表单提交的请求参数，作为控制器中方法的参数进行绑定的</span><br><span class="line">		3. 要求：提交表单的name和参数的名称是相同的</span><br><span class="line"></span><br><span class="line">	2. 支持的数据类型</span><br><span class="line"></span><br><span class="line">		1. 基本数据类型和字符串类型</span><br><span class="line">		2. 实体类型（JavaBean）</span><br><span class="line">		3. 集合数据类型（List、map集合等）</span><br><span class="line"></span><br><span class="line">		注意事项：</span><br><span class="line"></span><br><span class="line">		  1. 基本数据类型和字符串类型</span><br><span class="line"></span><br><span class="line">			1. 提交表单的name和参数的名称是相同的</span><br><span class="line"></span><br><span class="line">			  2. 区分大小写</span><br><span class="line"></span><br><span class="line">		   2. 实体类型（JavaBean）</span><br><span class="line"></span><br><span class="line">			1. 提交表单的name和JavaBean中的属性名称需要一致</span><br><span class="line">				2. 如果一个JavaBean类中包含其他的引用类型，那么表单的name属性需要编写成：对象.属性 例如：address.name</span><br><span class="line"></span><br><span class="line">​		3.给集合属性数据封装</span><br><span class="line"></span><br><span class="line">​				1.JSP页面编写方式：list[0].属性  ，map[&#39;key&#39;].属性</span><br><span class="line"></span><br><span class="line">## SpringMVC中文乱码的解决</span><br><span class="line"></span><br><span class="line">1. 处理post请求乱码</span><br><span class="line"></span><br><span class="line">	在web.xml中配置Spring提供的过滤器类</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;xml</span><br><span class="line">&lt;!-- 配置过滤器，解决中文乱码的问题 --&gt;</span><br><span class="line">&lt;filter&gt;</span><br><span class="line">		&lt;filter-name&gt;characterEncodingFilter&lt;&#x2F;filter-name&gt;</span><br><span class="line">&lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;&#x2F;filterclass&gt;</span><br><span class="line">&lt;!-- 指定字符集 --&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">        &lt;param-name&gt;encoding&lt;&#x2F;param-name&gt;</span><br><span class="line">        &lt;param-value&gt;UTF-8&lt;&#x2F;param-value&gt;</span><br><span class="line">    &lt;&#x2F;init-param&gt;	</span><br><span class="line">  	&lt;!-- 顺手处理响应乱码 --&gt;</span><br><span class="line">  	&lt;init-param&gt;</span><br><span class="line">        &lt;param-name&gt;forceEncoding&lt;&#x2F;param-name&gt;</span><br><span class="line">        &lt;param-value&gt;true&lt;&#x2F;param-value&gt;</span><br><span class="line">    &lt;&#x2F;init-param&gt;	</span><br><span class="line">&lt;&#x2F;filter&gt;</span><br><span class="line">&lt;filter-mapping&gt;</span><br><span class="line">    &lt;filter-name&gt;characterEncodingFilter&lt;&#x2F;filter-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;&#x2F;*&lt;&#x2F;url-pattern&gt;</span><br><span class="line">&lt;&#x2F;filter-mapping&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<ol start="2">
<li><p>处理get请求乱码</p>
<p> 在tomcat的server.xml中在8080端口处加 URIEncoding=”UTF-8”</p>
</li>
<li><p>处理响应乱码：</p>
<p> 添加response.setContentType(“text/html;charset=utf-8”);</p>
</li>
</ol>
<h2 id="SpringMVC自定义类型转换器"><a href="#SpringMVC自定义类型转换器" class="headerlink" title="SpringMVC自定义类型转换器"></a>SpringMVC自定义类型转换器</h2><ol>
<li>表单提交的任何数据类型全部都是字符串类型，但是后台定义Integer类型，数据也可以封装上，说明<br> Spring框架内部会默认进行数据类型转换。</li>
<li>如果想自定义数据类型转换，可以实现Converter的接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringToDateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        <span class="keyword">if</span>(s==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;请您传入数据&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        SimpleDateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> df.parse(s);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;数据类型转换出现错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>注册自定义类型转换器，在springmvc.xml配置文件中编写配置</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册自定义类型转换器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;conversionService&quot;</span><span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;converters&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;cn.itcast.utils.StringToDateConverter&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启Spring对MVC注解的支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">&quot;conversionService&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="控制器中使用原生的ServletAPI对象"><a href="#控制器中使用原生的ServletAPI对象" class="headerlink" title="控制器中使用原生的ServletAPI对象"></a>控制器中使用原生的ServletAPI对象</h2><p>只需要在控制器的方法参数定义HttpServletRequest和HttpServletResponse对象</p>
]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>SSM</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot配置FastJson</title>
    <url>/2022/09/16/SpringBoot%E9%85%8D%E7%BD%AEFastJson/</url>
    <content><![CDATA[<h1 id="配置FastJSON"><a href="#配置FastJSON" class="headerlink" title="配置FastJSON"></a>配置FastJSON</h1><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.33&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<h3 id="将fastJson转换器注入容器"><a href="#将fastJson转换器注入容器" class="headerlink" title="将fastJson转换器注入容器"></a>将fastJson转换器注入容器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntercaptorConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用<span class="doctag">@Bean</span>注入fastJsonHttpMessageConvert</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HttpMessageConverter <span class="title">fastJsonHttpMessageConverters</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//需要定义一个Convert转换消息的对象</span></span><br><span class="line">        FastJsonHttpMessageConverter fastConverter = <span class="keyword">new</span> FastJsonHttpMessageConverter();</span><br><span class="line">        <span class="comment">// 添加fastjson的配置信息，比如 是否要格式化返回json数据</span></span><br><span class="line">        FastJsonConfig fastJsonConfig = <span class="keyword">new</span> FastJsonConfig();</span><br><span class="line">        fastJsonConfig.setSerializerFeatures(SerializerFeature.PrettyFormat);</span><br><span class="line">        fastJsonConfig.setDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">		<span class="comment">//解决long转换精度丢失等问题</span></span><br><span class="line">        SerializeConfig.globalInstance.put(Long.class, ToStringSerializer.instance);</span><br><span class="line"></span><br><span class="line">        fastJsonConfig.setSerializeConfig(SerializeConfig.globalInstance);</span><br><span class="line">        <span class="comment">// 在convert中添加配置信息.</span></span><br><span class="line">        fastConverter.setFastJsonConfig(fastJsonConfig);</span><br><span class="line">        </span><br><span class="line">        HttpMessageConverter&lt;?&gt; converter = fastConverter;</span><br><span class="line">        <span class="keyword">return</span> converter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 将convert添加到converters当中.</span></span><br><span class="line">        converters.add(fastJsonHttpMessageConverters());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果对转换格式等不满意，可以在字段上加@JSONField</p>
<p>注解属性：</p>
<ul>
<li>name 指定JSON序列化的字段名称</li>
<li>format 指定字段的格式，对日期格式有用</li>
<li>serialize 是否序列化</li>
<li>serializerFeature 通过SerializerFeature对生成的json格式的数据进行一些定制，比如可以输入的格式更好看，使用单引号而非双引号等，是使用SerializerFeature枚举中的指定序列化方式</li>
<li>parseFeatures 决定了解析器是否将自动关闭那些不属于parser自己的输入源 ，见Feature</li>
<li>label 给属性打上标签， 相当于给属性进行了分组</li>
<li>jsonDirect 你有⼀个字段是字符串类型，⾥⾯是json格式数据，你希望直接输⼊，⽽不是经过转义之后再输出 将这个值置为true。</li>
</ul>
</blockquote>
<h4 id="SerializerFeature常用属性"><a href="#SerializerFeature常用属性" class="headerlink" title="SerializerFeature常用属性"></a>SerializerFeature常用属性</h4><table>
<thead>
<tr>
<th>属性名</th>
<th>含义</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>QuoteFieldNames</td>
<td>输出key时<strong>是否使用双引号</strong>,默认为true</td>
<td></td>
</tr>
<tr>
<td>UseSingleQuotes</td>
<td>使用单引号而不是双引号,默认为false</td>
<td></td>
</tr>
<tr>
<td>WriteMapNullValue</td>
<td><strong>是否输出值为null的字段</strong>,默认为false</td>
<td></td>
</tr>
<tr>
<td>WriteNullListAsEmpty</td>
<td>List字段如果为null,输出为[],而非null</td>
<td></td>
</tr>
<tr>
<td>WriteNullStringAsEmpty</td>
<td>字符类型字段如果为null,输出为”“,而非null</td>
<td></td>
</tr>
<tr>
<td>WriteNullNumberAsZero</td>
<td>数值字段如果为null,输出为0,而非null</td>
<td></td>
</tr>
<tr>
<td>WriteNullBooleanAsFalse</td>
<td>Boolean字段如果为null,输出为false,而非null</td>
<td></td>
</tr>
<tr>
<td>PrettyFormat</td>
<td><strong>结果是否格式化</strong>,默认为false</td>
<td></td>
</tr>
<tr>
<td>WriteClassName</td>
<td><strong>序列化时写入类型信息，默认为false</strong>。反序列化是需用到</td>
<td></td>
</tr>
<tr>
<td>BeanToArray</td>
<td>将对象转为array输出</td>
<td></td>
</tr>
<tr>
<td>DisableCheckSpecialChar</td>
<td>一个对象的字符串属性中<strong>如果有特殊字符如双引号，将会在转成json时带有反斜杠转移符</strong>。如果不需要转义，可以使用这个属性。默认为false</td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Spring框架</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC_2</title>
    <url>/2021/04/29/SpringMVC-2/</url>
    <content><![CDATA[<h1 id="SpringMVC-学习笔记（二）"><a href="#SpringMVC-学习笔记（二）" class="headerlink" title="SpringMVC 学习笔记（二）"></a>SpringMVC 学习笔记（二）</h1><h3 id="1-发送ajax请求"><a href="#1-发送ajax请求" class="headerlink" title="1. 发送ajax请求"></a>1. 发送ajax请求</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 页面加载</span></span><br><span class="line"><span class="comment">// 页面加载</span></span><br><span class="line">$(function()&#123;</span><br><span class="line">    <span class="comment">// 绑定点击事件</span></span><br><span class="line">    $(<span class="string">&quot;#btn&quot;</span>).click(function()&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url:<span class="string">&quot;user/testJson&quot;</span>,</span><br><span class="line">        contentType:<span class="string">&quot;application/json;charset=UTF-8&quot;</span>,</span><br><span class="line">        data:<span class="string">&#x27;&#123;&quot;addressName&quot;:&quot;aa&quot;,&quot;addressNum&quot;:100&#125;&#x27;</span>,</span><br><span class="line">        dataType:<span class="string">&quot;json&quot;</span>,</span><br><span class="line">        type:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">        success:function(data)&#123;</span><br><span class="line">                alert(data);</span><br><span class="line">                alert(data.addressName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">		&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="2-接收响应数据"><a href="#2-接收响应数据" class="headerlink" title="2. 接收响应数据"></a>2. 接收响应数据</h3><p>json字符串和JavaBean对象互相转换的过程中，需要使用jackson的jar包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>接收到json并转换为javaBean对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 获取请求体的数据</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> body</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/testJson&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJson</span><span class="params">(<span class="meta">@RequestBody</span> Address address)</span> </span>&#123;</span><br><span class="line">		System.out.println(address);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>使用@ResponseBody注解把JavaBean对象转换成json字符串，直接响应</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testJson&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">Address <span class="title">testJson</span><span class="params">(<span class="meta">@RequestBody</span> Address address)</span> </span>&#123;</span><br><span class="line">    System.out.println(address);</span><br><span class="line">    address.setAddressName(<span class="string">&quot;上海&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-SpringMVC实现文件上传"><a href="#3-SpringMVC实现文件上传" class="headerlink" title="3.SpringMVC实现文件上传"></a>3.SpringMVC实现文件上传</h3><p>前提：</p>
<ul>
<li><p> A form表单的enctype取值必须是：multipart/form-data (默认值是:application/x-www-form-urlencoded) enctype:是表单请求正文的类型 </p>
</li>
<li><p> B method属性取值必须是Post </p>
</li>
<li><p> C 提供一个文件选择域<input type="file" /></p>
</li>
<li><p> maven依赖：</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="传统的文件上传"><a href="#传统的文件上传" class="headerlink" title="传统的文件上传"></a>传统的文件上传</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 文件上传</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/fileupload&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fileupload</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 先获取到要上传的文件目录</span></span><br><span class="line">    String path = request.getSession().getServletContext().getRealPath(<span class="string">&quot;/uploads&quot;</span>);</span><br><span class="line">    <span class="comment">// 创建File对象，一会向该路径下上传文件</span></span><br><span class="line">    File file = <span class="keyword">new</span> File(path);</span><br><span class="line">    <span class="comment">// 判断路径是否存在，如果不存在，创建该路径</span></span><br><span class="line">    <span class="keyword">if</span>(!file.exists()) &#123;</span><br><span class="line">    		file.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建磁盘文件项工厂</span></span><br><span class="line">    DiskFileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line">    ServletFileUpload fileUpload = <span class="keyword">new</span> ServletFileUpload(factory);</span><br><span class="line">    <span class="comment">// 解析request对象</span></span><br><span class="line">    List&lt;FileItem&gt; list = fileUpload.parseRequest(request);</span><br><span class="line">    <span class="comment">// 遍历</span></span><br><span class="line">    <span class="keyword">for</span> (FileItem fileItem : list) &#123;</span><br><span class="line">      <span class="comment">// 判断文件项是普通字段，还是上传的文件</span></span><br><span class="line">      <span class="keyword">if</span>(fileItem.isFormField()) &#123;</span><br><span class="line">        </span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 上传文件项</span></span><br><span class="line">          <span class="comment">// 获取到上传文件的名称</span></span><br><span class="line">          String filename = fileItem.getName();</span><br><span class="line">          <span class="comment">// 上传文件</span></span><br><span class="line">          fileItem.write(<span class="keyword">new</span> File(file, filename));</span><br><span class="line">          <span class="comment">// 删除临时文件</span></span><br><span class="line">          fileItem.delete();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="SpringMVC的文件上传"><a href="#SpringMVC的文件上传" class="headerlink" title="SpringMVC的文件上传"></a>SpringMVC的文件上传</h4><ul>
<li><p>配置文件解析器对象</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置文件解析器对象，要求id名称必须是multipartResolver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10485760&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>代码</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* SpringMVC方式的文件上传</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/fileupload2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fileupload2</span><span class="params">(HttpServletRequest request,MultipartFile upload)</span> <span class="keyword">throws</span></span></span><br><span class="line"><span class="function">  Exception </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;SpringMVC方式的文件上传...&quot;</span>);</span><br><span class="line">      <span class="comment">// 先获取到要上传的文件目录</span></span><br><span class="line">      String path = request.getSession().getServletContext().getRealPath(<span class="string">&quot;/uploads&quot;</span>);</span><br><span class="line">      <span class="comment">// 创建File对象，一会向该路径下上传文件</span></span><br><span class="line">      File file = <span class="keyword">new</span> File(path);</span><br><span class="line">      <span class="comment">// 判断路径是否存在，如果不存在，创建该路径</span></span><br><span class="line">      <span class="keyword">if</span>(!file.exists()) &#123;</span><br><span class="line">      		file.mkdirs();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 获取到上传文件的名称</span></span><br><span class="line">      String filename = upload.getOriginalFilename();</span><br><span class="line">      String uuid = UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>).toUpperCase();</span><br><span class="line">      <span class="comment">// 把文件的名称唯一化</span></span><br><span class="line">      filename = uuid+<span class="string">&quot;_&quot;</span>+filename;</span><br><span class="line">      <span class="comment">// 上传文件</span></span><br><span class="line">      upload.transferTo(<span class="keyword">new</span> File(file，filename));</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="SpringMVC跨服务器文件上传"><a href="#SpringMVC跨服务器文件上传" class="headerlink" title="SpringMVC跨服务器文件上传"></a>SpringMVC跨服务器文件上传</h4><p>导入需要的jar包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.jersey<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jersey-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.jersey<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jersey-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>文件上传的JSP页面</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;h3&gt;跨服务器的文件上传&lt;/h3&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;user/fileupload3&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">      选择文件：&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;upload&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">      &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;上传文件&quot;</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<p>编写控制器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* SpringMVC跨服务器方式的文件上传</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/fileupload3&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fileupload3</span><span class="params">(MultipartFile upload)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;SpringMVC跨服务器方式的文件上传...&quot;</span>);</span><br><span class="line">      <span class="comment">// 定义图片服务器的请求路径</span></span><br><span class="line">      String path = <span class="string">&quot;http://localhost:9090/day02_springmvc5_02image/uploads/&quot;</span>;</span><br><span class="line">      <span class="comment">// 获取到上传文件的名称</span></span><br><span class="line">      String filename = upload.getOriginalFilename();</span><br><span class="line">      String uuid = UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>).toUpperCase();</span><br><span class="line">      <span class="comment">// 把文件的名称唯一化</span></span><br><span class="line">      filename = uuid+<span class="string">&quot;_&quot;</span>+filename;</span><br><span class="line">      <span class="comment">// 向图片服务器上传文件</span></span><br><span class="line">      <span class="comment">// 创建客户端对象</span></span><br><span class="line">      Client client = Client.create();</span><br><span class="line">      <span class="comment">// 连接图片服务器</span></span><br><span class="line">      WebResource webResource = client.resource(path+filename);</span><br><span class="line">      <span class="comment">// 上传文件</span></span><br><span class="line">      webResource.put(upload.getBytes());</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-SpringMVC异常处理"><a href="#4-SpringMVC异常处理" class="headerlink" title="4.SpringMVC异常处理"></a>4.SpringMVC异常处理</h3><p>异常处理思路：</p>
<p>​    Controller调用service，service调用dao，异常都是向上抛出的，最终有DispatcherServlet找异常处理器进<br>​    行异常的处理。</p>
<p>自定义异常类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.exception;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">4055945147128016300L</span>;</span><br><span class="line">      <span class="comment">// 异常提示信息</span></span><br><span class="line">      <span class="keyword">private</span> String message;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> message;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.message = message;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">SysException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.message = message;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置异常处理器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 异常处理器</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> rt</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysExceptionResolver</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span></span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 跳转到具体的错误页面的方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,Exception ex)</span> </span>&#123;</span><br><span class="line">      ex.printStackTrace();</span><br><span class="line">      SysException e = <span class="keyword">null</span>;</span><br><span class="line">      <span class="comment">// 获取到异常对象</span></span><br><span class="line">      <span class="keyword">if</span>(ex <span class="keyword">instanceof</span> SysException) &#123;</span><br><span class="line">      e = (SysException) ex;</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      e = <span class="keyword">new</span> SysException(<span class="string">&quot;请联系管理员&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">      <span class="comment">// 存入错误的提示信息</span></span><br><span class="line">      mv.addObject(<span class="string">&quot;message&quot;</span>, e.getMessage());</span><br><span class="line">      <span class="comment">// 跳转的Jsp页面</span></span><br><span class="line">      mv.setViewName(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置异常处理器：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置异常处理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sysExceptionResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.itcast.exception.SysExceptionResolver&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="5-SpringMVC拦截器"><a href="#5-SpringMVC拦截器" class="headerlink" title="5.SpringMVC拦截器"></a>5.SpringMVC拦截器</h3><ol>
<li>SpringMVC框架中的拦截器用于对处理器进行预处理和后处理的技术。</li>
<li>可以定义拦截器链，连接器链就是将拦截器按着一定的顺序结成一条链，在访问被拦截的方法时，拦截器链<br> 中的拦截器会按着定义的顺序执行。</li>
<li>拦截器和过滤器的功能比较类似，有区别<ol>
<li>过滤器是Servlet规范的一部分，任何框架都可以使用过滤器技术。</li>
<li>拦截器是SpringMVC框架独有的。</li>
<li>过滤器配置了/*，可以拦截任何资源。</li>
<li>拦截器只会对控制器中的方法进行拦截。</li>
</ol>
</li>
<li>拦截器也是AOP思想的一种实现方式</li>
<li>想要自定义拦截器，需要实现HandlerInterceptor接口或者继承HandlerInterceptorAdapter这个类就可以自定义实现其方法。</li>
</ol>
<p>HandlerInterceptor接口的方法：</p>
<ol>
<li>preHandle方法是controller方法执行前拦截的方法<ol>
<li>可以使用request或者response跳转到指定的页面</li>
<li>return true放行，执行下一个拦截器，如果没有拦截器，执行controller中的方法。</li>
<li>return false不放行，不会执行controller中的方法。</li>
</ol>
</li>
<li>postHandle是controller方法执行后执行的方法，在JSP视图执行前。<ol>
<li>可以使用request或者response跳转到指定的页面</li>
<li>如果指定了跳转的页面，那么controller方法跳转的页面将不会显示。</li>
</ol>
</li>
<li>postHandle方法是在JSP执行后执行<ol>
<li>request或者response不能再跳转页面了</li>
</ol>
</li>
</ol>
<p>自定义拦截器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 自定义拦截器1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor1</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span></span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * controller方法执行前，进行拦截的方法</span></span><br><span class="line"><span class="comment">  * return true放行</span></span><br><span class="line"><span class="comment">  * return false拦截</span></span><br><span class="line"><span class="comment">  * 可以使用转发或者重定向直接跳转到指定的页面。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">  Object handler)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;拦截器执行了...&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置拦截器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置拦截器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 哪些方法进行拦截 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/user/*&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 哪些方法不进行拦截</span></span><br><span class="line"><span class="comment">        &lt;mvc:exclude-mapping path=&quot;&quot;/&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注册拦截器对象 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;cn.itcast.demo1.MyInterceptor1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>SSM</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>Swagger2</title>
    <url>/2022/11/11/Swagger2/</url>
    <content><![CDATA[<h1 id="Swagger2"><a href="#Swagger2" class="headerlink" title="Swagger2"></a>Swagger2</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于目前大趋势，都是进行前后端的开发模式。在这样的背景下，前后端的交流是必不可少的。相信无论是前端还是后端开发，都或多或少地被接口文档折磨过。前端经常抱怨后端给的接口文档与实际情况不一致。后端又觉得编写及维护接口文档会耗费不少精力，经常来不及更新。</p>
<p><a href="https://swagger.io/">Swagger</a>的诞生完美的解决了上述问题，你只需要按照它的规范去定义接口及接口相关的信息。再通过Swagger衍生出来的一系列项目和工具，就可以做到生成各种格式的接口文档，生成多种语言的客户端和服务端的代码，以及在线接口调试页面等等</p>
<h2 id="所提供的开源工具"><a href="#所提供的开源工具" class="headerlink" title="所提供的开源工具"></a>所提供的开源工具</h2><ol>
<li><p><strong>Swagger Codegen</strong>: 通过Codegen 可以将描述文件生成html格式和cwiki形式的接口文档，同时也能生成多钟语言的服务端和客户端的代码。支持通过jar包，docker，node等方式在本地化执行生成。也可以在后面的Swagger Editor中在线生成。</p>
</li>
<li><p><strong>Swagger UI</strong>:提供了一个可视化的UI页面展示描述文件。接口的调用方、测试、项目经理等都可以在该页面中对相关接口进行查阅和做一些简单的接口请求。该项目支持在线导入描述文件和本地部署UI项目。</p>
</li>
<li><p><strong>Swagger Editor</strong>: 类似于markendown编辑器的编辑Swagger描述文件的编辑器，该编辑支持实时预览描述文件的更新效果。也提供了在线编辑器和本地部署编辑器两种方式。</p>
</li>
<li><p><strong>Swagger Inspector</strong>: 感觉和postman差不多，是一个可以对接口进行测试的在线版的postman。比在Swagger UI里面做接口请求，会返回更多的信息，也会保存你请求的实际请求参数等数据。</p>
</li>
<li><p><strong>Swagger Hub</strong>：集成了上面所有项目的各个功能，你可以以项目和版本为单位，将你的描述文件上传到Swagger Hub中。在Swagger Hub中可以完成上面项目的所有工作，需要注册账号，分免费版和收费版。</p>
</li>
</ol>
<h2 id="SpringBoot集成Swagger2"><a href="#SpringBoot集成Swagger2" class="headerlink" title="SpringBoot集成Swagger2"></a>SpringBoot集成Swagger2</h2><h3 id="SpringFox"><a href="#SpringFox" class="headerlink" title="SpringFox"></a>SpringFox</h3><p>SpringFox是Spring 基于swagger规范，可以将基于SpringMVC和Spring Boot项目的项目代码，自动生成JSON格式的描述文件，提供控制层中各个请求的测试界面等。本身不是属于Swagger官网提供的。</p>
<p>Spring-fox利用自身AOP特性，把Swagger集成进来，底层还是Swagger。但是使用起来确方便很多。所以在实际开发中，都是直接使用spring-fox。</p>
<h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/io.springfox/springfox-swagger2 --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;2.9.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;2.9.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><ol>
<li><p>开启Swagger2的自动配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span> <span class="comment">//springfox提供的一个注解，代表swagger2相关技术开启，会扫描当前类所在包，及子包中所有的类型中注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>进行swagger-ui页面：<code>http://localhost:8011/swagger-ui.html</code></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://blogpic-1305209282.cos.ap-chengdu.myqcloud.com/img/image-20220808221828680.png" alt="image-20220808221828680"></p>
</li>
<li><p>可以点击try it out进行请求的模拟</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://blogpic-1305209282.cos.ap-chengdu.myqcloud.com/img/image-20220808222516418.png" alt="image-20220808222516418"></p>
</li>
</ol>
<h4 id="swagger配置"><a href="#swagger配置" class="headerlink" title="swagger配置"></a>swagger配置</h4><h5 id="修改api文档顶部主体内容"><a href="#修改api文档顶部主体内容" class="headerlink" title="修改api文档顶部主体内容"></a>修改api文档顶部主体内容</h5><ul>
<li><p>创建配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwagggerConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建Docket类型的对象，交由spring容器管理</span></span><br><span class="line"><span class="comment">     * Docket是Swagger中的全局配置对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//指定swagger版本</span></span><br><span class="line">        Docket docket = <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//api帮助文档的描述信息</span></span><br><span class="line">        ApiInfo apiInfo =</span><br><span class="line">                <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                        .contact( <span class="comment">//主体内容：发布者名称、发布者网站地址、发布者邮箱</span></span><br><span class="line">                                <span class="keyword">new</span> Contact(<span class="string">&quot;wht&quot;</span>,</span><br><span class="line">                                        <span class="string">&quot;http://www.wht.com&quot;</span>,</span><br><span class="line">                                        <span class="string">&quot;1369281736@qq.com&quot;</span>)</span><br><span class="line">                        )</span><br><span class="line">                        <span class="comment">//文档题目</span></span><br><span class="line">                        .title(<span class="string">&quot;SwaggerApi学习帮助文档&quot;</span>)</span><br><span class="line">                        <span class="comment">//文档描述</span></span><br><span class="line">                        .description(<span class="string">&quot;一个简单学习使用Swagger2的文档&quot;</span>)</span><br><span class="line">                        <span class="comment">//文档版本</span></span><br><span class="line">                        .version(<span class="string">&quot;1.1&quot;</span>)</span><br><span class="line">                        .build();</span><br><span class="line"></span><br><span class="line">        docket.apiInfo(apiInfo);</span><br><span class="line">       </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> docket;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>效果：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://blogpic-1305209282.cos.ap-chengdu.myqcloud.com/img/image-20220808224633617.png" alt="image-20220808224633617"></p>
</li>
</ul>
<h5 id="配置扫描接口"><a href="#配置扫描接口" class="headerlink" title="配置扫描接口"></a>配置扫描接口</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">docket</span><br><span class="line">    <span class="comment">//获取Docket中的选择器，返回ApiSeletorBuilder</span></span><br><span class="line">    .select()</span><br><span class="line">    <span class="comment">//指定扫描的规则</span></span><br><span class="line">    <span class="comment">//指定扫描com.wht.controller包及其子包</span></span><br><span class="line">    .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.wht.controller&quot;</span>));</span><br></pre></td></tr></table></figure>
<blockquote>
<p>除了basePackage的扫描策略还有其他的：</p>
<ul>
<li>any() ：扫描所有，项目中的所有接口都会被扫描到</li>
<li>none()： 不扫描接口</li>
<li>withMethodAnnotation(final Class&lt;? extends Annotation&gt; annotation)： 通过方法上的注解扫描，如withMethodAnnotation(GetMapping.class)只扫描get请求</li>
<li>withClassAnnotation(final Class&lt;? extends Annotation&gt; annotation) ： 通过类上的注解扫描，如.withClassAnnotation(Controller.class)只扫描有controller注解的类中的接口</li>
</ul>
</blockquote>
<h5 id="添加请求路径过滤器"><a href="#添加请求路径过滤器" class="headerlink" title="添加请求路径过滤器"></a>添加请求路径过滤器</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.wht.controller&quot;</span>))</span><br><span class="line"><span class="comment">// 配置如何通过path过滤,即这里只扫描请求以/user开头的接口</span></span><br><span class="line">.paths(PathSelectors.ant(<span class="string">&quot;/user/**&quot;</span>))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>除了ant()风格的扫描策略还有其他的：</p>
<ul>
<li>any() ：任何请求都扫描</li>
<li>none()：任何请求都不扫描</li>
<li>regex(final String pathRegex)：通过正则表达式控制</li>
</ul>
</blockquote>
<h5 id="根据环境动态展示swagger"><a href="#根据环境动态展示swagger" class="headerlink" title="根据环境动态展示swagger"></a>根据环境动态展示swagger</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">(Environment environment)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 设置要显示swagger的环境</span></span><br><span class="line">   Profiles of = Profiles.of(<span class="string">&quot;dev&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">   <span class="comment">// 判断当前是否处于该环境</span></span><br><span class="line">   <span class="comment">// 通过 enable() 接收此参数判断是否要显示</span></span><br><span class="line">   <span class="keyword">boolean</span> flag = environment.acceptsProfiles(of);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">      .apiInfo(apiInfo())</span><br><span class="line">      .enable(flag) <span class="comment">//配置是否启用Swagger，如果是false，在浏览器将无法访问</span></span><br><span class="line">      .select()<span class="comment">// 通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span></span><br><span class="line">      .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.wht.controller&quot;</span>))</span><br><span class="line">       <span class="comment">// 配置如何通过path过滤,即这里只扫描请求以/user开头的接口</span></span><br><span class="line">      .paths(PathSelectors.ant(<span class="string">&quot;/user/**&quot;</span>))</span><br><span class="line">      .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h5><p>如果没有对分组进行配置，默认只有default分组，可以通过groupName(“组名”)进行分组</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://blogpic-1305209282.cos.ap-chengdu.myqcloud.com/img/image-20220810170657262.png" alt="image-20220810170657262"></p>
<blockquote>
<p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket1</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;group1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket2</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;group2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket3</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;group3&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h4><ul>
<li>@Api(tags = “xxx模块说明”) ：对模块进行描述</li>
<li>@ApiOperation(“xxx接口说明”)：对api接口的描述</li>
<li>@ApiModel(“xxxPOJO说明”)：对javaBean进行描述</li>
<li>@ApiModelProperty(value = “xxx属性说明”,hidden = true)：对javaBean的属性进行描述</li>
<li>@ApiParam(“xxx参数说明”)：对方法参数进行描述</li>
<li>@ApiIgnore：加在方法或类上不生成文档</li>
<li>@ApiImplicitParam(name  = “参数名”,value = “参数描述”, required = “是否必要” , paramType = “参数类型”)：加在接口上用于描述接口中的参数</li>
<li>@ApiImplicitParams(name = {@ApiImplicitParam(),@ApiImplicitParam()})：定义多个参数</li>
</ul>
]]></content>
      <categories>
        <category>Swagger</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Swagger</tag>
      </tags>
  </entry>
  <entry>
    <title>VueCLI</title>
    <url>/2022/09/04/VueCLI/</url>
    <content><![CDATA[<h1 id="VueCLI"><a href="#VueCLI" class="headerlink" title="VueCLI"></a>VueCLI</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>CLI是Command-Line Interface，翻译为命令行界面，但是俗称脚手架。<br>Vue CLI是一个官方发布vue.js项目脚手架，使用vue-cli可以快速搭建Vue开发环境以及对应的webpacki配置，</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol>
<li>全局安装@vue/cli：npm install -g @vue/cli</li>
<li>切换到要创建项目的目录进行创建：vue create XXXX  (vue cli3)/ vue init webpack 项目名称（vue cli2）</li>
<li>启动项目：npm run serve</li>
</ol>
<h2 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h2><h4 id="方式一：通过vue-ui修改"><a href="#方式一：通过vue-ui修改" class="headerlink" title="方式一：通过vue ui修改"></a>方式一：通过vue ui修改</h4><ol>
<li><p>进入vue ui后导入项目</p>
</li>
<li><p>可以管理相应的依赖和插件</p>
</li>
<li><p>在配置项，配置相关配置</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://blogpic-1305209282.cos.ap-chengdu.myqcloud.com/img/image-20220629171510192.png" alt="image-20220629171510192"></p>
</li>
</ol>
<h4 id="方式二：直接创建配置文件配置"><a href="#方式二：直接创建配置文件配置" class="headerlink" title="方式二：直接创建配置文件配置"></a>方式二：直接创建配置文件配置</h4><ol>
<li><p>创建vue.config.js文件（名称必须固定）</p>
</li>
<li><p>直接在文件中修改配置文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@vue/cli-service&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = defineConfig(&#123;</span><br><span class="line">  <span class="comment">// 选项</span></span><br><span class="line">  pages:&#123;</span><br><span class="line">    index:&#123;</span><br><span class="line">      entry:<span class="string">&#x27;src/main.js&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//关闭语法检查</span></span><br><span class="line">  lintOnSave:<span class="literal">false</span></span><br><span class="line">  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>VueJs</title>
    <url>/2022/08/31/VueJs/</url>
    <content><![CDATA[<h1 id="Vuejs基础"><a href="#Vuejs基础" class="headerlink" title="Vuejs基础"></a>Vuejs基础</h1><p>Vue (是一套用于构建用户界面的浙进式框架。与其它大型框架不同的是，Vue被设计为可以白底向上逐层应用。Vue的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工贝链以及各种支持类库结合使用时，Vue也完全能够为复杂的单页应用提供驱动。</p>
<h3 id="Vue初体验"><a href="#Vue初体验" class="headerlink" title="Vue初体验"></a>Vue初体验</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>初体验<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;message&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in movies&quot;</span>&gt;</span></span><br><span class="line">                &#123;&#123;item&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                el:<span class="string">&#x27;#app&#x27;</span>,<span class="comment">//用于挂载要管理的元素</span></span></span><br><span class="line"><span class="javascript">                data:&#123; <span class="comment">//定义数据</span></span></span><br><span class="line"><span class="javascript">                    message:<span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    movies:[<span class="string">&#x27;少年派&#x27;</span>,<span class="string">&#x27;星际穿越&#x27;</span>]</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Vue中的MVVM"><a href="#Vue中的MVVM" class="headerlink" title="Vue中的MVVM"></a>Vue中的MVVM</h3><h4 id="MVVM的概念"><a href="#MVVM的概念" class="headerlink" title="MVVM的概念"></a>MVVM的概念</h4><p>​    MVVM是Model-View-ViewModel的简写。它本质上就是MVC 的改进版。MVVM 就是将其中的View 的状态和行为抽象化，让我们将视图 UI 和业务逻辑分开。</p>
<h4 id="Vue中MVVM："><a href="#Vue中MVVM：" class="headerlink" title="Vue中MVVM："></a>Vue中MVVM：</h4><p>通过ViewModel将view和model分隔。ViewModel的主要作用：</p>
<ol>
<li>将model生成的数据与view进行绑定，并且对model中的数据进行实时监听保证view中的数据最新。</li>
<li>对view的DOM进行监听，如果发生某个事件会调用model中相应的回调。</li>
</ol>
<img src= "/img/loading.gif" data-lazy-src="https://blogpic-1305209282.cos.ap-chengdu.myqcloud.com/img/image-20220626183439079.png" style="zoom:67%;" />

<h3 id="Vue实例中的基本选项"><a href="#Vue实例中的基本选项" class="headerlink" title="Vue实例中的基本选项"></a>Vue实例中的基本选项</h3><ul>
<li><p>el：</p>
<ul>
<li>类型：string|HTMLElement</li>
<li>作用：Vue实例管理的DOM</li>
</ul>
</li>
<li><p>data：</p>
<ul>
<li>类型：Object|Function</li>
<li>作用：Vue实例对应的数据对象</li>
</ul>
</li>
<li><p>methods：</p>
<ul>
<li>类型：[key:string]：Function</li>
<li>作用：定义属于Vue的一些方法，可以在其他地方调用，也可以在指令中使用。</li>
</ul>
</li>
<li><p>生命周期函数：</p>
<ul>
<li>类型：如beforeCreate: function(){}等….(详细如下<a href="#jump1">Vue生命周期</a>介绍)</li>
</ul>
</li>
<li><p>computed（计算属性）：</p>
<ul>
<li>类型：[key:string]：function(){}</li>
<li>作用：将属性进行加工处理，并返回</li>
<li>使用：<code>&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt;</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">computed:&#123;  <span class="comment">//计算属性</span></span><br><span class="line">  	<span class="comment">// 完整写法</span></span><br><span class="line">  	fullName:&#123;</span><br><span class="line">      <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      	<span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">this</span>.lastName;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="title">set</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">      	<span class="built_in">console</span>.log(<span class="string">&quot;fullName被人修改了哦!!&quot;</span>);</span><br><span class="line">      	<span class="keyword">const</span> arr = value.split(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">      	<span class="built_in">this</span>.firstName = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">this</span>.lastName = arr[<span class="number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//只有考虑读取才能使用这个简写</span></span><br><span class="line">    <span class="function"><span class="title">fullName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">this</span>.lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>filters(过滤器)：</p>
<ul>
<li>类型：key:string(value){}</li>
<li>作用：将数据进行过滤并返回过滤后的结果</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明</span></span><br><span class="line">filters:&#123;</span><br><span class="line">    <span class="function"><span class="title">timeFormater</span>(<span class="params">value,str</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dayjs(value).format(str)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">&lt;h3&gt;现在是:&#123;&#123;time | timeFormater(<span class="string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>)&#125;&#125;&lt;/h3&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>watch(属性监视)：</p>
<ul>
<li>类型：key(newValue,oldValue):{}</li>
<li>作用：监视属性的变化</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">watch:&#123; <span class="comment">//同样可以检测普通属性和计算属性</span></span><br><span class="line">    <span class="comment">// isHot:&#123;</span></span><br><span class="line">    <span class="comment">//     deep:true, //深度监视 监视多级结构中所有属性的变化</span></span><br><span class="line">    <span class="comment">//     immediate:true, //初始化时调用一下</span></span><br><span class="line">    <span class="comment">//     handler(newValue,oldValue)&#123;//当isHot发生变化时调用</span></span><br><span class="line">    <span class="comment">//         console.log(&quot;天气发生变化&quot;+oldValue+newValue);</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// 只需要handler时可以简写</span></span><br><span class="line">    <span class="function"><span class="title">isHot</span>(<span class="params">newValue,oldValue</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;天气发生变化&quot;</span>+oldValue+newValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 写法2 </span></span><br><span class="line">vm.$watch(<span class="string">&#x27;isHot&#x27;</span>,&#123;</span><br><span class="line">    immediate:<span class="literal">true</span>, <span class="comment">//初始化时调用一下</span></span><br><span class="line">    <span class="function"><span class="title">handler</span>(<span class="params">newValue,oldValue</span>)</span>&#123;<span class="comment">//当isHot发生变化时调用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


</li>
</ul>
<blockquote>
<p>其余可以参考<a href="https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E6%95%B0%E6%8D%AE">官方网站</a></p>
</blockquote>
<h3 id="Vue生命周期"><a href="#Vue生命周期" class="headerlink" title="Vue生命周期"></a><span id="jump1">Vue生命周期</span></h3><blockquote>
<p>Vue官方生命周期图例：</p>
</blockquote>
<img src= "/img/loading.gif" data-lazy-src="https://blogpic-1305209282.cos.ap-chengdu.myqcloud.com/img/image-20220626190200058.png" style="zoom:67%;" />

<h4 id="Vue各个生命周期阶段介绍："><a href="#Vue各个生命周期阶段介绍：" class="headerlink" title="Vue各个生命周期阶段介绍："></a>Vue各个生命周期阶段介绍：</h4><ol>
<li>beforeCreate：刚刚初始化事件但数据代理还未开始时，并且无法通过vm访问到data中的数据和methods中的方法</li>
<li>created：完成数据检测和数据代理之后调用，并且可以通过vm访问到data中的数据和methods中的方法</li>
<li>beforeMount：在Vue解析模板并生成虚拟DOM但还不能显示解析好的内容后调用，页面呈现的是未经Vue编译的DOM,对DOM的操作最终会失效</li>
<li>mounted：Vue完成模板的解析并把初试真实DOM元素放入页面后（挂载完毕），页面中呈现的是经过Vue编译的DOM</li>
<li>beforeUpdate：当更新数据时，重新解析模板之前调用，数据是新的页面是旧的</li>
<li>updated：当模板解析页面与数据同步之后调用，Vue会生成新的虚拟DOM随后与旧的DOM进行比较完成更新页面渲染</li>
<li>beforeDestroy：调用Vue.$destory()会完全销毁一个实例，清除它与其他实例的链接,解绑它的全部指令和事件监听器，在摧毁之前调用data、methods都可用,但是对数据的更新之后将不会触发更新了</li>
<li>destroyed：Vue完成销毁之后调用</li>
</ol>
<h3 id="Vue指令"><a href="#Vue指令" class="headerlink" title="Vue指令"></a>Vue指令</h3><h4 id="内置指令"><a href="#内置指令" class="headerlink" title="内置指令"></a>内置指令</h4><ul>
<li><p>v-once：只会动态渲染一次，动态渲染以后就是静态资源了</p>
</li>
<li><p>v-clock：标识延迟加载的标签，如果vue加载完毕后就关闭</p>
</li>
<li><p>v-html：用于嵌入html代码</p>
</li>
<li><p>v-pre：直接静态渲染不进行解析加快编译</p>
</li>
<li><p>v-text：往标签中写入文本数据</p>
</li>
<li><p>v-bind：动态绑定属性（可以绑定href、src、class、style等）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;imgURL&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;imgURL&quot;</span>&gt;</span>  <span class="comment">&lt;!-- 简写 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 动态添加类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;active:isActive&#125;&quot;</span>&gt;</span>文字<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;a&#x27;,&#x27;b&#x27;]&quot;</span>&gt;</span>文字<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- 数组语法 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 动态绑定样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;fontSize: fsize+&#x27;px&#x27;&#125;&quot;</span>&gt;</span>111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;styleObj&quot;</span>&gt;</span>222<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>v-for：用于遍历</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 遍历数组--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) in persons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;p.id&quot;</span>&gt;</span><span class="comment">&lt;!-- p为元素，index为索引 添加key提高DOM渲染的效率--&gt;</span></span><br><span class="line">        &#123;&#123;index+1&#125;&#125;:&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span>      </span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 遍历对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,key,index) in person&quot;</span>&gt;</span><span class="comment">&lt;!-- value为对象属性值，key为对象属性名 index为索引--&gt;</span></span><br><span class="line">        &#123;&#123;index+1&#125;&#125;:&#123;&#123;key&#125;&#125;-&#123;&#123;value&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span>      </span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>v-on:事件：绑定事件(简写为@)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;root&quot;</span>&gt;</span><br><span class="line">        &lt;h2&gt;欢迎来到&#123;&#123;name&#125;&#125;学习&lt;/h2&gt;</span><br><span class="line">        &lt;button v-on:click=<span class="string">&quot;showInfo1&quot;</span>&gt;点我提示信息&lt;/button&gt;</span><br><span class="line">        &lt;button @click=<span class="string">&quot;showInfo2($event,66)&quot;</span>&gt;点我提示信息&lt;/button&gt;</span><br><span class="line">        &lt;!-- keyup事件后面加哪个键</span><br><span class="line">            回车：enter</span><br><span class="line">            删除：<span class="keyword">delete</span></span><br><span class="line">            退出：esc</span><br><span class="line">            空格：space</span><br><span class="line">            换行：tab（特殊需要配合keydown如：ctrl,alt,shift,meta）</span><br><span class="line">            上：up</span><br><span class="line">            下：down</span><br><span class="line">            左：left</span><br><span class="line">            右：right</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> placeholder=<span class="string">&quot;按下回车提示输入&quot;</span> @keyup.enter=<span class="string">&quot;showInfo&quot;</span>&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">        Vue.config.productionTip = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            el:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span>&#123;</span><br><span class="line">                    name:<span class="string">&#x27;我家&#x27;</span>,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                <span class="function"><span class="title">showInfo1</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(event.target.innerText);</span><br><span class="line">                    alert(<span class="string">&quot;你好啊1~&quot;</span>);</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="function"><span class="title">showInfo2</span>(<span class="params">event,number</span>)</span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(event);</span><br><span class="line">                    <span class="built_in">console</span>.log(number);</span><br><span class="line">                    alert(<span class="string">&quot;你好啊2~&quot;</span>+number);</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="function"><span class="title">showInfo</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">                    <span class="comment">// if(event.keyCode !== 13) return  </span></span><br><span class="line">                    <span class="built_in">console</span>.log(event.target.value);</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<p>并且还有可以在事件后面添加修饰符</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- <span class="number">1.</span>prevent阻止跳转</span><br><span class="line">            <span class="number">2.</span>stop阻止事件冒泡(事件向上传递)</span><br><span class="line">            <span class="number">3.</span>once事件只触发一次</span><br><span class="line">            <span class="number">4.</span>capture使用事件的捕获模式(以由外向内执行事件)</span><br><span class="line">            <span class="number">5.</span>self只有event.target是当前操作的元素才会触发事件</span><br><span class="line">            <span class="number">6.</span>passive事件的默认行为立即执行，无需等待事件回调执行完毕</span><br><span class="line">       --&gt;</span><br><span class="line">       &lt;a href=<span class="string">&quot;http://www.baidu.com&quot;</span> @click.prevent=<span class="string">&quot;showInfo&quot;</span>&gt;点击超链接咯&lt;/a&gt;</span><br><span class="line">       &lt;div @click=<span class="string">&quot;showInfo&quot;</span>&gt;</span><br><span class="line">           &lt;button @click.stop=<span class="string">&quot;showInfo&quot;</span>&gt;点我提示信息&lt;/button&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">       &lt;button @click.once=<span class="string">&quot;showInfo&quot;</span>&gt;点我提示信息&lt;/button&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>v-if/v-else-if/v-else：判断是否满足条件，不满足则不会渲染该元素及其子元素</p>
</li>
<li><p>v-show：判断是否满足条件进行隐藏展示,适合多次频繁切换</p>
</li>
<li><p>v-model：进行表单数据的双向绑定 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- v-model结合radio --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- v-model结合checkbox --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;篮球&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span>篮球</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;足球&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span>足球</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;乒乓球&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span>乒乓球</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;羽毛球&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span>羽毛球</span><br><span class="line"><span class="comment">&lt;!-- v-model结合select --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择校区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;beijing&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;shenzhen&quot;</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;wuhan&quot;</span>&gt;</span>武汉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>修饰符：</p>
<ul>
<li>lazy：可以让数据在失去焦点或者回车时才会更新</li>
<li>number：可以让在输入的内容自动转成数字类型</li>
<li>trim：可以过滤左右两边的空格</li>
</ul>
</li>
</ul>
<h4 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h4><p>有的情况下，你仍然需要对普通 DOM 元素进行底层操作，这时候就会用到自定义指令。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用自定义指令 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>放大后的n值是:<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-big</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-fbind:value</span>=<span class="string">&quot;n&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--定义指令 --&gt;</span></span><br><span class="line">directives:&#123;</span><br><span class="line">	big(element,binding)&#123; //简写方式只会在 bind 和 update 时触发相同行为</span><br><span class="line">		element.innerText = binding.value*10</span><br><span class="line">	&#125;,</span><br><span class="line">	fbind:&#123;</span><br><span class="line">        //指令和元素成功绑定时</span><br><span class="line">        bind(element,binding)&#123;</span><br><span class="line">        	element.value = binding.value;</span><br><span class="line">		&#125;,</span><br><span class="line">        //指令所在元素被插入页面时</span><br><span class="line">        insert(element,binding)&#123;</span><br><span class="line">            element.focus();  </span><br><span class="line">        &#125;,</span><br><span class="line">        //指令所在的模板被重新解析时</span><br><span class="line">        update(element,binding)&#123;</span><br><span class="line">            element.value = binding.value;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="相关的钩子函数"><a href="#相关的钩子函数" class="headerlink" title="相关的钩子函数"></a>相关的钩子函数</h5><ul>
<li><p><code>bind</code>：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。</p>
</li>
<li><p><code>inserted</code>：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。</p>
</li>
<li><p><code>update</code>：所在组件的 VNode 更新时调用，<strong>但是可能发生在其子 VNode 更新之前</strong>。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新 (详细的钩子函数参数见下)。</p>
</li>
<li><p><code>componentUpdated</code>：指令所在组件的 VNode <strong>及其子 VNode</strong> 全部更新后调用。</p>
</li>
<li><p><code>unbind</code>：只调用一次，指令与元素解绑时调用。</p>
</li>
</ul>
<h5 id="钩子函数参数"><a href="#钩子函数参数" class="headerlink" title="钩子函数参数"></a>钩子函数参数</h5><p>指令钩子函数会被传入以下参数：</p>
<ul>
<li><code>el</code>：指令所绑定的元素，可以用来直接操作 DOM。</li>
<li><code>binding</code>：一个对象，包含以下 property：<ul>
<li><code>name</code>：指令名，不包括 <code>v-</code> 前缀。</li>
<li><code>value</code>：指令的绑定值。</li>
<li><code>oldValue</code>：指令绑定的前一个值，仅在 <strong>update</strong>和 <strong>componentUpdated</strong> 钩子中可用。无论值是否改变都可用。</li>
<li><code>expression</code>：字符串形式的指令表达式。</li>
<li><code>arg</code>：传给指令的参数，可选。例如 <code>v-my-directive:foo</code> 中，参数为 <code>&quot;foo&quot;</code>。</li>
<li><code>modifiers</code>：一个包含修饰符的对象。例如：<code>v-my-directive.foo.bar</code> 中，修饰符对象为 <code>&#123; foo: true, bar: true &#125;</code>。</li>
</ul>
</li>
<li><code>vnode</code>：Vue 编译生成的虚拟节点。</li>
<li><code>oldVnode</code>：上一个虚拟节点，仅在 <strong>update</strong>和 <strong>componentUpdated</strong> 钩子中可用。</li>
</ul>
<blockquote>
<p>除了 <code>el</code> 之外，其它参数都应该是只读的，切勿进行修改。</p>
</blockquote>
<h5 id="动态指令参数"><a href="#动态指令参数" class="headerlink" title="动态指令参数"></a>动态指令参数</h5><p>指令的参数可以是动态的。例如，在 <code>v-mydirective:[argument]=&quot;value&quot;</code> 中，<code>argument</code> 参数可以根据组件实例数据进行更新！并且可以通过<code>binding.arg</code>获取</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vuex</title>
    <url>/2022/09/13/Vuex/</url>
    <content><![CDATA[<h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><ol>
<li><p>概念：</p>
<p>专门在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。</p>
</li>
<li><p>使用场景：共享数据</p>
<ol>
<li>多个组件依赖同一状态</li>
<li>来自不同组件的行为需要变更同一状态</li>
</ol>
</li>
<li><p>原理图：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://blogpic-1305209282.cos.ap-chengdu.myqcloud.com/img/image-20220417110641002.png" alt="image-20220417110641002"></p>
<p>vuex由三个部分组成：Actions、Mutations、State，并统一由store来管理</p>
<p>Actions：接收Vue Components 对共享数据的操作并commit给Mutations（还有一个很重要的作用是可以只接收操作，但是数据可以在Actions中向后端请求或者有一定的业务逻辑）</p>
<p>Mutations：按照Actions提交的操作对共享数据进行相应具体的操作（同样允许Vue Components直接调用commit越过Mutations）</p>
<p>State：存储共享数据</p>
</li>
</ol>
<h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><ul>
<li><p>安装vuex：npm i vuex (如果是vue2 只能安装npm i vuex@3)</p>
</li>
<li><p>创建store来管理vuex的三个主要对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在main.js中引入store 因为js名叫index所以可以省略</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">	el:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">	render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">	store,</span><br><span class="line">	<span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		Vue.prototype.$bus = <span class="built_in">this</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>src中store文件夹中的index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该文件用于创建Vuex中最为核心的store</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//应用Vuex插件</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备actions——用于响应组件中的动作，可以用于异步操作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">	<span class="function"><span class="title">add</span>(<span class="params">context,value</span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&#x27;actions中的add被调用了&#x27;</span>)</span><br><span class="line">		context.commit(<span class="string">&#x27;ADD&#x27;</span>,value)</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="function"><span class="title">sub</span>(<span class="params">context,value</span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&#x27;actions中的sub被调用了&#x27;</span>)</span><br><span class="line">		context.commit(<span class="string">&#x27;SUB&#x27;</span>,value)</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="function"><span class="title">addOdd</span>(<span class="params">context,value</span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&#x27;actions中的addOdd被调用了&#x27;</span>)</span><br><span class="line">		<span class="keyword">if</span>(context.state.sum % <span class="number">2</span>)&#123;</span><br><span class="line">			context.commit(<span class="string">&#x27;ADD&#x27;</span>,value)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="function"><span class="title">addWait</span>(<span class="params">context,value</span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&#x27;actions中的addWait被调用了&#x27;</span>)</span><br><span class="line">		<span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">			context.commit(<span class="string">&#x27;ADD&#x27;</span>,value)</span><br><span class="line">		&#125;,<span class="number">500</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//准备mutations——用于操作数据（state）并且必须是同步方法</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">	<span class="function"><span class="title">ADD</span>(<span class="params">state,value</span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&#x27;mutations中的ADD被调用了&#x27;</span>)</span><br><span class="line">		state.sum += value</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="function"><span class="title">SUB</span>(<span class="params">state,value</span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&#x27;mutations中的SUB被调用了&#x27;</span>)</span><br><span class="line">		state.sum -= value</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//准备state——用于存储数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">	sum:<span class="number">0</span> <span class="comment">//当前的和</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备getters——用于将state中的数据进行加工</span></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">	<span class="function"><span class="title">bigSum</span>(<span class="params">state</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> state.sum*<span class="number">10</span></span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//可以直接获取getters的数据再加工</span></span><br><span class="line">    <span class="function"><span class="title">bigSum2</span>(<span class="params">state,getters</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> getters.bigSum*<span class="number">10</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//可以通过函数获取组件调用getters传来的参数</span></span><br><span class="line">	<span class="function"><span class="title">bigSum3</span>(<span class="params">state</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">num</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> state.sum*num</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">	actions,</span><br><span class="line">	mutations,</span><br><span class="line">	state,</span><br><span class="line">	getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>使用vuex:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;当前求和为：&#123;&#123;$store.state.sum&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;h3&gt;当前求和放大10倍为：&#123;&#123;$store.getters.bigSum&#125;&#125;&lt;&#x2F;h3&gt;</span><br><span class="line">methods: &#123;</span><br><span class="line">    increment()&#123;</span><br><span class="line">    this.$store.commit(&#39;ADD&#39;,this.n)</span><br><span class="line">    &#125;,</span><br><span class="line">    decrement()&#123;</span><br><span class="line">    this.$store.commit(&#39;SUB&#39;,this.n)</span><br><span class="line">    &#125;,</span><br><span class="line">    incrementOdd()&#123;</span><br><span class="line">    this.$store.dispatch(&#39;addOdd&#39;,this.n)</span><br><span class="line">    &#125;,</span><br><span class="line">    incrementWait()&#123;</span><br><span class="line">    this.$store.dispatch(&#39;addWait&#39;,this.n)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<blockquote>
<h4 id="mapState、mapGetters、mapActions、mapMutaions"><a href="#mapState、mapGetters、mapActions、mapMutaions" class="headerlink" title="mapState、mapGetters、mapActions、mapMutaions"></a>mapState、mapGetters、mapActions、mapMutaions</h4></blockquote>
<p>作用：自动生成相关属性，用于简化模板语法</p>
<p>用法：写在各个组件的计算属性中</p>
<ul>
<li>mapState</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//借助mapState生成计算属性，从state中读取数据。（对象写法）</span></span><br><span class="line">...mapState(&#123;<span class="attr">he</span>:<span class="string">&#x27;sum&#x27;</span>,<span class="attr">xuexiao</span>:<span class="string">&#x27;school&#x27;</span>,<span class="attr">xueke</span>:<span class="string">&#x27;subject&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line"><span class="comment">//借助mapState生成计算属性，从state中读取数据。（数组写法，但必须与属性名一致）</span></span><br><span class="line">...mapState([<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br></pre></td></tr></table></figure>
<ul>
<li>mapGetters</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//借助mapGetters生成计算属性，从getters中读取数据。（对象写法）</span></span><br><span class="line">...mapGetters(&#123;<span class="attr">bigSum</span>:<span class="string">&#x27;bigSum&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//借助mapGetters生成计算属性，从getters中读取数据。（数组写法）</span></span><br><span class="line">...mapGetters([<span class="string">&#x27;bigSum&#x27;</span>])</span><br></pre></td></tr></table></figure>
<ul>
<li>mapActions（注意使用方法时需要带相应的参数）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//借助mapActions生成对应的方法，方法中会调用dispatch去联系actions(对象写法)</span></span><br><span class="line">...mapActions(&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//借助mapActions生成对应的方法，方法中会调用dispatch去联系actions(数组写法)</span></span><br><span class="line"> ...mapActions([<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="string">&#x27;jiaWait&#x27;</span>])</span><br></pre></td></tr></table></figure>
<ul>
<li>mapMutations（注意使用方法时需要带相应的参数）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//借助mapMutations生成对应的方法，方法中会调用commit去联系mutations(对象写法)</span></span><br><span class="line">...mapMutations(&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line"><span class="comment">//借助mapMutations生成对应的方法，方法中会调用commit去联系mutations(数组写法)</span></span><br><span class="line">...mapMutations([<span class="string">&#x27;JIA&#x27;</span>,<span class="string">&#x27;JIAN&#x27;</span>]),</span><br></pre></td></tr></table></figure>
<h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3></li>
</ul>
<p>Vue使用单一状态树,那么也意味着很多状态都会交给Vuex来管理.当应用变得非常复杂时,store对象就有可能变得相当臃肿.为了解决这个问题, Vuex允许我们将store分割成模块(Module),而每个模块拥有自己的state、mutations、actions、getters等</p>
<ol>
<li>模块化的定义：</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">    state:&#123;...&#125;,</span><br><span class="line">    mutations:&#123;...&#125;,</span><br><span class="line">    actions:&#123;...&#125;,</span><br><span class="line">    getters:&#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">    state:&#123;...&#125;,</span><br><span class="line">    mutations:&#123;...&#125;,</span><br><span class="line">    actions:&#123;...&#125;,</span><br><span class="line">    getters:&#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line">             </span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    modules:&#123;</span><br><span class="line">          a:moduleA,</span><br><span class="line">          b:moduleB</span><br><span class="line">    &#125;         </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>模块化使用：</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取模块中的state</span></span><br><span class="line"><span class="comment">//1.直接获取</span></span><br><span class="line"><span class="built_in">this</span>.$store.state.a.属性名</span><br><span class="line"><span class="comment">//2.用mapstate,但是必须给每个模块配置namespaced:true</span></span><br><span class="line">...mapState(<span class="string">&#x27;a&#x27;</span>,[<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>])</span><br><span class="line"><span class="comment">//获取模块中的getters</span></span><br><span class="line"><span class="comment">//1.直接获取</span></span><br><span class="line"><span class="built_in">this</span>.$store.getters[<span class="string">&#x27;a/bigSum&#x27;</span>]</span><br><span class="line"><span class="comment">//2.mapGetters,但是必须给每个模块配置namespaced:true</span></span><br><span class="line">...mapGetters(<span class="string">&#x27;a&#x27;</span>,[<span class="string">&#x27;bigSum&#x27;</span>])</span><br><span class="line"><span class="comment">//获取模块中的actions</span></span><br><span class="line"><span class="comment">//1.直接获取</span></span><br><span class="line"><span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;模块名/addOdd&#x27;</span>,<span class="built_in">this</span>.n)</span><br><span class="line"><span class="comment">//2.mapActions,但是必须给每个模块配置namespaced:true</span></span><br><span class="line">...mapActions(<span class="string">&#x27;a&#x27;</span>,[<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="string">&#x27;jiaWait&#x27;</span>])</span><br><span class="line"><span class="comment">//获取模块中的mutations</span></span><br><span class="line"><span class="comment">//1.直接获取</span></span><br><span class="line"><span class="built_in">this</span>.$store.commit(<span class="string">&#x27;模块名/ADD&#x27;</span>,<span class="built_in">this</span>.n)</span><br><span class="line"><span class="comment">//2.mapMutations,但是必须给每个模块配置namespaced:true</span></span><br><span class="line">...mapMutations(<span class="string">&#x27;a&#x27;</span>,[<span class="string">&#x27;JIA&#x27;</span>,<span class="string">&#x27;JIAN&#x27;</span>])</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue响应式方法</title>
    <url>/2022/09/09/Vue%E5%93%8D%E5%BA%94%E5%BC%8F%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="Vue响应式"><a href="#Vue响应式" class="headerlink" title="Vue响应式"></a>Vue响应式</h1><h4 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h4><p>响应式的效果就是，数据驱动视图。只用按照普通的语法，改变一个数据，相应的视图就自动更新。保证试图中的数据与组件中的数据同步。</p>
<h4 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h4><ol>
<li><p>通过Object.defineProperty来实现监听数据的改变和读取（属性中的getter和setter⽅法） 实现数据劫持</p>
</li>
<li><p>观察者模式（发布者-订阅者）</p>
<ul>
<li>观察者(订阅者) – Watcher：<br>update()：当事件发⽣时，具体要做的事情</li>
<li>目标(发布者) – Dep:<br>①subs 数组：存储所有的观察者<br>②addSub()：添加观察者<br>③notify()：当事件发⽣，调⽤所有观察者的 update() 方法 </li>
</ul>
</li>
<li><p>当数据发⽣改变通过发布者订阅者模式来进行通知进行界面刷新</p>
</li>
</ol>
<h2 id="具体响应式方法"><a href="#具体响应式方法" class="headerlink" title="具体响应式方法"></a>具体响应式方法</h2><h3 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h3><ul>
<li>push()：该方法是在数组最后添加数据，并返回数组长度</li>
<li>pop()：删除最后一个元素，并返回删除的元素值</li>
<li>shift()：删除数组的第一个元素，返回第一个删除的值</li>
<li>unshift()：向数组开头添加元素，返回数组长度</li>
<li>reverse()：翻转数组</li>
<li>sort(function(a,b){return a-b})：数组排序升序/b-a降序</li>
<li>splice(index,howmany,arr1,arr2…) ：用于添加或删除数组中的元素。从index位置开始删除howmany个元素，并将arr1、arr2…数据从index位置依次插入。howmany为0时，则不删除元素。<br>原数组改变。</li>
</ul>
<h3 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h3><ul>
<li>Vue.set(对象,’属性’,’属性值’)：为对象动态添加属性</li>
<li>Vue.delete(对象,’属性值’)：动态的删除对象的属性</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue异步请求</title>
    <url>/2022/09/10/Vue%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<h3 id="Vue发送异步请求"><a href="#Vue发送异步请求" class="headerlink" title="Vue发送异步请求"></a>Vue发送异步请求</h3><ul>
<li><p>使用axios发送（常用）</p>
<ul>
<li><p>安装axios：npm i axios</p>
</li>
<li><p>引入axios：import axios from ‘axios’</p>
</li>
<li><p>发送请求：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.get(<span class="string">&#x27;http://localhost:5000/students&#x27;</span>).then(</span><br><span class="line">          response =&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;请求成功了&#x27;</span>,response.data)</span><br><span class="line">          &#125;,</span><br><span class="line">          error =&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;请求失败了&#x27;</span>,error.message)</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>使用vue-resource发送</p>
<ul>
<li><p>安装vue-resource：npm i vue-resource</p>
</li>
<li><p>使用该插件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入插件</span></span><br><span class="line"><span class="keyword">import</span> vueResource <span class="keyword">from</span> <span class="string">&#x27;vue-resource&#x27;</span></span><br><span class="line"><span class="comment">//使用插件</span></span><br><span class="line">Vue.use(vueResource)</span><br></pre></td></tr></table></figure></li>
<li><p>发送请求：(跟axios一样)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$http.get(<span class="string">`https://api.github.com/search/users?q=<span class="subst">$&#123;<span class="built_in">this</span>.keyWord&#125;</span>`</span>).then(</span><br><span class="line">					response =&gt; &#123;</span><br><span class="line">						<span class="built_in">console</span>.log(<span class="string">&#x27;请求成功了&#x27;</span>)</span><br><span class="line">						<span class="comment">//请求成功后更新List的数据</span></span><br><span class="line">						<span class="built_in">this</span>.$bus.$emit(<span class="string">&#x27;updateListData&#x27;</span>,&#123;<span class="attr">isLoading</span>:<span class="literal">false</span>,<span class="attr">errMsg</span>:<span class="string">&#x27;&#x27;</span>,<span class="attr">users</span>:response.data.items&#125;)</span><br><span class="line">					&#125;,</span><br><span class="line">					error =&gt; &#123;</span><br><span class="line">						<span class="comment">//请求后更新List的数据</span></span><br><span class="line">						<span class="built_in">this</span>.$bus.$emit(<span class="string">&#x27;updateListData&#x27;</span>,&#123;<span class="attr">isLoading</span>:<span class="literal">false</span>,<span class="attr">errMsg</span>:error.message,<span class="attr">users</span>:[]&#125;)</span><br><span class="line">					&#125;</span><br><span class="line">				)</span><br></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ul>
<h4 id="解决跨域请求"><a href="#解决跨域请求" class="headerlink" title="解决跨域请求"></a>解决跨域请求</h4><ol>
<li>cors（由后端处理，带一个响应头出来让浏览器知道允许该请求带走数据）</li>
<li>jsonp（只能解决get请求，而且需要前后端都操作）</li>
<li>配置代理服务器（实现方式有：1.nginx 2. vue-cli）</li>
</ol>
<h5 id="Vue-cli配置代理"><a href="#Vue-cli配置代理" class="headerlink" title="Vue-cli配置代理"></a>Vue-cli配置代理</h5><p>利用代理服务器来解决跨域问题，让代理服务器与前端保持同源，然后代理服务器直接与后端服务器交互（不受同源策略约束）</p>
<h6 id="实现方式1："><a href="#实现方式1：" class="headerlink" title="实现方式1："></a>实现方式1：</h6><ol>
<li><p>修改vue-cli的全局配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;配置开启中间代理服务器（并指定该服务器与后端哪个服务器交互）</span><br><span class="line">&#x2F;&#x2F;并且只有当请求的资源代理服务器中没有时才会与后端服务器交互（一定要防止代理服务器顶替了需要向后端请求的资源）</span><br><span class="line">&#x2F;&#x2F;所以不太灵活</span><br><span class="line">devServer:&#123;</span><br><span class="line">    proxy:&#39;http:&#x2F;&#x2F;localhost:5000&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>重启vue-cli</p>
</li>
<li><p>重新发送请求(注意端口是自己前端服务器的端口)</p>
</li>
</ol>
<h6 id="实现方式2："><a href="#实现方式2：" class="headerlink" title="实现方式2："></a>实现方式2：</h6><ol>
<li><p>修改vue-cli的全局配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;&#39;&#x2F;api&#39;请求前缀跟在端口号后面，如果请求带了该前缀表示需要向后端请求 并且可以配置多个前缀</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      &#39;&#x2F;api&#39;: &#123;</span><br><span class="line">        target: &#39;http:&#x2F;&#x2F;localhost:5000&#39;, </span><br><span class="line">        pathRewrite:&#123;&#39;^&#x2F;api&#39;:&#39;&#39;&#125;, &#x2F;&#x2F;清除请求前缀</span><br><span class="line">        ws: true,  &#x2F;&#x2F;用于支持websocket</span><br><span class="line">        changeOrigin: true &#x2F;&#x2F;是否谎报请求路径</span><br><span class="line">      &#125;,</span><br><span class="line">      &#39;&#x2F;demo&#39;: &#123;</span><br><span class="line">        target: &#39;http:&#x2F;&#x2F;localhost:5001&#39;, </span><br><span class="line">        pathRewrite:&#123;&#39;^&#x2F;demo&#39;:&#39;&#39;&#125;, &#x2F;&#x2F;清除请求前缀</span><br><span class="line">        ws: true,  &#x2F;&#x2F;用于支持websocket</span><br><span class="line">        changeOrigin: true &#x2F;&#x2F;是否谎报请求路径</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>重启vue-cli</p>
</li>
<li><p>重新发送请求(注意端口是自己前端服务器的端口，并且端口后面需要加代理前缀)</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>vue</tag>
        <tag>组件化</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery</title>
    <url>/2022/08/17/jQuery/</url>
    <content><![CDATA[<h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><h2 id="Dom和jQuery对象的转换"><a href="#Dom和jQuery对象的转换" class="headerlink" title="Dom和jQuery对象的转换"></a>Dom和jQuery对象的转换</h2><ul>
<li>DOM-jQuery：$(DOM对象)</li>
<li>jQuery-DOM：$(“div”)[index]/$(“div”).get(index)</li>
</ul>
<h2 id="常用选择器"><a href="#常用选择器" class="headerlink" title="常用选择器"></a>常用选择器</h2><ul>
<li><p>#id：获取指定id的元素</p>
</li>
<li><p>*：所有元素</p>
</li>
<li><p>.class：获取同一个class的元素</p>
</li>
<li><p>div：同标签元素</p>
</li>
<li><p>div,p,li：多个元素</p>
</li>
<li><p>li.current：交集元素</p>
</li>
<li><p>ul&gt;li：子代选择</p>
</li>
<li><p>ul li：后代选择</p>
</li>
<li><p>:first：第一个元素</p>
</li>
<li><p>:last：最后一个</p>
</li>
<li><p>:eq(index)：第几个元素从0开始</p>
</li>
<li><p>:odd：索引为奇数的元素</p>
</li>
<li><p>:even：索引号为偶数的元素</p>
</li>
<li><p>parent()：获取父级</p>
</li>
<li><p>children(selector)：最近的儿子</p>
</li>
<li><p>find(selector)：后代选择</p>
</li>
<li><p>siblings(selector)：兄弟节点</p>
</li>
<li><p>nextAll([expr])：该元素之后的同辈元素</p>
</li>
<li><p>prevtAll([expr])：该元素之前的同辈元素</p>
</li>
<li><p>hasClass(class)：指定类的元素</p>
</li>
<li><p>eq(index)：index位的元素</p>
</li>
</ul>
<h2 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h2><ul>
<li><p>$(“div”).css(“属性名”,“属性值”);</p>
</li>
<li><p>addClass()：添加类名</p>
</li>
<li><p>removeClass()：移除类名</p>
</li>
<li><p>toggleClass()：切换类，若存在该类名去掉，没有加上</p>
</li>
<li><p>show(speed,easing,fn)：显示</p>
</li>
<li><p>hide()：隐藏</p>
</li>
<li><p>toggle()：切换</p>
</li>
<li><p>slideDown()：滑动</p>
</li>
<li><p>slideup()：滑动</p>
</li>
<li><p>slideToggle()：滑动</p>
</li>
<li><p>fadeIn():淡入淡出</p>
</li>
<li><p>fadeOut():淡入淡出</p>
</li>
<li><p>fadeToggle():淡入淡出</p>
</li>
<li><p>fadeTo():淡入淡出</p>
</li>
<li><p>animate()：自定义动画</p>
</li>
<li><p>prop()：获取标签自身属性值</p>
</li>
<li><p>attr()：获取自定义属性</p>
</li>
<li><p>text()：文本内容</p>
</li>
<li><p>html()：元素内容</p>
</li>
<li><p>val()：获取value值</p>
</li>
<li><p>each(function(index,domEle){})：遍历元素</p>
</li>
<li><p>$(“<li></li>“)：创建标签</p>
</li>
<li><p>remove()：删除自身</p>
</li>
<li><p>empty()：清空子节点</p>
</li>
<li><p>html(“”)：清空元素内容</p>
</li>
<li><p>width()/height()：宽度/高度</p>
</li>
<li><p>innerWidth()/innerHeight()：宽度/高度包含padding</p>
</li>
<li><p>outerWidth()/outerHeight()：宽度/高度包含padding、border</p>
</li>
<li><p>outerWidth(true)/outerHeight(true)：宽度/高度包含padding、border、margin</p>
</li>
<li><p>offset()：相对文档的偏移坐标，返回obj，有left/top属性，可以设置</p>
</li>
<li><p>postion()：距离带有定位的父亲节点的坐标对象，不能设置</p>
</li>
<li><p>scrollTop()/scrollLeft()：被卷去的距离</p>
</li>
<li><p>on({click:function(){}})：绑定多个事件</p>
</li>
<li><p>off(“事件名”)：解绑事件</p>
</li>
<li><p>one(“click”,function(){})：执行一次事件</p>
</li>
<li><p>元素.事件：手动触发事件</p>
</li>
<li><p>trigger(“事件名”)：手动触发事件</p>
</li>
<li><p>triggerHandler(“事件名”)：手动触发事件不触发默认行为</p>
</li>
<li><p>$.extend(targetObj,obj)：对象拷贝</p>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql命令大全</title>
    <url>/2021/02/24/mysql%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h1 id="mysql命令大全"><a href="#mysql命令大全" class="headerlink" title="mysql命令大全"></a>mysql命令大全</h1><h2 id="一、简单命令"><a href="#一、简单命令" class="headerlink" title="一、简单命令"></a>一、简单命令</h2><h3 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1.创建数据库"></a>1.创建数据库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database my_database;</span><br><span class="line">-- charset 字符集 collation 校对集</span><br></pre></td></tr></table></figure>
<h3 id="2-显示数据库"><a href="#2-显示数据库" class="headerlink" title="2.显示数据库"></a>2.显示数据库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure>
<h3 id="3-显示当前在哪个数据库"><a href="#3-显示当前在哪个数据库" class="headerlink" title="3.显示当前在哪个数据库"></a>3.显示当前在哪个数据库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select database();</span><br></pre></td></tr></table></figure>
<h3 id="4-显示部分数据库"><a href="#4-显示部分数据库" class="headerlink" title="4.显示部分数据库"></a>4.显示部分数据库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show databases like&#39;my%&#39;;</span><br><span class="line">-- 匹配模式:</span><br><span class="line">--   %为多个未知字符，_为单个未知字符</span><br></pre></td></tr></table></figure>
<h3 id="5-显示数据库创建语句"><a href="#5-显示数据库创建语句" class="headerlink" title="5.显示数据库创建语句"></a>5.显示数据库创建语句</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show create database mydatabase;</span><br></pre></td></tr></table></figure>
<h3 id="6-进去数据库"><a href="#6-进去数据库" class="headerlink" title="6.进去数据库"></a>6.进去数据库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- use 数据库名</span><br><span class="line">-- 出现Database changed表示已经进入指定数据库</span><br><span class="line">use mydatabase;</span><br></pre></td></tr></table></figure>
<h3 id="7-修改数据库"><a href="#7-修改数据库" class="headerlink" title="7.修改数据库"></a>7.修改数据库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- alter 数据库名 ...</span><br><span class="line">alter mydatabase;</span><br></pre></td></tr></table></figure>
<h3 id="8-修改数据库字符集"><a href="#8-修改数据库字符集" class="headerlink" title="8.修改数据库字符集"></a>8.修改数据库字符集</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter database mydatabase charset utf-8;</span><br></pre></td></tr></table></figure>
<h3 id="9-删除数据库"><a href="#9-删除数据库" class="headerlink" title="9.删除数据库"></a>9.删除数据库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- (删除前确保数据库中的数据不会被用到)</span><br><span class="line">-- drop database 数据库名</span><br><span class="line">drop database mydatabase;</span><br></pre></td></tr></table></figure>
<h3 id="10-创建数据表"><a href="#10-创建数据表" class="headerlink" title="10.创建数据表"></a>10.创建数据表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- create table 表名(字段名 字段类型[字段属性],....)[表选项];</span><br><span class="line">-- 表选项 Engine: 存储引擎  Charset: 字符集  Collate: 校对集</span><br><span class="line">-- 这里可以先使用use 数据库 ，也可以在表名前加 数据库.</span><br><span class="line">create table class (</span><br><span class="line">	name varchar(10)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h3 id="11-创建结果一样的表"><a href="#11-创建结果一样的表" class="headerlink" title="11.创建结果一样的表"></a>11.创建结果一样的表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table 表名 like 已有表的表名;&#x2F;&#x2F;可以复制其他数据库的表  like XX.XXX</span><br></pre></td></tr></table></figure>
<h3 id="12-显示所有表"><a href="#12-显示所有表" class="headerlink" title="12.显示所有表"></a>12.显示所有表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure>
<h3 id="13-显示部分表"><a href="#13-显示部分表" class="headerlink" title="13.显示部分表"></a>13.显示部分表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show tables like&#39;my%&#39;;</span><br></pre></td></tr></table></figure>
<h3 id="14-查看表结构"><a href="#14-查看表结构" class="headerlink" title="14.查看表结构"></a>14.查看表结构</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">desc 表名</span><br><span class="line">show columns from 表名</span><br></pre></td></tr></table></figure>
<h3 id="15-查看表创建语句"><a href="#15-查看表创建语句" class="headerlink" title="15.查看表创建语句"></a>15.查看表创建语句</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show create table 表名;</span><br><span class="line">-- ; \g \G是结束符 \G更直观显示</span><br></pre></td></tr></table></figure>
<h3 id="16-修改表名"><a href="#16-修改表名" class="headerlink" title="16.修改表名"></a>16.修改表名</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rename table 表名 to 新表名;</span><br></pre></td></tr></table></figure>
<h3 id="17-修改表选项"><a href="#17-修改表选项" class="headerlink" title="17.修改表选项"></a>17.修改表选项</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table 表名 表选项 [&#x3D;]新值</span><br></pre></td></tr></table></figure>
<h3 id="18-增加字段"><a href="#18-增加字段" class="headerlink" title="18.增加字段"></a>18.增加字段</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table 表名 add column &#96;字段&#96; 字段属性(int...);&#x2F;*  注意&#96;&#96;必须加*&#x2F;</span><br></pre></td></tr></table></figure>

<h3 id="19-修改字段名"><a href="#19-修改字段名" class="headerlink" title="19.修改字段名"></a>19.修改字段名</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table 表名 change 旧字段名 新字段名 字段属性;</span><br></pre></td></tr></table></figure>
<h3 id="20-修改字段属性"><a href="#20-修改字段属性" class="headerlink" title="20.修改字段属性"></a>20.修改字段属性</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table 表名 modify 字段名 字段新属性;</span><br></pre></td></tr></table></figure>
<h3 id="21-删除字段"><a href="#21-删除字段" class="headerlink" title="21.删除字段"></a>21.删除字段</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table 表名 drop 字段名;</span><br></pre></td></tr></table></figure>
<h3 id="22-删除表"><a href="#22-删除表" class="headerlink" title="22.删除表"></a>22.删除表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop table 表名[1,2....]--可多个</span><br></pre></td></tr></table></figure>
<h3 id="23-插入数据"><a href="#23-插入数据" class="headerlink" title="23.插入数据"></a>23.插入数据</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into 表名[(字段列表)] values(对应字段列表)</span><br><span class="line">insert into 表名 values(对应字段列表)</span><br></pre></td></tr></table></figure>
<h3 id="24-查询数据"><a href="#24-查询数据" class="headerlink" title="24.查询数据"></a>24.查询数据</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from 表名</span><br><span class="line">select 字段 from 表名</span><br><span class="line">select 字段 from 表名 where 字段名&#x3D;值</span><br></pre></td></tr></table></figure>
<h3 id="25-删除数据"><a href="#25-删除数据" class="headerlink" title="25.删除数据"></a>25.删除数据</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delete from 表名 [where 条件];&#x2F;*如果没有where条件，系统会自动删除表中所有数据*&#x2F;</span><br></pre></td></tr></table></figure>
<h3 id="26-修改数据"><a href="#26-修改数据" class="headerlink" title="26.修改数据"></a>26.修改数据</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update 表名 set 字段名 &#x3D; 新值 [where 条件] &#x2F;*如果没有where条件，系统会修改那个字段的所有值*&#x2F;</span><br></pre></td></tr></table></figure>
<h3 id="27-字符集"><a href="#27-字符集" class="headerlink" title="27.字符集"></a>27.字符集</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set names gbk;</span><br><span class="line">-- 修改字符集</span><br><span class="line">set 系统名 &#x3D; 字符集(gbk)</span><br></pre></td></tr></table></figure>
<h3 id="28-查看系统保存的三种关系处理字符集"><a href="#28-查看系统保存的三种关系处理字符集" class="headerlink" title="28.查看系统保存的三种关系处理字符集"></a>28.查看系统保存的三种关系处理字符集</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show variables like &#39;character_set%&#39;;</span><br></pre></td></tr></table></figure>
<h3 id="29-mysql备份"><a href="#29-mysql备份" class="headerlink" title="29.mysql备份"></a>29.mysql备份</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- SQL备份</span><br><span class="line">mysqldump -u -p 数据库[表1 [表二]] &gt; 备份文件地址</span><br><span class="line">-- 如：mysqldump.exe -hlocalhost -P3306 -uroot -proot mydatabase &gt; C:&#x2F;server</span><br><span class="line">-- 数据还原</span><br><span class="line">mysql.exe -u-p 数据库 &lt;文件位置 </span><br><span class="line">source SQL 文件位置</span><br><span class="line">-- 如：mysql -hlocalhost -P3306 -uroot -proot mydatabase &lt; C:&#x2F;server</span><br></pre></td></tr></table></figure>




<h2 id="二、查询语句"><a href="#二、查询语句" class="headerlink" title="二、查询语句"></a>二、查询语句</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">完整语句：</span><br><span class="line">select select选项 字段列表 from 数据表 where 条件 group by 分组 having 条件</span><br><span class="line">order by 排序 limit 限制</span><br><span class="line">--select选项 </span><br><span class="line">all &#x2F;*默认&#x3D; * *&#x2F;</span><br><span class="line">distinct &#x2F;*去重*&#x2F;</span><br><span class="line">--动态数据</span><br><span class="line">select from (select 字段列表 from 表) as 别名;</span><br><span class="line"></span><br><span class="line">--where</span><br><span class="line">where 条件</span><br><span class="line">where 字段 between 数值 and 数值</span><br><span class="line">--逻辑</span><br><span class="line">and</span><br><span class="line">or</span><br><span class="line">in(值,值,..)</span><br><span class="line">is null&#x2F;is not null&#x2F;*判断是否为空*&#x2F;</span><br><span class="line">like &quot;匹配模式&quot;&#x2F;* _单个字符 %多个字符 *&#x2F;</span><br><span class="line"></span><br><span class="line">--group by</span><br><span class="line">group by 字段</span><br><span class="line">group by 字段1 [asc|desc],字段2 [asc|desc]...</span><br><span class="line">group by 字段 with rollup;&#x2F;*对分组进行统计汇总*&#x2F;</span><br><span class="line">count()</span><br><span class="line">avg()</span><br><span class="line">sum()</span><br><span class="line">max()</span><br><span class="line">min()</span><br><span class="line"></span><br><span class="line">--having条件</span><br><span class="line">group by 字段 having 条件&#x2F;*对分组后的数据进行再筛选*&#x2F;</span><br><span class="line">--order by排序</span><br><span class="line">order by 字段[asc|desc]&#x2F;*默认升序|降序 *&#x2F;</span><br><span class="line">order by 字段1 [asc|desc] 字段2 [asc|desc]....&#x2F;*可多字段排序先按第一个*&#x2F;</span><br><span class="line">--limit分页</span><br><span class="line">limit offset,length &#x2F;*offset偏移量 从哪开始,length具体取几条*&#x2F;</span><br><span class="line"></span><br><span class="line">--联合查询</span><br><span class="line">select 语句</span><br><span class="line">UNION [union选项]&#x2F;*all,默认distinct去重*&#x2F;</span><br><span class="line">select 语句;</span><br><span class="line">&#x2F;*联合查询的order by查询时需要将select语句()括起来</span><br><span class="line">还必须使用limit使用较大的值*&#x2F;</span><br><span class="line"></span><br><span class="line">--交叉连接&#x2F;*笛卡尔积无实际意义*&#x2F;</span><br><span class="line">select * from 表1 cross join 表2;</span><br><span class="line">--内连接&#x2F;*通常在对数据精确要求的地方使用*&#x2F;</span><br><span class="line">select * from 表1 [inner] join 表2 on 匹配条件&#x2F;*值1&#x3D;值2*&#x2F;;</span><br><span class="line"></span><br><span class="line">--外连接&#x2F;*主表记录必须保存若从表条件不匹配结果为null*&#x2F;</span><br><span class="line">主表 left join 从表 on 条件&#x2F;*左外连接 左边为主表*&#x2F;常用方式</span><br><span class="line">主表 right join 从表 on 条件&#x2F;*右外连接 右边为主表*&#x2F;</span><br><span class="line">--自然连接</span><br><span class="line">select *from 表1 natural join 表2</span><br><span class="line">--using关键字&#x2F;*用于替代on 效果如自然连接*&#x2F;</span><br><span class="line">表1 join 表2 using(同名字段列表);</span><br><span class="line">--子查询</span><br><span class="line">--where子查询</span><br><span class="line">--标量子查询</span><br><span class="line">select *from 表1 where 条件判断&#x3D;&#x2F;&lt;&gt;(select 字段名 from 表2 where 条件判断);</span><br><span class="line">--列子查询</span><br><span class="line">select 字段 from 表1 where 条件 in (select 字段名 from 表2)</span><br><span class="line">--行子查询</span><br><span class="line">&#x2F;*select * from my_student where (stu_age,stu_height)&#x3D;(select max(stu_age),max(stu_height)from my_student) *&#x2F;</span><br><span class="line">select 字段 from 表1 where 多字段条件&#x3D;(select 字段名 from 表2)</span><br><span class="line">--from子查询</span><br><span class="line">--表子查询</span><br><span class="line">select 字段列表 from (表子查询)as 别名 [where] [group by] [having] [order by] [limit];</span><br><span class="line">--exists子查询&#x2F;*返回0 或1 若返回1执行主查询*&#x2F;</span><br><span class="line">主查询语句 where exists子查询(查询语句);</span><br><span class="line">select  * from classes where cid in (select  cno from student where birthday&gt;&#39;1991-01-01&#39;);&#x2F;*查看生日大于**的学生的班级信息*&#x2F;</span><br></pre></td></tr></table></figure>


<h2 id="三、权限管理"><a href="#三、权限管理" class="headerlink" title="三、权限管理"></a>三、权限管理</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--创建用户</span><br><span class="line">create user 用户名 identified by &#39;明文密码&#39;;</span><br><span class="line">用户名：用户名@主机地址</span><br><span class="line">主机地址：&#39;&#x2F;%&#39;</span><br><span class="line">如：create user &#39;user1&#39;@&#39;%&#39; identified by &#39;1234&#39;;</span><br><span class="line">--简化创建</span><br><span class="line">create user user2;</span><br><span class="line">--删除用户</span><br><span class="line">drop user 用户名;</span><br><span class="line">--用户权限管理</span><br><span class="line">1.数据权限 增删查改(select\update\delete\insert)</span><br><span class="line">2.结构权限 结构操作(create\drop)</span><br><span class="line">3.管理权限 权限管理(create user\grant\revoke)</span><br><span class="line">--授予权限</span><br><span class="line">grant 权限列表 on 数据库.[.表名] to 用户名</span><br><span class="line">这里：可以单表数据库.表名 可以某个数据库 数据库.* 也可以整库 *.*</span><br><span class="line">权限列表： 用逗号隔开 all privileges</span><br><span class="line">--删除权限</span><br><span class="line">revoke 权限列表 on 数据库.[.表名] from 用户名</span><br><span class="line">--刷新权限</span><br><span class="line">flush privileges;</span><br><span class="line">--密码丢失找回</span><br><span class="line">1.停止服务 net stop mysql;</span><br><span class="line">2.mysqld --console --skip-grant-tables --shared-memory</span><br><span class="line">3.新开客服端 直接使用mysql进入</span><br><span class="line">4.修改密码 </span><br><span class="line">			update mysql.user set authentication_string&#x3D;&#39;&#39;  where user&#x3D;&#39;root&#39;;&#x2F;*设置无需密码登录*&#x2F;</span><br><span class="line">			ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123456&#39;;</span><br><span class="line">5.关闭mysqld</span><br></pre></td></tr></table></figure>


<h2 id="四、字段相关约束"><a href="#四、字段相关约束" class="headerlink" title="四、字段相关约束"></a>四、字段相关约束</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--字段属性 </span><br><span class="line">NULL属性&#x2F;*尽量不要让数据为空 *&#x2F;</span><br><span class="line">设置 NOT NULL</span><br><span class="line">Default默认值&#x2F;*不设置为null *&#x2F;</span><br><span class="line">设置default 值</span><br><span class="line">comment列描述&#x2F;*一种维护时的注释说明查看创建表语句可看*&#x2F;</span><br><span class="line">设置 comment&#39;字段描述&#39;</span><br><span class="line">--主键（1.不能为空 2.数据不能有任何重复）</span><br><span class="line">--分类 业务主键(学生id..) 逻辑主键 一般自增的整型</span><br><span class="line">primary key&#x2F;*在字段后添加*&#x2F;</span><br><span class="line">primary key(字段)</span><br><span class="line">alter table 表名 add primary key(字段)&#x2F;*表后添加*&#x2F;</span><br><span class="line">alter table 表名 drop primary key &#x2F;*删除主键*&#x2F;</span><br><span class="line">--复合主键</span><br><span class="line">primary key(字段1,字段2..)&#x2F;*不常用*&#x2F;</span><br><span class="line">--唯一键</span><br><span class="line">unique key &#x2F;*唯一但可以为空null可以多个*&#x2F;</span><br><span class="line">unique key&#x2F;*在字段后添加*&#x2F;</span><br><span class="line">unique key(字段)</span><br><span class="line">alter table 表名 add unique key(字段)&#x2F;*表后添加*&#x2F;</span><br><span class="line">alter table 表名 drop index 唯一键名 unique key &#x2F;*删除唯一键unique key可省*&#x2F;</span><br><span class="line">--复合主键</span><br><span class="line">unique key(字段1,字段2..)</span><br><span class="line">--自动增长(配合主键使用)</span><br><span class="line">字段之后添加 auto_increment&#x2F;*用于逻辑主键 但只适用于数值*&#x2F;</span><br><span class="line">--修改自增长的值</span><br><span class="line">alter table 表名 auto_increment &#x3D; 值;</span><br><span class="line">--删除增加自增长&#x2F;*重置字段属性即可*&#x2F;</span><br><span class="line">alter table 表名 modify 字段 属性;</span><br><span class="line">--查看自增长属性</span><br><span class="line">show variables like &#39;auto_increment%&#39;;</span><br><span class="line"></span><br><span class="line">--主键冲突更新</span><br><span class="line">insert into 表名 values(值列表)on update 字段&#x3D;新值</span><br><span class="line">--主键冲突替换</span><br><span class="line">replace into 表名 values(值列表)</span><br><span class="line">--蠕虫复制</span><br><span class="line">insert into 表名 select *&#x2F;字段列表 from 表名</span><br><span class="line">--更新数据</span><br><span class="line">update 表名 set 字段名-新值 where 判断条件</span><br><span class="line">update 表名 set 字段名&#x3D;新值 limit 数量</span><br><span class="line">--重置自增长 &#x3D; 删除表中数据;</span><br><span class="line">truncate table 表名;</span><br><span class="line">--重置自增长</span><br><span class="line">ALTER TABLE 表名 AUTO_INCREMENT&#x3D; 1; &#x2F;*保留数据*&#x2F;</span><br><span class="line">&#x2F;*尽量少使用外键*&#x2F;</span><br><span class="line">--增加外键</span><br><span class="line">foreign key(字段) references 主表(字段)</span><br><span class="line">alter table 从表 add constraint &#39;表_ibfk_1&#39; foreign key(字段) references 主表(字段) on 约束模式</span><br><span class="line">约束模式：1.district 严格模式默认 不允许操作 </span><br><span class="line">		  2.cascade:级联模式,一起操作 主表变化,从表跟着变化</span><br><span class="line"></span><br><span class="line">   		  3. set null:置空模式 主表变化,从表对应记录设置为空</span><br><span class="line">	常用约束模式：on update cascade on delete set null;</span><br><span class="line">	--删除外键</span><br><span class="line">	alter table 从表 drop foreign key &#39;constraint名字&#39;;</span><br></pre></td></tr></table></figure>


<h2 id="五、进阶部分"><a href="#五、进阶部分" class="headerlink" title="五、进阶部分"></a>五、进阶部分</h2><h3 id="1-视图"><a href="#1-视图" class="headerlink" title="1.视图"></a>1.视图</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--创建视图</span><br><span class="line">create view 视图名字 as select指令;</span><br><span class="line">--查看视图</span><br><span class="line">desc 视图名</span><br><span class="line">--使用视图&#x2F;*可以当表操作*&#x2F;</span><br><span class="line">--修改视图</span><br><span class="line">alter view 视图名字 as 新select指令</span><br><span class="line">--删除视图</span><br><span class="line">drop view 视图名字;</span><br></pre></td></tr></table></figure>
<h3 id="2-手动事务"><a href="#2-手动事务" class="headerlink" title="2.手动事务"></a>2.手动事务</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.start transaction &#x2F;&#x2F;此句开始之后,所有语句不会直接写入数据库(保存在事务日志中)</span><br><span class="line">2.事务处理,多条语句构成</span><br><span class="line">3.事务提交：commit&#x2F;rollback</span><br><span class="line">--设置回滚点</span><br><span class="line">set savepoint 回滚点名字;</span><br><span class="line">--回到回滚到</span><br><span class="line">rollback to 回滚点名字;</span><br><span class="line">--事务隔离级别&#x2F;*安全性从低到高  效率从高到低*&#x2F;</span><br><span class="line">read uncommitted</span><br><span class="line">read committed  &#x2F;*只避免脏读*&#x2F;</span><br><span class="line">repeatable read  &#x2F;*只会发生幻读 *&#x2F;</span><br><span class="line">serializable &#x2F;*都可以隔离*&#x2F;</span><br><span class="line">--设置隔离级别</span><br><span class="line">set session transaction isolation level 隔离级别;</span><br><span class="line">--查看隔离级别</span><br><span class="line">select @@transaction_isolation;</span><br></pre></td></tr></table></figure>




<h3 id="3-系统变量"><a href="#3-系统变量" class="headerlink" title="3.系统变量"></a>3.系统变量</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--查看系统变量</span><br><span class="line">show variables;</span><br><span class="line">set @@变量名;</span><br><span class="line">--修改变量名</span><br><span class="line">--局部修改不影响其他客户端</span><br><span class="line">set 变量名 &#x3D; 新值</span><br><span class="line">--全局修改 需要重新打开客户端才生效</span><br><span class="line">set global 变量名 &#x3D; 值;</span><br><span class="line">--会话变量&#x2F;自定义变量</span><br><span class="line">set @变量 &#x3D; 值;</span><br><span class="line">--通过查询语句为变量赋值</span><br><span class="line">select @name :&#x3D;stu_name,@age :&#x3D; stu_age from my_student limit 1;</span><br><span class="line">select stu_name,stu_age from my_student order by stu_height desc limit 1 into @name,@age;</span><br><span class="line">--查看变量</span><br><span class="line">select @变量名;</span><br><span class="line">--局部变量</span><br><span class="line">--复杂语句中使用(函数&#x2F;存储过程&#x2F;触发器)</span><br><span class="line">declare 变量名 类型 [default 默认值];</span><br></pre></td></tr></table></figure>
<h3 id="4-if-分支"><a href="#4-if-分支" class="headerlink" title="4.if 分支"></a>4.if 分支</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--查询语句中使用</span><br><span class="line">select *,if(stu_age&gt;20,&#39;符合&#39;,&#39;不符合&#39;) as judge from my_student;</span><br><span class="line">--复杂语句中使用(函数&#x2F;存储过程&#x2F;触发器)</span><br><span class="line">if 条件表达式 then </span><br><span class="line">	满足条件执行的语句;</span><br><span class="line">else</span><br><span class="line">	不满足条件执行的语句;</span><br><span class="line">end if;</span><br></pre></td></tr></table></figure>
<h3 id="5-while语句"><a href="#5-while语句" class="headerlink" title="5.while语句"></a>5.while语句</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">标识名字:while 条件 do</span><br><span class="line">	[if 条件判断 then </span><br><span class="line">		lterate&#x2F;leave 标识名字&#x2F;&#x2F;循环控制</span><br><span class="line">	end if;</span><br><span class="line">	]</span><br><span class="line">	循环体</span><br><span class="line">end while;</span><br></pre></td></tr></table></figure>
<h3 id="6-内置函数"><a href="#6-内置函数" class="headerlink" title="6.内置函数"></a>6.内置函数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--字符串函数</span><br><span class="line">char_length() : 判断字符串的字符数</span><br><span class="line">length() : 判断字符串的字节数</span><br><span class="line">concat() : 连接字符串</span><br><span class="line">instr() : 判断字符在目标字符串中是否存在,若存在返回其位置,不存在返回0</span><br><span class="line">lcase() : 全部小写</span><br><span class="line">left() : 从左侧指定位置开始截取字符串</span><br><span class="line">ltrim() : 消除左边对应的空格</span><br><span class="line">mid() : 从中间指定位置开始截取,若不指定直接到最后</span><br><span class="line">--时间函数</span><br><span class="line">now() : 返回当前时间</span><br><span class="line">curdate() : 返回当前日期</span><br><span class="line">curtime() : 返回当前时间</span><br><span class="line">datediff() : 判断两个日期之间的天数</span><br><span class="line">date_add() : 进行时间的增加&#x2F;减少</span><br><span class="line">--数学函数</span><br><span class="line">abs()</span><br><span class="line">ceiling()</span><br><span class="line">floor()</span><br><span class="line">pow()</span><br><span class="line">found()</span><br><span class="line">--其他函数</span><br><span class="line">Md5() : 对数据进行md5加密</span><br><span class="line">version() : 获得版本</span><br><span class="line">database() : 显示当前数据库</span><br><span class="line">uuid() : 生成一个唯一的标识符</span><br></pre></td></tr></table></figure>


<h3 id="7-自定义函数"><a href="#7-自定义函数" class="headerlink" title="7.自定义函数"></a>7.自定义函数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--自定义函数</span><br><span class="line">--修改语句结束符</span><br><span class="line">delimiter $$</span><br><span class="line">create function 函数名(参数名 数据类型,...) return 数据类型</span><br><span class="line">begin</span><br><span class="line">	函数语句</span><br><span class="line">	return 值;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line">--查看自定义函数</span><br><span class="line">show function status;</span><br><span class="line"></span><br><span class="line">--查看函数创建语句</span><br><span class="line">show create function 函数名;</span><br><span class="line">--调用函数</span><br><span class="line">select 函数();</span><br><span class="line">--删除函数</span><br><span class="line">drop function 函数名;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="8-存储过程"><a href="#8-存储过程" class="headerlink" title="8.存储过程"></a>8.存储过程</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 存储过程</span><br><span class="line">-- 创建过程</span><br><span class="line">如：创建一个求1到100之间的和的过程</span><br><span class="line">delimiter $$</span><br><span class="line">create procedure 过程名([参数列表])</span><br><span class="line">begin </span><br><span class="line">	declare i int default 1;</span><br><span class="line">	set @sum&#x3D;0;</span><br><span class="line">	while i&lt;&#x3D;100 do</span><br><span class="line">		set @sum&#x3D;@sum+i;</span><br><span class="line">		set i &#x3D; i+1;</span><br><span class="line">	end while;</span><br><span class="line">	select@sum;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br><span class="line">--查看过程</span><br><span class="line">show procedure status;</span><br><span class="line">--查看创建过程的语句</span><br><span class="line">show create procedure 过程名;</span><br><span class="line">--调用过程</span><br><span class="line">call 过程名([参数列表])</span><br><span class="line">--删除过程</span><br><span class="line">drop procedure 过程名;</span><br><span class="line">--过程参数列表</span><br><span class="line">过程类型 变量名 数据类型&#x2F;&#x2F;in int_1 int;</span><br><span class="line">--过程类型</span><br><span class="line">in &#x2F;*提供给过程使用 相当于值传递*&#x2F;</span><br><span class="line">out &#x2F;*给外部使用 相当于引用传递 内部也可以改变外部的值*&#x2F;</span><br><span class="line">inout &#x2F;*给内外部使用 相当于引用传递 内部也可以改变外部的值*&#x2F;</span><br></pre></td></tr></table></figure>
<h3 id="9-索引"><a href="#9-索引" class="headerlink" title="9.索引"></a>9.索引</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--创建索引</span><br><span class="line">create [unique]index indexName on 表名(字段)</span><br><span class="line"></span><br><span class="line">--开窗函数</span><br><span class="line">--分组排序</span><br><span class="line">--1 2 3 4</span><br><span class="line">select</span><br><span class="line">    empid,</span><br><span class="line">    ename,</span><br><span class="line">    deptid,</span><br><span class="line">    salary,</span><br><span class="line">    ROW_NUMBER() over (partition by deptid ORDER BY salary desc) as row_number1</span><br><span class="line">from employee;</span><br><span class="line">-- 1 2 2 4</span><br><span class="line">select</span><br><span class="line">    empid,</span><br><span class="line">    ename,</span><br><span class="line">    deptid,</span><br><span class="line">    salary,</span><br><span class="line">    rank() over (partition by deptid ORDER BY salary desc) as row_number1</span><br><span class="line">from employee;</span><br><span class="line">-- 1 2 2 3</span><br><span class="line">select</span><br><span class="line">    empid,</span><br><span class="line">    ename,</span><br><span class="line">    deptid,</span><br><span class="line">    salary,</span><br><span class="line">    dense_rank() over (partition by deptid ORDER BY salary desc) as row_number1</span><br><span class="line">from employee;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mock</title>
    <url>/2022/08/26/mock/</url>
    <content><![CDATA[<h1 id="Mock"><a href="#Mock" class="headerlink" title="Mock"></a>Mock</h1><p>当前端工程师需要独立于后端并行开发时，后端接口还没有完成那么前端怎么获取数据？<br>这时可以考虑前端搭建web server自己模拟假数据，这里我们选第三方库mockjs用来生成随机数据拦截Ajax请求。</p>
<blockquote>
<p><a href="https://github.com/nuysoft/Mock/wiki">官方文档</a></p>
</blockquote>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ul>
<li><p>安装mockjs：<code>cnpm install mockjs --save-dev</code></p>
</li>
<li><p>创建mock文件夹以及mock配置的js文件</p>
</li>
<li><p>方式一：直接创建随机数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Mock = <span class="built_in">require</span>(<span class="string">&#x27;mockjs&#x27;</span>)</span><br><span class="line"><span class="comment">//随机生成id</span></span><br><span class="line"><span class="keyword">let</span> id = Mock.mock(<span class="string">&#x27;@id&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(id)</span><br><span class="line"><span class="comment">//随机生成对象</span></span><br><span class="line"><span class="keyword">let</span> obj = Mock.mock(&#123;</span><br><span class="line">    id: <span class="string">&#x27;@id()&#x27;</span>,<span class="comment">//随机id</span></span><br><span class="line">    username: <span class="string">&#x27;@cname()&#x27;</span>,<span class="comment">//随机生成中文名字</span></span><br><span class="line">    date: <span class="string">&#x27;@date()&#x27;</span>,<span class="comment">//随机生成日期</span></span><br><span class="line">    avatar: <span class="string">&quot;@image(&#x27;200x200&#x27;,&#x27;red&#x27;,&#x27;#fff&#x27;,&#x27;avatar&#x27;)&quot;</span>,<span class="comment">//生成图片，参数：size,background,foreground,text</span></span><br><span class="line">    description: <span class="string">&#x27;@paragraph()&#x27;</span>, <span class="comment">//描述</span></span><br><span class="line">    ip: <span class="string">&#x27;@ip()&#x27;</span>, <span class="comment">//ip地址</span></span><br><span class="line">    email: <span class="string">&#x27;@email()&#x27;</span> <span class="comment">//随机生成邮箱</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(obj)</span><br></pre></td></tr></table></figure></li>
<li><p>方式二：读取json文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> JSON5 = <span class="built_in">require</span>(<span class="string">&#x27;json5&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> Mock = <span class="built_in">require</span>(<span class="string">&#x27;mockjs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取JSON文件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getJsonFile</span>(<span class="params">filePath</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> json = fs.readFileSync(path.join(__dirname, filePath), <span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> JSON5.parse(json);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回一个函数</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">devServer</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//监听http请求</span></span><br><span class="line">    devServer.app.get(<span class="string">&#x27;/user/userinfo&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">rep, res</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//每次相应请求时获取mock data的json文件</span></span><br><span class="line">        <span class="keyword">var</span> json = getJsonFile(<span class="string">&#x27;./userInfo.json5&#x27;</span>);</span><br><span class="line">        <span class="comment">//将json传入mock方法，生成的数据返回给浏览器</span></span><br><span class="line">        res.json(Mock.mock(json))</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>配置vue.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    <span class="comment">// before: require(&#x27;./mock&#x27;),在vuecli3中使用</span></span><br><span class="line">    <span class="comment">//setupMiddlewares: require(&#x27;./mock&#x27;),在vuecli5中使用</span></span><br><span class="line">    onBeforeSetupMiddleware: <span class="built_in">require</span>(<span class="string">&#x27;./mock/index&#x27;</span>)<span class="comment">//引入mock/index.js </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当后端开发完成时，移除mock</p>
</li>
<li><p>编写环境配置文件env.development：<code>MOCK=true</code></p>
</li>
<li><p>并在mock文件夹下的index.js里面添加判断条件<code>if (process.env.MOCK == &#39;true&#39;) </code></p>
</li>
<li><p>移除只需要将环境配置文件的MOCK改为false即可</p>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Mock</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql数据类型</title>
    <url>/2021/02/24/mysql%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="mysql数据类型"><a href="#mysql数据类型" class="headerlink" title="mysql数据类型"></a>mysql数据类型</h1><h2 id="1-整型"><a href="#1-整型" class="headerlink" title="1. 整型"></a>1. 整型</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">※Tinyint &#x2F;*迷你整形最大数值0-255 1字节*&#x2F;</span><br><span class="line">Smallint &#x2F;*小整形最大数值0-65535 2字节*&#x2F;</span><br><span class="line">Mediumint &#x2F;*中整形 3字节*&#x2F;</span><br><span class="line">※int &#x2F;*整形 4字节*&#x2F;</span><br><span class="line">bigint&#x2F;*大整形 8字节*&#x2F;</span><br><span class="line"></span><br><span class="line">-- 若不想有负数</span><br><span class="line">类型后加 unsigned</span><br><span class="line">-- 若想输出时满足最大长度自动填充</span><br><span class="line">类型后加 Zerofill&#x2F;*负数不能用若使用zerofill自动取消负数unsigned*&#x2F;</span><br><span class="line">自定义长度类型后加(数字)&#x2F;*但不能超出类型范围*&#x2F;</span><br></pre></td></tr></table></figure>
<h2 id="2-小数和浮点型"><a href="#2-小数和浮点型" class="headerlink" title="2.小数和浮点型"></a>2.小数和浮点型</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 小数(浮点型，定点型)</span><br><span class="line">类型(M,D)&#x2F;*m个有效数字，小数占D位*&#x2F;</span><br><span class="line">-- 浮点型(可以用科学计数法插入 10e5通常用来存储不需要那么精确的数据)</span><br><span class="line">Float &#x2F;*4字节 范围10^38只能保证7位数以内*&#x2F;</span><br><span class="line"></span><br><span class="line">Double &#x2F;*8字节 范围10^308只能保证15位数以内*&#x2F;</span><br><span class="line">-- 定点数(保证精确的小数，小数部分超出长度会四舍五入)</span><br><span class="line">Decimal(M,D)&#x2F;*系统会自动分配空间M最大65 D最大不超过30*&#x2F;</span><br></pre></td></tr></table></figure>
<h2 id="3-时间日期类型"><a href="#3-时间日期类型" class="headerlink" title="3.时间日期类型"></a>3.时间日期类型</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 事件日期类型</span><br><span class="line">Date YYYY-mm-dd&#x2F;*3字节 范围1000-01-01到9999-12-12 初始值为0000-00-00*&#x2F; </span><br><span class="line">Time HH:li:ss &#x2F;*3字节 范围-838:59:59~838:59:59 一般用于表示时间间隔 可以这样插入&quot;数字 000:00:00&quot;等于数字(可为负)*24+后面时间*&#x2F;</span><br><span class="line">Datetime YYYY-mm-dd HH:li:ss &#x2F;*8字节 范围1000-01-01 00:00:00到9999-12-12 23:59:59*&#x2F;</span><br><span class="line">Timestamp YYYY-mm-dd HH:li:ss&#x2F;*从格林威治时间开始*&#x2F;</span><br><span class="line">Year &#x2F;*1字节两位数字插入时 69以下为2000+数字70以上为1900+数字四位插入不动*&#x2F;</span><br></pre></td></tr></table></figure>
<h2 id="4-字符串类型"><a href="#4-字符串类型" class="headerlink" title="4.字符串类型"></a>4.字符串类型</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 字符串型</span><br><span class="line"></span><br><span class="line">Char(L) &#x2F;*定长字符，系统一直会分配L大小的空间 L范围0~255*&#x2F;</span><br><span class="line">Varchar(L) &#x2F;*变长字符 系统会根据你输入的值来分配空间(前提未超出你设置的长度) L范围理论0~65535*&#x2F;</span><br><span class="line">Text&#x2F;*当数据长度超过255个字符使用*&#x2F;</span><br><span class="line">	Tinytext&#x2F;*一个字节保存 存储数据为2^8+1*&#x2F;</span><br><span class="line">-- 只使用Text&#x2F;*一个字节保存 存储数据为2^16+2*&#x2F;</span><br><span class="line">Mediumtext&#x2F;*一个字节保存 存储数据为2^24+3*&#x2F;</span><br><span class="line">Longtext&#x2F;*一个字节保存 存储数据为2^32+4*&#x2F;</span><br></pre></td></tr></table></figure>
<h2 id="5-其他类型"><a href="#5-其他类型" class="headerlink" title="5.其他类型"></a>5.其他类型</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Enum&#x2F;*确定字段的数据就几个值时使用如性别*&#x2F;</span><br><span class="line">enum(数据值1,.....)&#x2F;*单选*&#x2F;</span><br><span class="line">Set &#x2F;*集合类型 最大只能放64个选项*&#x2F;&#x2F;*多选复选框*&#x2F;</span><br><span class="line">Set(数据值1,.....)</span><br><span class="line">Enum和Set都是以数字存储</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>mysql - 数据类型</tag>
      </tags>
  </entry>
  <entry>
    <title>redis缓存穿透</title>
    <url>/2022/10/04/redis%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F/</url>
    <content><![CDATA[<h1 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h1><p>缓存穿透 ：缓存穿透是指客户端请求的数据在缓存中和数据库中都不存在，这样缓存永远不会生效，这些请求都会打到数据库。</p>
<p>数据穿透了缓存，直击数据库，我们都知道数据库能够承载的并发不如redis这么高，如果大量的请求同时过来访问这种不存在的数据，这些请求就都会访问到数据库。</p>
<p>常见的解决方案有两种：</p>
<ul>
<li><strong>缓存空对象</strong><ul>
<li>优点：实现简单，维护方便</li>
<li>缺点：<ul>
<li>额外的内存消耗</li>
<li>可能造成短期的不一致</li>
</ul>
</li>
</ul>
</li>
<li><strong>布隆过滤</strong><ul>
<li>优点：内存占用较少，没有多余key</li>
<li>缺点：<ul>
<li>实现复杂</li>
<li>存在误判可能</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="缓存空对象"><a href="#缓存空对象" class="headerlink" title="缓存空对象"></a>缓存空对象</h3><p>这种解决方案就是哪怕这个数据在数据库中也不存在，我们也把这个数据存入到redis中去，这样，下次用户过来访问这个不存在的数据，那么在redis中也能找到这个数据就不会进入到数据库了</p>
<img src= "/img/loading.gif" data-lazy-src="https://blogpic-1305209282.cos.ap-chengdu.myqcloud.com/img/image-20220728155727373.png" alt="image-20220728155727373" style="zoom:50%;" />        

<h3 id="布隆过滤"><a href="#布隆过滤" class="headerlink" title="布隆过滤"></a>布隆过滤</h3><p>这种解决方案思路大致是在客户端与Redis中间再加了一层布隆过滤器。</p>
<p>如果布隆过滤器判断存在则放行，否则直接返回，这个请求会去访问redis，哪怕此时redis中的数据过期了，但是数据库中一定存在这个数据，在数据库中查询出来这个数据后，再将其放入到redis中。</p>
<p>（布隆过滤器其实采用的是哈希思想来解决这个问题，通过一个庞大的二进制数组，利用哈希思想去判断当前这个要查询的这个数据是否存在）</p>
<img src= "/img/loading.gif" data-lazy-src="https://blogpic-1305209282.cos.ap-chengdu.myqcloud.com/img/image-20220728161844570.png" alt="image-20220728161844570" style="zoom:50%;" />

<blockquote>
<p>其余的解决方案：</p>
<ul>
<li>增强id的复杂性，避免被猜测id规律</li>
<li>做好数据的基础格式校验</li>
<li>加强用户权限校验</li>
<li>做好热点参数的限流</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>redis基础</title>
    <url>/2022/10/02/redis%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="Redis基础"><a href="#Redis基础" class="headerlink" title="Redis基础"></a>Redis基础</h1><ul>
<li><p>简介：Redis是一个开源的key-value存储系统。</p>
</li>
<li><p>特点：</p>
<ul>
<li>数据都在内存中，支持持久化，主要用作备份恢复</li>
<li>除了支持简单的key-value模式，还支持多种数据结构的存储，比如 list、set、hash、zset等。</li>
<li>一般是作为缓存数据库辅助持久化的数据库</li>
</ul>
</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol>
<li><p>去<a href="http://redis.io/">官方</a>下载安装包</p>
</li>
<li><p>上传安装包到/opt下</p>
</li>
<li><p>在linux下安装gcc环境：<code>yum install -y gcc tcl</code></p>
</li>
<li><p>解压 tar -zxvf redis-6.2.1.tar.gz</p>
</li>
<li><p>进入redis目录执行make命令</p>
</li>
<li><p>执行make install 安装</p>
</li>
<li><p>安装目录在/usr/local/bin下</p>
</li>
<li><p>在安装包的目录下备份配置文件<code>cp redis.conf redis.conf.bck</code></p>
</li>
<li><p>修改配置文件（最好不要直接修改原文件，复制到/etc下运行时用复制后的）<code>vim redis.conf</code></p>
<p>修改如下配置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 允许访问的地址，默认是127.0.0.1，会导致只能在本地访问。修改为0.0.0.0则可以在任意IP访问，生产环境不要设置为0.0.0.0</span></span><br><span class="line"><span class="attr">bind</span> <span class="string">0.0.0.0</span></span><br><span class="line"><span class="comment"># 守护进程，修改为yes后即可后台运行logs</span></span><br><span class="line"><span class="attr">daemonize</span> <span class="string">yes </span></span><br><span class="line"><span class="comment"># 密码，设置后访问Redis必须输入密码</span></span><br><span class="line"><span class="attr">requirepass</span> <span class="string">123321</span></span><br><span class="line"><span class="comment"># 监听的端口</span></span><br><span class="line"><span class="attr">port</span> <span class="string">6379</span></span><br><span class="line"><span class="comment"># 工作目录，默认是当前目录，也就是运行redis-server时的命令，日志.持久化等文件会保存在这个目录</span></span><br><span class="line"><span class="attr">dir</span> <span class="string">.</span></span><br><span class="line"><span class="comment"># 数据库数量，设置为1，代表只使用1个库，默认有16个库，编号0~15</span></span><br><span class="line"><span class="attr">databases</span> <span class="string">1</span></span><br><span class="line"><span class="comment"># 设置redis能够使用的最大内存</span></span><br><span class="line"><span class="attr">maxmemory</span> <span class="string">512mb</span></span><br><span class="line"><span class="comment"># 日志文件，默认为空，不记录日志，可以指定日志文件名</span></span><br><span class="line"><span class="attr">logfile</span> <span class="string">&quot;redis.log&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>执行redis-server redis.conf 进行后台运行（redis-server是直接前台运行）</p>
</li>
<li><p>设置开机自启动</p>
<ol>
<li><p>新建一个系统服务文件：<code>vi/etc/systemd/system/redis.service</code></p>
</li>
<li><p>写入内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;redis-server</span><br><span class="line">After&#x3D;network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;forking</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;redis-server &#x2F;opt&#x2F;redis-6.2.1&#x2F;redis.conf</span><br><span class="line">PrivateTmp&#x3D;true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure></li>
<li><p>重载系统服务：<code>systemctl daemon-reload</code></p>
</li>
<li><p>可以使用的命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 启动</span><br><span class="line">systemctl start redis</span><br><span class="line"># 停止</span><br><span class="line">systemctl stop redis</span><br><span class="line"># 重启</span><br><span class="line">systemctl restart redis</span><br><span class="line"># 查看状态</span><br><span class="line">systemctl status redis</span><br></pre></td></tr></table></figure></li>
<li><p>让redis开机自启动：<code>systemctl enable redis</code></p>
</li>
</ol>
</li>
</ol>
<h3 id="连接redis"><a href="#连接redis" class="headerlink" title="连接redis"></a>连接redis</h3><h5 id="使用redis-cli"><a href="#使用redis-cli" class="headerlink" title="使用redis-cli"></a>使用redis-cli</h5><p>Redis安装完成后就自带了命令行客户端：redis-cli，使用方式如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">redis-cli [options] [commonds]</span><br></pre></td></tr></table></figure>
<p>其中常见的options有：</p>
<ul>
<li><code>-h 127.0.0.1</code>：指定要连接的redis节点的IP地址，默认是127.0.0.1</li>
<li><code>-p 6379</code>：指定要连接的redis节点的端口，默认是6379</li>
<li><code>-a 123321</code>：指定redis的访问密码 </li>
</ul>
<p>其中的commonds就是Redis的操作命令，例如：</p>
<ul>
<li><code>ping</code>：与redis服务端做心跳测试，服务端正常会返回<code>pong</code></li>
</ul>
<h5 id="使用图形化界面"><a href="#使用图形化界面" class="headerlink" title="使用图形化界面"></a>使用图形化界面</h5><p>这个仓库可以找到安装包：<a href="https://github.com/lework/RedisDesktopManager-Windows/releases">https://github.com/lework/RedisDesktopManager-Windows/releases</a></p>
<p>下载后一直next即可</p>
<h2 id="Key键的通用操作"><a href="#Key键的通用操作" class="headerlink" title="Key键的通用操作"></a>Key键的通用操作</h2><ul>
<li>keys *查看当前库所有key  (匹配：keys *1，不建议在生产环境设备上使用)</li>
<li>exists key判断某个key是否存在</li>
<li>type key 查看你的key是什么类型</li>
<li>del key    删除指定的key数据</li>
<li>unlink key  根据value选择非阻塞删除（仅将keys从keyspace元数据中删除，真正的删除会在后续异步操作。）</li>
<li>expire key 10  10秒钟：为给定的key设置过期时间</li>
<li>ttl key 查看还有多少秒过期，-1表示永不过期，-2表示已过期</li>
<li>select命令切换数据库</li>
<li>dbsize查看当前数据库的key的数量</li>
<li>flushdb清空当前库</li>
<li>flushall通杀全部库</li>
</ul>
<h4 id="key的结构"><a href="#key的结构" class="headerlink" title="key的结构"></a>key的结构</h4><p>很多时候为了避免key重复，可以将key设计成 <code>项目名:业务名:类型:id</code>的形式</p>
<p>如：</p>
<table>
<thead>
<tr>
<th align="center">KEY</th>
<th align="center">VALUE</th>
</tr>
</thead>
<tbody><tr>
<td align="center">project:user:1</td>
<td align="center">{“id” :1，”name” : “Jack” ，”age”: 21}</td>
</tr>
<tr>
<td align="center">project:product:1</td>
<td align="center">{ “id” :1，”name” :”小米11”，”price”: 4999}</td>
</tr>
</tbody></table>
<h2 id="常用数据类型"><a href="#常用数据类型" class="headerlink" title="常用数据类型"></a>常用数据类型</h2><h3 id="String字符串"><a href="#String字符串" class="headerlink" title="String字符串"></a>String字符串</h3><h4 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h4><ul>
<li><p>set  <key><value>添加键值对</p>
</li>
<li><p>get  <key>查询对应键值</p>
</li>
<li><p>append <key><value>将给定的<value> 追加到原值的末尾</p>
</li>
<li><p>strlen <key>获得值的长度</p>
</li>
<li><p>setnx <key><value>只有在 key 不存在时  设置 key 的值</p>
</li>
<li><p>incr <key>将 key 中储存的数字值增1只能对数字值操作，如果为空，新增值为1</p>
</li>
<li><p>decr <key>将 key 中储存的数字值减1只能对数字值操作，如果为空，新增值为-1</p>
</li>
<li><p>incrby / decrby <key>&lt;步长&gt;：将 key 中储存的数字值增减。自定义步长。</p>
</li>
<li><p>incrbyfloat/decrbyfloat <key> 步长：将 key 中储存的浮点数增减。自定义步长。</p>
</li>
<li><p>mset <key1><value1><key2><value2> ….. 同时设置一个或多个 key-value对 </p>
</li>
<li><p>mget <key1><key2><key3> …..同时获取一个或多个 value </p>
</li>
<li><p>msetnx <key1><value1><key2><value2> …同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。</p>
</li>
<li><p>getrange <key>&lt;起始位置&gt;&lt;结束位置&gt;</p>
<p>获得值的范围，类似java中的substring，<strong>前包，后包</strong></p>
</li>
<li><p>setrange <key>&lt;起始位置&gt;<value>用 <value> 覆写<key>所储存的字符串值，从&lt;起始位置&gt;开始(<strong>索引从0开始</strong>)。</p>
</li>
<li><p>setex <key>&lt;**过期时间**&gt;<value>设置键值的同时，设置过期时间，单位秒。</p>
</li>
<li><p>getset <key><value>以新换旧，设置了新值同时获得旧值。</p>
</li>
</ul>
<h4 id="底层结构"><a href="#底层结构" class="headerlink" title="底层结构"></a>底层结构</h4><p>String的数据结构为简单动态字符串(Simple Dynamic String,缩写SDS)。是可以修改的字符串，内部结构实现上类似于Java的ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配.（当字符串长度小于1M时，扩容都是加倍现有的空间，如果超过1M，扩容时一次只会多扩1M的空间。需要注意的是字符串最大长度为512M。）</p>
<h3 id="List列表"><a href="#List列表" class="headerlink" title="List列表"></a>List列表</h3><p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p>
<h4 id="常见命令-1"><a href="#常见命令-1" class="headerlink" title="常见命令"></a>常见命令</h4><ul>
<li><p>lpush/rpush <key><value1><value2><value3> …. 从左边/右边插入一个或多个值。</p>
</li>
<li><p>lpop/rpop <key>从左边/右边吐出一个值。值在键在，值光键亡。</p>
</li>
<li><p>rpoplpush <key1><key2>从<key1>列表右边吐出一个值，插到<key2>列表左边。</p>
</li>
<li><p>lrange <key><start><stop>按照索引下标获得元素(从左到右)</p>
</li>
<li><p>lrange mylist 0 -1  0左边第一个，-1右边第一个，（0-1表示获取所有）</p>
</li>
<li><p>lindex <key><index>按照索引下标获得元素(从左到右)</p>
</li>
<li><p>llen <key>获得列表长度 </p>
</li>
<li><p>linsert <key> before <value><newvalue>在<value>的后面插入<newvalue>插入值</p>
</li>
<li><p>lrem <key><n><value>从左边删除n个value(从左到右)</p>
</li>
<li><p>lset<key><index><value>将列表key下标为index的值替换成value</p>
</li>
</ul>
<h4 id="底层结构-1"><a href="#底层结构-1" class="headerlink" title="底层结构"></a>底层结构</h4><p>List的数据结构为快速链表quickList。首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是ziplist，也即是压缩列表。它将所有的元素紧挨着一起存储，分配的是一块连续的内存。当数据量比较多的时候才会改成quicklist。</p>
<p>Redis将链表和ziplist结合起来组成了quicklist。也就是将多个ziplist使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。</p>
<h3 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h3><p>Redis的Set是string类型的无序集合。它底层其实是一个value为null的hash表，所以添加，删除，查找的**复杂度都是O(1)**。并且可以自动的去重。</p>
<h4 id="常见命令-2"><a href="#常见命令-2" class="headerlink" title="常见命令"></a>常见命令</h4><ul>
<li><p>sadd <key><value1><value2> ….. 将一个或多个 member 元素加入到集合 key 中，已经存在的 member 元素将被忽略</p>
</li>
<li><p>smembers <key>取出该集合的所有值。</p>
</li>
<li><p>sismember <key><value>判断集合<key>是否为含有该<value>值，有1，没有0</p>
</li>
<li><p>scard<key>返回该集合的元素个数。</p>
</li>
<li><p>srem <key><value1><value2> …. 删除集合中的某个元素。</p>
</li>
<li><p>spop <key><strong>随机</strong>从该集合中吐出一个值。</p>
</li>
<li><p>srandmember <key><n>随机从该集合中取出n个值。不会从集合中删除 。</p>
</li>
<li><p>smove <source><destination><value>把集合中一个值从一个集合移动到另一个集合</p>
</li>
<li><p>sinter <key1><key2>返回两个集合的交集元素。</p>
</li>
<li><p>sunion <key1><key2>返回两个集合的并集元素。</p>
</li>
<li><p>sdiff <key1><key2>返回两个集合的<strong>差集</strong>元素(key1中的，不包含key2中的)</p>
</li>
</ul>
<h4 id="底层结构-2"><a href="#底层结构-2" class="headerlink" title="底层结构"></a>底层结构</h4><p>Set数据结构是dict字典，字典是用哈希表实现的。Redis的set结构与Java一样，它的内部也使用hash结构，所有的value都指向同一个内部值。</p>
<h3 id="Hash哈希"><a href="#Hash哈希" class="headerlink" title="Hash哈希"></a>Hash哈希</h3><p>Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。类似Java里面的Map&lt;String,Object&gt;</p>
<h4 id="常见命令-3"><a href="#常见命令-3" class="headerlink" title="常见命令"></a>常见命令</h4><ul>
<li>hset <key><field><value>给<key>集合中的 <field>键赋值<value></li>
<li>hget <key1><field>从<key1>集合<field>取出 value </li>
<li>hmset <key1><field1><value1><field2><value2>… 批量设置hash的值</li>
<li>hexists<key1><field>查看哈希表 key 中，给定域 field 是否存在。 </li>
<li>hgetall <key> ：列出该hash集合的所有field和value</li>
<li>hkeys <key>列出该hash集合的所有field</li>
<li>hvals <key>列出该hash集合的所有value</li>
<li>hincrby <key><field><increment>为哈希表 key 中的域 field 的值加上增量 1  -1</li>
<li>hsetnx <key><field><value>将哈希表 key 中的域 field 的值设置为 value ，当且仅当域 field 不存在 .</li>
</ul>
<h4 id="底层结构-3"><a href="#底层结构-3" class="headerlink" title="底层结构"></a>底层结构</h4><p>Hash类型对应的数据结构是两种：ziplist（压缩列表），hashtable（哈希表）。当field-value长度较短且个数较少时，使用ziplist，否则使用hashtable。</p>
<h3 id="Zset集合"><a href="#Zset集合" class="headerlink" title="Zset集合"></a>Zset集合</h3><p>Redis有序集合zset与普通集合set非常相似，是一个没有重复元素的字符串集合。</p>
<p>不同之处是有序集合的每个成员都关联了一个<strong>评分（score）</strong>,这个评分（score）被用来按照从最低分到最高分的方式排序集合中的成员。集合的成员是唯一的，但是评分可以是重复了 。</p>
<h4 id="常见命令-4"><a href="#常见命令-4" class="headerlink" title="常见命令"></a>常见命令</h4><ul>
<li><p>zadd <key><score1><value1><score2><value2>…将一个或多个 member 元素及其 score 值加入到有序集 key 当中。</p>
</li>
<li><p>zrange <key><start><stop> [WITHSCORES]返回有序集 key 中，下标在<start><stop>之间的元素带WITHSCORES，可以让分数一起和值返回到结果集。</p>
</li>
<li><p>zrangebyscore key min max [withscores] [limit offset count]返回有序集 key 中，所有 score 值介于 min 和max 之间(包括等于 min 或 max )的成员。有序集成员按 score 值递增(从小到大)次序排列。 </p>
</li>
<li><p>zrevrangebyscore key maxmin [withscores] [limit offset count]        同上，改为从大到小排列。 </p>
</li>
<li><p>zincrby <key><increment><value>   为元素的score加上增量</p>
</li>
<li><p>zrem <key><value>删除该集合下，指定值的元素</p>
</li>
<li><p>zcount <key><min><max>统计该集合，分数区间内的元素个数 </p>
</li>
<li><p>zrank <key><value>返回该值在集合中的排名，从0开始。</p>
</li>
</ul>
<h4 id="底层结构-4"><a href="#底层结构-4" class="headerlink" title="底层结构"></a>底层结构</h4><p>zset底层使用了两个数据结构</p>
<p>（1）hash，hash的作用就是关联元素value和权重score，保障元素value的唯一性，可以通过元素value找到相应的score值。</p>
<p>（2）跳跃表，跳跃表的目的在于给元素value排序，根据score的范围获取元素列表。</p>
<h2 id="Redis的发布和订阅"><a href="#Redis的发布和订阅" class="headerlink" title="Redis的发布和订阅"></a>Redis的发布和订阅</h2><p>Redis 发布订阅 (pub/sub) 是一种消息通信模式：发送者 (pub) 发送消息，订阅者 (sub) 接收消息。并且可以根据频道来划分（支持任意数量的频道）</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ol>
<li><p>客户端订阅频道进行监听</p>
<p><code>SUBSCRIBE channel1</code></p>
</li>
<li><p>发布者发布消息到指定频道</p>
<p><code>publish channel1 hello</code></p>
</li>
<li><p>客户端自动收到发布的消息</p>
</li>
</ol>
<h2 id="Redis6新数据类型"><a href="#Redis6新数据类型" class="headerlink" title="Redis6新数据类型"></a>Redis6新数据类型</h2><h3 id="Bitmaps"><a href="#Bitmaps" class="headerlink" title="Bitmaps"></a>Bitmaps</h3><p>（1）  Bitmaps本身不是一种数据类型， 实际上它就是字符串（key-value） ， 但是它可以对字符串的位进行操作。</p>
<p>（2）  Bitmaps单独提供了一套命令， 所以在Redis中使用Bitmaps和使用字符串的方法不太相同。 可以把Bitmaps想象成一个以位为单位的数组， 数组的每个单元只能存储0和1， 数组的下标在Bitmaps中叫做偏移量。</p>
<h4 id="常见命令-5"><a href="#常见命令-5" class="headerlink" title="常见命令"></a>常见命令</h4><ul>
<li><p>setbit<key><offset><value>设置Bitmaps中某个偏移量的值（0或1）*offset:偏移量从0开始</p>
</li>
<li><p>getbit<key><offset>获取Bitmaps中某个偏移量的值</p>
</li>
<li><p>bitcount<key>[start end] 统计字符串从start字节到end字节比特值为1的数量</p>
</li>
<li><p>bitop and(or/not/xor) <destkey> [key…] bitop是一个复合操作， 它可以做多个Bitmaps的and（交集） 、 or（并集） 、 not（非） 、 xor（异或） 操作并将结果保存在destkey中。</p>
</li>
</ul>
<h3 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h3><p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。</p>
<p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p>
<h4 id="常见命令-6"><a href="#常见命令-6" class="headerlink" title="常见命令"></a>常见命令</h4><ul>
<li><p>pfadd <key>&lt; element&gt; [element …]  添加指定元素到 HyperLogLog 中</p>
</li>
<li><p>pfcount<key> [key …] 计算HLL的近似基数，可以计算多个HLL，比如用HLL存储每天的UV，计算一周的UV可以使用7天的UV合并计算即可</p>
</li>
<li><p>pfmerge<destkey><sourcekey> [sourcekey …] 将一个或多个HLL合并后的结果存储在另一个HLL中，比如每月活跃用户可以使用每天的活跃用户来合并计算可得</p>
</li>
</ul>
<h3 id="Geospatia"><a href="#Geospatia" class="headerlink" title="Geospatia"></a>Geospatia</h3><p>Redis 3.2 中增加了对GEO类型的支持。GEO，Geographic，地理信息的缩写。该类型，就是元素的2维坐标，在地图上就是经纬度。redis基于该类型，提供了经纬度设置，查询，范围查询，距离查询，经纬度Hash等常见操作。</p>
<h4 id="常见命令-7"><a href="#常见命令-7" class="headerlink" title="常见命令"></a>常见命令</h4><ul>
<li>geoadd<key>&lt; longitude&gt;<latitude><member> [longitude latitude member…]  添加地理位置（经度，纬度，名称）</li>
<li>geopos <key><member> [member…] 获得指定地区的坐标值</li>
<li>geodist<key><member1><member2> [m|km|ft|mi ] 获取两个位置之间的直线距离</li>
<li>georadius<key>&lt; longitude&gt;<latitude>radius m|km|ft|mi  以给定的经纬度为中心，找出某一半径内的元素</li>
</ul>
<blockquote>
<p>更多命令见<a href="http://redisdoc.com/">Redis命令参考</a></p>
</blockquote>
<h2 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h2><h3 id="连接步骤"><a href="#连接步骤" class="headerlink" title="连接步骤"></a>连接步骤</h3><ol>
<li><p>引入依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>注意需要将redis.conf中的protected-mode配置调成no（设置了密码不用）、以及bind ip的配置给注释掉</p>
</li>
<li><p>并且关闭linux防火墙：<strong>systemctl stop firewalld.service</strong></p>
</li>
<li><p>创建jedis客户端：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//建立连接</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;192.168.227.130&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//设置密码</span></span><br><span class="line">        jedis.auth(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="comment">//选择库</span></span><br><span class="line">        jedis.select(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>进行操作如：<code>jedis.set(key,value)</code>跟redis命令一致</p>
</li>
</ol>
<h3 id="相关基本操作"><a href="#相关基本操作" class="headerlink" title="相关基本操作"></a>相关基本操作</h3><p>大多与redis原本操作一致</p>
<ul>
<li><p>Key通用的操作</p>
<ul>
<li>获取获取key值：jedis.<strong>keys</strong>(“*”)</li>
<li>判断是否存在该key：jedis.<strong>exists</strong>(“k1”)</li>
<li>判断超时时间：jedis.<strong>ttl</strong>(“k1”)</li>
<li>获取key的值：jedis.<strong>get</strong>(“k1”)</li>
</ul>
</li>
<li><p>String类型的操作</p>
<ul>
<li>设置值：jedis.<strong>set</strong>(“k1”, “v1”)</li>
<li>多次设置值：jedis.<strong>mset</strong>(“str1”,”v1”,”str2”,”v2”,”str3”,”v3”)</li>
<li>获取多个值：jedis.<strong>mget</strong>(“str1”,”str2”,”str3”)</li>
</ul>
</li>
<li><p>List类型的操作</p>
<ul>
<li>插入jedis.<strong>lpush</strong>(“k1”,”22”,”333”);</li>
<li>获取所有值：jedis.<strong>lrange</strong>(“mylist”,0,-1);</li>
</ul>
</li>
<li><p>Set类型的操作</p>
<ul>
<li>插入值：jedis.sadd(“orders”, “order01”);</li>
<li>获取值：jedis.<strong>smembers</strong>(“orders”);</li>
<li>删除值：jedis.<strong>srem</strong>(“orders”, “order02”);</li>
</ul>
</li>
<li><p>Hash类型的操作</p>
<ul>
<li>插入值：jedis.<strong>hset</strong>(“hash1”,”userName”,”lisi”);</li>
<li>获取值：jedis.<strong>hget</strong>(“hash1”,”userName”);</li>
<li>批量插入：jedis.<strong>hmset</strong>(“hash2”,map);</li>
<li>批量获取：jedis.<strong>hmget</strong>(“hash2”, “telphone”,”email”);</li>
</ul>
</li>
<li><p>Zset类型的操作</p>
<ul>
<li>插入值：jedis.<strong>zadd</strong>(“zset01”, 100d, “z3”);</li>
<li>获取值：jedis.<strong>zrange</strong>(“zset01”, 0, -1);</li>
</ul>
</li>
</ul>
<h3 id="Jedis连接池"><a href="#Jedis连接池" class="headerlink" title="Jedis连接池"></a>Jedis连接池</h3><p>Jedis本身是线程不安全的，并且频繁的创建和销毁连接会有性能损耗，因此使用Jedis连接池代替Jedis的直连方式是比较理想的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wht;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPoolConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisConnectionFacotry</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> JedisPool jedisPool;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//配置连接池</span></span><br><span class="line">        JedisPoolConfig poolConfig = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">        poolConfig.setMaxTotal(<span class="number">8</span>);</span><br><span class="line">        poolConfig.setMaxIdle(<span class="number">8</span>);</span><br><span class="line">        poolConfig.setMinIdle(<span class="number">0</span>);</span><br><span class="line">        poolConfig.setMaxWaitMillis(<span class="number">1000</span>);</span><br><span class="line">        <span class="comment">//创建连接池对象</span></span><br><span class="line">        jedisPool = <span class="keyword">new</span> JedisPool(poolConfig,</span><br><span class="line">                <span class="string">&quot;192.168.227.130&quot;</span>,<span class="number">6379</span>,<span class="number">1000</span>,<span class="string">&quot;1313&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title">getJedis</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jedisPool.getResource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Springboot集成redis"><a href="#Springboot集成redis" class="headerlink" title="Springboot集成redis"></a>Springboot集成redis</h2><p>SpringBoot是使用的SpringDataRedis来整合的redis（SpringData是Spring中数据操作的模块，包含对各种数据库的集成）</p>
<ul>
<li>提供了RedisTemplate工具类，其中封装了各种对Redis的操作</li>
</ul>
<ul>
<li>提供了对不同Redis客户端的整合（Lettuce和Jedis）</li>
<li>提供了RedisTemplate统一API来操作Redis</li>
<li>支持Redis的发布订阅模型</li>
<li>支持Redis哨兵和Redis集群</li>
<li>支持基于Lettuce的响应式编程</li>
<li>支持基于JDK.JSON.字符串.Spring对象的数据序列化及反序列化</li>
<li>支持基于Redis的JDKCollection实现</li>
</ul>
<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ul>
<li><p>导入依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- redis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- spring2.X集成redis所需common-pool2--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在配置文件中配置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">redis</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">database</span>: <span class="string">0  #Redis数据库索引（默认为0）</span></span><br><span class="line">    <span class="attr">host</span>: <span class="string">192.168.227.130  #Redis服务器地址</span></span><br><span class="line">    <span class="attr">lettuce</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">pool</span>:<span class="string"></span></span><br><span class="line">        <span class="meta">max-active</span>: <span class="string">20   #连接池最大连接数（使用负值表示没有限制）</span></span><br><span class="line">        <span class="meta">max-idle</span>: <span class="string">5   #连接池中的最大空闲连接</span></span><br><span class="line">        <span class="meta">max-wait</span>: <span class="string">-1  #最大阻塞等待时间(负数表示没限制)</span></span><br><span class="line">        <span class="meta">min-idle</span>: <span class="string">0  #连接池中的最小空闲连接</span></span><br><span class="line">    <span class="attr">port</span>: <span class="string">6379  #Redis服务器连接端口</span></span><br><span class="line">    <span class="attr">timeout</span>: <span class="string">1800000 #连接超时时间（毫秒）</span></span><br><span class="line">    <span class="attr">password</span>: <span class="string">root123456  #验证密码</span></span><br></pre></td></tr></table></figure></li>
<li><p>自定义RedisTemplate（因为RedisTemplate可以接收任意Object作为值写入Redis，但是默认使用的是JDK序列化这样可读性很差）</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://blogpic-1305209282.cos.ap-chengdu.myqcloud.com/img/image-20220727145828091.png" alt="image-20220727145828091"></p>
<p>方式一：（注意一定要导入json依赖或者web的starter）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 创建RedisTemplate对象</span></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        <span class="comment">// 设置连接工厂</span></span><br><span class="line">        template.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="comment">// 创建JSON序列化工具</span></span><br><span class="line">        GenericJackson2JsonRedisSerializer jsonRedisSerializer = </span><br><span class="line">            							<span class="keyword">new</span> GenericJackson2JsonRedisSerializer();</span><br><span class="line">        <span class="comment">// 设置Key的序列化</span></span><br><span class="line">        template.setKeySerializer(RedisSerializer.string());</span><br><span class="line">        template.setHashKeySerializer(RedisSerializer.string());</span><br><span class="line">        <span class="comment">// 设置Value的序列化</span></span><br><span class="line">        template.setValueSerializer(jsonRedisSerializer);</span><br><span class="line">        template.setHashValueSerializer(jsonRedisSerializer);</span><br><span class="line">        <span class="comment">// 返回</span></span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JSON 序列化器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisSerializer&lt;Object&gt; <span class="title">RedisSerializer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; serializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;&gt;(Object.class);</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">// JavaTimeModule用于处理LocalDate类型</span></span><br><span class="line">        objectMapper.registerModule(<span class="keyword">new</span> JavaTimeModule());</span><br><span class="line">        <span class="comment">// ALL表示序列化对象中的所有成员（包括getter、setter、field等）；ANY表示序列化所有可见度的成员（包括private）</span></span><br><span class="line">        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        <span class="comment">// LaissezFaireSubTypeValidator.instance表示：不做验证，允许序列化所有实例</span></span><br><span class="line">        <span class="comment">// ObjectMapper.DefaultTyping.NON_FINAL表示：除了final声明的值和基本类型外，都会在序列化时添加类名标识（final不应被序列化）</span></span><br><span class="line">        objectMapper.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        serializer.setObjectMapper(objectMapper);</span><br><span class="line">        <span class="keyword">return</span> serializer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p>使用redisTemplate</p>
<p>redisTemplate的操作对象</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://blogpic-1305209282.cos.ap-chengdu.myqcloud.com/img/image-20220726223442480.png" alt="image-20220726223442480"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/redisTest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisTestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testRedis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//设置值到redis</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line">        <span class="comment">//从redis获取值</span></span><br><span class="line">        String name = (String)redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>使用StringRedisTemplate</p>
<p>为了节省内存空间，我们可以不使用JSON序列化器来处理value，而是统一使用String序列化器，要求只能存储String类型的key和value。这样必须由我们自己手动的来序列化、反序列化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User(<span class="number">1L</span>, <span class="string">&quot;jack&quot;</span>);</span><br><span class="line">    <span class="comment">//使用stringRedisTemplate存入自己转换的json</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(<span class="string">&quot;user:3&quot;</span>,JSON.toJSONString(user));</span><br><span class="line">    <span class="comment">//转换获取出来的json字符串</span></span><br><span class="line">    User user1 = JSON.parseObject(stringRedisTemplate.opsForValue().get(<span class="string">&quot;user:3&quot;</span>),User.class);</span><br><span class="line">    System.out.println(user1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>更多RedisTemplate的方法<a href="https://blog.csdn.net/ACE_U_005A/article/details/123158686">参考其他博客</a></p>
</blockquote>
</li>
</ul>
<h3 id="Springboot-的缓存抽象"><a href="#Springboot-的缓存抽象" class="headerlink" title="Springboot 的缓存抽象"></a>Springboot 的缓存抽象</h3><p>Spring从3.1开始定义了org.springframework.cache.Cache，Spring从3.1开始定义了org.springframework.cache.Cache<br>和org.springframework.cache.CacheManager接口来统一不同的缓存技术;并支持使用JCache (JSR-107)注解简化我们开发。</p>
<p>每次调用需要缓存功能的方法时，Spring会检查检查指定参数的指定的目标方法是否已经被调用过;如果有就直接从缓存中获取方法调用后的结果，如果没有就调用方法并缓存结果后返回给用户。下次调用直接从缓存中获取。</p>
<p>使用Spring缓存抽象时我们需要关注以下两点：</p>
<ul>
<li>确定方法需要被缓存以及他们的缓存策略</li>
<li>从缓存中读取之前缓存存储的数据</li>
</ul>
<h4 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h4><ul>
<li>Cache：缓存接口，定义缓存操作。实现有:RedisCache、EhCacheCache、ConcurrentMapCache等</li>
<li>CacheManager：缓存管理器,管理各种缓存(Cache)组件</li>
<li>keyGenerator：缓存数据时key生成策略</li>
<li>serialize：缓存数据时value序列化策略</li>
</ul>
<h4 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h4><ul>
<li><p>@EnableCaching：开启基于注解的缓存</p>
</li>
<li><p>@Cacheable：主要针对方法配置，能够根据方法的请求参数对其结果进行缓存</p>
<ul>
<li>属性：</li>
<li>cacheNames/value:指正缓存组件的名字</li>
<li>key:缓存数据使用的key，可以用它来指定。默认是使用方法参数的值（编写SpEL; #id;参数id的值#a#p日#root.args[0]）</li>
<li>keyGenerator: key的生成器;可以自己指定key的生成器的组件id（key/keyGenerator:二选一使用）</li>
<li>cacheManager:指定缓存管理器;或者cacheResolver指定获取解析器</li>
<li>condition:指定符合条件的情况下才缓存</li>
<li>unless:否定缓存：当unless指定的条件为true，方法的返回值就不会被缓存<ul>
<li>可以获取到结果进行判断<code>unless =&quot;#result == nuLL&quot;</code></li>
</ul>
</li>
<li>sync:是否使用异步模式</li>
</ul>
</li>
<li><p>@CachePut：保证方法被调用，又希望结果被缓存。(常用于更新方法)</p>
</li>
<li><p>@CacheEvict：方法被调用后清空缓存。(常用于删除方法)</p>
<ul>
<li>可以配置allEntries = true清空所有缓存</li>
<li>beforeInvocation = false:缓存的清除是否在方法之前执行<br>默认代表缓存清除操作是在方法执行之后执行;如果出现异常缓存就不会清除</li>
<li>beforeInvocation = true:<br>代表清除缓存操作是在方法运行之前执行，无论方法是否出现异常，缓存都清除</li>
</ul>
</li>
</ul>
<h4 id="使用Redis当缓存"><a href="#使用Redis当缓存" class="headerlink" title="使用Redis当缓存"></a>使用Redis当缓存</h4><p>springboot默认使用ConcurrentMapCacheManager以及ConcurrentMapCache</p>
<ol>
<li><p>自定义keyGenerator</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置默认键生成类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> KeyGenerator <span class="title">keyGenerator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> myKeyGenerator();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义键生成类 [类名_方法名_参数]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">KeyGenerator <span class="title">myKeyGenerator</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (target, method, params) -&gt; target.getClass().getSimpleName() + <span class="string">&quot;_&quot;</span></span><br><span class="line">        + method.getName() + <span class="string">&quot;_&quot;</span></span><br><span class="line">        + StringUtils.arrayToDelimitedString(params, <span class="string">&quot;_&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>自定义 CacheManager（由于默认缓存管理器还是用jdk序列化的）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 缓存管理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RedisCacheManager <span class="title">redisCacheManager</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">    RedisCacheWriter redisCacheWriter = RedisCacheWriter.nonLockingRedisCacheWriter(redisConnectionFactory);</span><br><span class="line">    RedisCacheConfiguration redisCacheConfiguration = RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">            .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(RedisSerializer.string())) <span class="comment">// 设置键序列化方式</span></span><br><span class="line">            .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jsonSerializer)) <span class="comment">// 设置值序列化方式</span></span><br><span class="line">            .entryTtl(Duration.ofHours(<span class="number">1</span>)) <span class="comment">// 设置缓存有效期</span></span><br><span class="line">            .disableCachingNullValues(); <span class="comment">// 不缓存空值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RedisCacheManager(redisCacheWriter, redisCacheConfiguration);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="完整配置类"><a href="#完整配置类" class="headerlink" title="完整配置类"></a>完整配置类</h3></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CachingConfigurerSupport;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.interceptor.KeyGenerator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheWriter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisSerializer&lt;Object&gt; jsonSerializer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义RedisTemplate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connectionFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 创建RedisTemplate对象</span></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        <span class="comment">// 设置连接工厂</span></span><br><span class="line">        template.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="comment">// 创建JSON序列化工具</span></span><br><span class="line">        GenericJackson2JsonRedisSerializer jsonRedisSerializer =</span><br><span class="line">                <span class="keyword">new</span> GenericJackson2JsonRedisSerializer();</span><br><span class="line">        <span class="comment">// 设置Key的序列化</span></span><br><span class="line">        template.setKeySerializer(RedisSerializer.string());</span><br><span class="line">        template.setHashKeySerializer(RedisSerializer.string());</span><br><span class="line">        <span class="comment">// 设置Value的序列化</span></span><br><span class="line">        template.setValueSerializer(jsonRedisSerializer);</span><br><span class="line">        template.setHashValueSerializer(jsonRedisSerializer);</span><br><span class="line">        <span class="comment">// 返回</span></span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JSON 序列化器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisSerializer&lt;Object&gt; <span class="title">RedisSerializer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; serializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;&gt;(Object.class);</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">// JavaTimeModule用于处理LocalDate类型</span></span><br><span class="line">        objectMapper.registerModule(<span class="keyword">new</span> JavaTimeModule());</span><br><span class="line">        <span class="comment">// ALL表示序列化对象中的所有成员（包括getter、setter、field等）；ANY表示序列化所有可见度的成员（包括private）</span></span><br><span class="line">        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        <span class="comment">// LaissezFaireSubTypeValidator.instance表示：不做验证，允许序列化所有实例</span></span><br><span class="line">        <span class="comment">// ObjectMapper.DefaultTyping.NON_FINAL表示：除了final声明的值和基本类型外，都会在序列化时添加类名标识（final不应被序列化）</span></span><br><span class="line">        objectMapper.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        serializer.setObjectMapper(objectMapper);</span><br><span class="line">        <span class="keyword">return</span> serializer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置默认键生成类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KeyGenerator <span class="title">keyGenerator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> myKeyGenerator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义键生成类 [类名_方法名_参数]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">KeyGenerator <span class="title">myKeyGenerator</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (target, method, params) -&gt; target.getClass().getSimpleName() + <span class="string">&quot;_&quot;</span></span><br><span class="line">                + method.getName() + <span class="string">&quot;_&quot;</span></span><br><span class="line">                + StringUtils.arrayToDelimitedString(params, <span class="string">&quot;_&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存管理器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisCacheManager <span class="title">redisCacheManager</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        RedisCacheWriter redisCacheWriter = RedisCacheWriter.nonLockingRedisCacheWriter(redisConnectionFactory);</span><br><span class="line">        RedisCacheConfiguration redisCacheConfiguration = RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(RedisSerializer.string())) <span class="comment">// 设置键序列化方式</span></span><br><span class="line">                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jsonSerializer)) <span class="comment">// 设置值序列化方式</span></span><br><span class="line">                .entryTtl(Duration.ofHours(<span class="number">1</span>)) <span class="comment">// 设置缓存有效期</span></span><br><span class="line">                .disableCachingNullValues(); <span class="comment">// 不缓存空值</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RedisCacheManager(redisCacheWriter, redisCacheConfiguration);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="封装工具类"><a href="#封装工具类" class="headerlink" title="封装工具类"></a>封装工具类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wht.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtil</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line">    <span class="comment">// =============================common============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定缓存失效时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">expire</span><span class="params">(String key, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key 获取过期时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 时间(秒) 返回0代表为永久有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getExpire</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">del</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">del</span><span class="params">(List&lt;String&gt; keys)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(keys);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// ============================String=============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存获取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key == <span class="keyword">null</span> ? <span class="keyword">null</span> : redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入并设置时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.opsForValue().set(key, value, time,</span><br><span class="line">                        TimeUnit.SECONDS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                set(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递增</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要增加几(大于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">incr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;递增因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要减少几(小于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">decr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;递减因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// ================================Map=================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashGet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">hget</span><span class="params">(String key, String item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取hashKey对应的所有键值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对应的多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title">hmget</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 对应多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet 并设置时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map  对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key, String item, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key, String item, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除hash表中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 可以使多个 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hdel</span><span class="params">(String key, Object... item)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForHash().delete(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断hash表中是否有该项的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hHasKey</span><span class="params">(String key, String item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要增加几(大于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hincr</span><span class="params">(String key, String item, <span class="keyword">double</span> by)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要减少记(小于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hdecr</span><span class="params">(String key, String item, <span class="keyword">double</span> by)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, -by);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// ============================set=============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key获取Set中的所有值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">sGet</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据value从一个set中查询,是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sHasKey</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据放入set缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSet</span><span class="params">(String key, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将set数据放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time   时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSetAndTime</span><span class="params">(String key, <span class="keyword">long</span> time, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet().add(key, values);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取set缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sGetSetSize</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除值为value的</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">setRemove</span><span class="params">(String key, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// ===============================list=================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end   结束 0 到 -1代表所有值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">lGet</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lGetListSize</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过索引 获取list中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引 index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0</span></span><br><span class="line"><span class="comment">     *              时，-1，表尾，-2倒数第二个元素，依次类推</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">lGetIndex</span><span class="params">(String key, <span class="keyword">long</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, List&lt;Object&gt; value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, List&lt;Object&gt; value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引修改list中的某条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lUpdateIndex</span><span class="params">(String key, <span class="keyword">long</span> index, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().set(key, index, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除N个值为value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 移除多少个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lRemove</span> <span class="params">(String key,<span class="keyword">long</span> count, Object value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long remove = redisTemplate.opsForList().remove(key, count,value);</span><br><span class="line">            <span class="keyword">return</span> remove;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="事务和锁机制"><a href="#事务和锁机制" class="headerlink" title="事务和锁机制"></a>事务和锁机制</h2><h3 id="Redis事务特性："><a href="#Redis事务特性：" class="headerlink" title="Redis事务特性："></a>Redis事务特性：</h3><ul>
<li><p>单独的隔离操作 ：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。 </p>
</li>
<li><p>没有隔离级别的概念 ：队列中的命令没有提交之前都不会实际被执行，因为事务提交前任何指令都不会被实际执行</p>
</li>
<li><p>不保证原子性 ：事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚 </p>
</li>
</ul>
<h3 id="事务相关命令"><a href="#事务相关命令" class="headerlink" title="事务相关命令"></a>事务相关命令</h3><p><img src= "/img/loading.gif" data-lazy-src="https://blogpic-1305209282.cos.ap-chengdu.myqcloud.com/img/image-20220526223634699.png" alt="image-20220526223634699"></p>
<ul>
<li>Multi：从输入Multi命令开始，输入的命令都会依次进入命令队列中，但不会执行，直到输入Exec</li>
<li>Exec：Redis会将之前的命令队列中的命令依次执行</li>
<li>discard：组队的过程中可以通过discard来放弃组队。</li>
</ul>
<h3 id="事务错误机制"><a href="#事务错误机制" class="headerlink" title="事务错误机制"></a>事务错误机制</h3><ol>
<li>组队中某个命令出现了报告错误，执行时整个的所有队列都会被取消。</li>
</ol>
<p><img src= "/img/loading.gif" data-lazy-src="https://blogpic-1305209282.cos.ap-chengdu.myqcloud.com/img/image-20220526225010816.png" alt="image-20220526225010816"></p>
<ol start="2">
<li>如果执行阶段某个命令报出了错误，则只有报错的命令不会被执行，而其他的命令都会执行，不会回滚。</li>
</ol>
<p><img src= "/img/loading.gif" data-lazy-src="https://blogpic-1305209282.cos.ap-chengdu.myqcloud.com/img/image-20220526225025802.png" alt="image-20220526225025802"></p>
<h3 id="锁机制"><a href="#锁机制" class="headerlink" title="锁机制"></a>锁机制</h3><h4 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h4><p><strong>悲观锁(Pessimistic Lock)</strong>, 顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。<strong>传统的关系型数据库里边就用到了很多这种锁机制</strong>，比如<strong>行锁</strong>，<strong>表锁</strong>等，<strong>读锁</strong>，<strong>写锁</strong>等，都是在做操作之前先上锁。</p>
<h4 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h4><p><strong>乐观锁(Optimistic Lock),</strong> 顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。<strong>乐观锁适用于多读的应用类型，这样可以提高吞吐量</strong>。Redis就是利用这种check-and-set机制实现事务的。</p>
<h4 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h4><ul>
<li><p>watch key1 [key2]：在执行multi之前执行，可以监视一个(或多个) key ，在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。</p>
</li>
<li><p>unwatch ：取消 WATCH 命令对所有 key 的监视。如果在执行 WATCH 命令之后，EXEC 命令或DISCARD 命令先被执行了的话，那么就不需要再执行UNWATCH 了。</p>
</li>
</ul>
<h2 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h2><p>因为Redis的数据是放在内存中的，持久化就是把内存的数据写到磁盘中去,防止服务宕机了内存数据丢失。</p>
<p>Redis 提供了2个不同形式的持久化方式：</p>
<ul>
<li>RDB（Redis DataBase）</li>
<li>AOF（Append Of File）</li>
</ul>
<h3 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h3><p>在指定的时间间隔内将内存中的数据集快照写入磁盘（具体操作：Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到 一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件） </p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>默认情况下，Redis 将数据集的快照保存在磁盘上的一个名为<code>dump.rdb</code>.</p>
<p>如果数据集中至少有 M 次更改，您可以将 Redis 配置为每 N 秒保存一次数据集，或者您可以手动调用<a href="https://redis.io/commands/save"><code>SAVE</code></a>or<a href="https://redis.io/commands/bgsave"><code>BGSAVE</code></a>命令</p>
<p>如：<code>save 60 1000</code>：如果至少更改了 1000 个键，则此配置将使 Redis 每 60 秒自动将数据集转储到磁盘</p>
<p>如：<code>bgsave </code>：命令用于在后台异步保存当前数据库的数据到磁盘</p>
<blockquote>
<p>使用场景：</p>
<ul>
<li>适合大规模的数据恢复</li>
<li>对数据完整性和一致性要求不高更适合使用</li>
<li>节省磁盘空间</li>
<li>恢复速度快</li>
</ul>
</blockquote>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>Fork的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑</li>
<li>虽然Redis在fork时使用了<strong>写时拷贝技术</strong>,但是如果数据庞大时还是比较消耗性能。</li>
<li>在备份周期在一定间隔时间做一次备份，所以如果Redis意外down掉的话，就会丢失最后一次快照后的所有修改。</li>
</ul>
<h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><p>以<strong>日志</strong>的形式来记录每个写操作（增量保存），将Redis执行过的所有写指令记录下来（AOF文件大小超过重写策略或手动重写时，会对AOF文件rewrite重写，压缩AOF文件容量），redis 重启的时候就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作</p>
<h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><p>因为AOF默认不开启，需要在redis.conf中配置</p>
<p>设置<code>appendonly yes</code></p>
<p>从现在开始，每次 Redis 接收到更改数据集的命令（例如<code>SET</code>时，它都会将其附加到 AOF。当您重新启动 Redis 时，它将重新播放 AOF 以重建状态。</p>
<blockquote>
<p>AOF和RDB同时开启，系统默认取AOF的数据（数据不会存在丢失），所以建议两个都启用，不建议单独使用AOF</p>
</blockquote>
<h5 id="AOF的同步频率"><a href="#AOF的同步频率" class="headerlink" title="AOF的同步频率"></a>AOF的同步频率</h5><ul>
<li><code>appendfsync always</code>：始终同步，每次Redis的写入都会立刻记入日志；性能较差但数据完整性比较好</li>
<li><code>appendfsync everysec</code>：每秒同步，每秒记入日志一次，如果宕机，本秒的数据可能丢失。</li>
<li><code>appendfsync no</code>：redis不主动进行同步，把同步时机交给操作系统。</li>
</ul>
<h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><ul>
<li><p>比起RDB占用更多的磁盘空间。</p>
</li>
<li><p>恢复备份速度要慢。</p>
</li>
<li><p>每次读写都同步的话，有一定的性能压力。</p>
</li>
<li><p>存在个别Bug，造成恢复不能。</p>
</li>
</ul>
<h2 id="IO多线程"><a href="#IO多线程" class="headerlink" title="IO多线程"></a>IO多线程</h2><p>Redis6终于支撑多线程了，告别单线程了吗？</p>
<p>IO多线程其实指<strong>客户端交互部分</strong>的<strong>网络IO</strong>交互处理模块<strong>多线程</strong>，而非<strong>执行命令多线程</strong>。Redis6执行命令依然是单线程。</p>
<h3 id="开启多线程"><a href="#开启多线程" class="headerlink" title="开启多线程"></a>开启多线程</h3><ul>
<li><p>进入配置文件</p>
</li>
<li><p>修改配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#是否开启多线程</span><br><span class="line">io-threads-do-reads  yes </span><br><span class="line">#线程数</span><br><span class="line">io-threads 4</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>vue_Router</title>
    <url>/2022/09/11/vue-Router/</url>
    <content><![CDATA[<h1 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h1><p>vue-router是Vue.js官方的路由插件,它和vue.js是深度集成的,适合用于构建单页面应用。专门用于单页面Web应用实现局部页面更新的插件库。</p>
<p><strong>主要功能：</strong></p>
<ul>
<li>嵌套路由映射</li>
<li>动态路由选择</li>
<li>模块化、基于组件的路由配置</li>
<li>路由参数、查询、通配符</li>
<li>展示由 Vue.js 的过渡系统提供的过渡效果</li>
<li>细致的导航控制</li>
<li>自动激活 CSS 类的链接</li>
<li>HTML5 history 模式或 hash 模式</li>
<li>可定制的滚动行为</li>
<li>URL 的正确编码</li>
</ul>
<h2 id="安装和使用vue-router"><a href="#安装和使用vue-router" class="headerlink" title="安装和使用vue-router"></a>安装和使用vue-router</h2><p>步骤一：安装vue-router</p>
<ul>
<li>npm install vue-router –save</li>
</ul>
<p>步骤二：在模块化项目中使用它</p>
<ul>
<li>导入路由对象，并调用Vue.use(VueRouter)</li>
<li>创建路由实例，并传入路由映射配置</li>
<li>在Vue实例中挂载创建的路由实例</li>
</ul>
<h2 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h2><ol>
<li><p>在src目录下创建router文件夹以及index.js（用于配置路由的相关信息）</p>
<p>index.js：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 该文件专门用于创建整个应用的路由器</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">//引入组件</span></span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">&#x27;../components/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;../components/Home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露一个路由器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">	routes:[</span><br><span class="line">        &#123;</span><br><span class="line">			path:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">            <span class="comment">//进行重定向到首页</span></span><br><span class="line">			redirect: <span class="string">&#x27;/home&#x27;</span></span><br><span class="line">		&#125;,</span><br><span class="line">		&#123;</span><br><span class="line">			path:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">			component:About</span><br><span class="line">		&#125;,</span><br><span class="line">		&#123;</span><br><span class="line">			path:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">			component:Home</span><br><span class="line">		&#125;</span><br><span class="line">	],</span><br><span class="line">    <span class="comment">//设置改变路径的模式 hash/history</span></span><br><span class="line">    mode: <span class="string">&#x27;history&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>懒加载写法（用到哪个组件就引入哪个组件）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Home = <span class="function">() =&gt;</span> <span class="keyword">import</span>(../components/Home)</span><br><span class="line"><span class="keyword">const</span> About = <span class="function">() =&gt;</span> <span class="keyword">import</span>(../components/About)</span><br><span class="line"><span class="comment">//其余不变</span></span><br></pre></td></tr></table></figure></li>
<li><p>在main.js中引入路由</p>
<p>main.js：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入Vue</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入App</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">//引入VueRouter</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">//引入路由器,自动会导入index.js</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭Vue的生产提示</span></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"><span class="comment">//应用vue-router插件</span></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">	el:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">	render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">	router:router</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>在App.vue中使用路由</p>
<p>App.vue：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;list-group&quot;&gt;</span><br><span class="line">		  &lt;!-- 原始html中我们使用a标签实现页面的跳转 --&gt;</span><br><span class="line">          &lt;!-- &lt;a class&#x3D;&quot;list-group-item active&quot; href&#x3D;&quot;.&#x2F;about.html&quot;&gt;About&lt;&#x2F;a&gt; --&gt;</span><br><span class="line">          &lt;!-- &lt;a class&#x3D;&quot;list-group-item&quot; href&#x3D;&quot;.&#x2F;home.html&quot;&gt;Home&lt;&#x2F;a&gt; --&gt;</span><br><span class="line"></span><br><span class="line">		  &lt;!-- Vue中借助router-link标签实现路由的切换并且会被渲染成a标签--&gt;</span><br><span class="line">		  &lt;router-link  to&#x3D;&quot;&#x2F;about&quot;&gt;About&lt;&#x2F;router-link&gt;</span><br><span class="line">          &lt;router-link  to&#x3D;&quot;&#x2F;home&quot;&gt;Home&lt;&#x2F;router-link&gt;</span><br><span class="line">          &lt;!-- 指定组件的呈现位置 --&gt;</span><br><span class="line">          &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">	export default &#123;</span><br><span class="line">		name:&#39;App&#39;,</span><br><span class="line">	&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<h3 id="router-link标签属性"><a href="#router-link标签属性" class="headerlink" title="router-link标签属性"></a>router-link标签属性</h3></li>
</ol>
<ul>
<li>tag=”button”：标签样式</li>
<li>replace：开始replace模式：路由标签中加一个replace即可。（浏览器历史记录有两种方式：push和replace；并且默认是push方式；）</li>
<li>active-class：设置对应路由匹配成功时的类名，不然默认会使用router-link-active类名（也可以在路由配置中加linkActiveClass配置效果一样）</li>
</ul>
<h3 id="编程式路由"><a href="#编程式路由" class="headerlink" title="编程式路由"></a>编程式路由</h3><ul>
<li><p>简写版：<code>this.$router.push/replace(&#39;/home&#39;)</code></p>
</li>
<li><p>详细版：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 绑定事件 --&gt;</span><br><span class="line">&lt;button @click=<span class="string">&quot;pushShow(m)&quot;</span>&gt;push查看&lt;/button&gt;</span><br><span class="line">&lt;button @click=<span class="string">&quot;replaceShow(m)&quot;</span>&gt;replace查看&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">pushShow</span>(<span class="params">m</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.$router.push(&#123;</span><br><span class="line">            path:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            query:&#123;</span><br><span class="line">                id:m.id,</span><br><span class="line">                title:m.title</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">replaceShow</span>(<span class="params">m</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.$router.replace(&#123;</span><br><span class="line">        	path:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">       	 	query:&#123;</span><br><span class="line">                 id:m.id,</span><br><span class="line">                 title:m.title</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;)</span><br><span class="line">     &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3></li>
</ul>
<p>操作与一级路由一致，只不过只是将需要嵌入的组件写在路由组件里面</p>
<p>编写路由规则,注意子路由不加 <strong>”/“</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">//引入组件</span></span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">&#x27;../pages/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;../pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> News <span class="keyword">from</span> <span class="string">&#x27;../pages/News&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Message <span class="keyword">from</span> <span class="string">&#x27;../pages/Message&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露一个路由器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">	routes:[</span><br><span class="line">		&#123;</span><br><span class="line">			path:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">			component:About</span><br><span class="line">		&#125;,</span><br><span class="line">		&#123;</span><br><span class="line">			path:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">			component:Home,</span><br><span class="line">			children:[</span><br><span class="line">				&#123;</span><br><span class="line">					path:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">					component:News,</span><br><span class="line">				&#125;,</span><br><span class="line">				&#123;</span><br><span class="line">					path:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">					component:Message,</span><br><span class="line">				&#125;</span><br><span class="line">			]</span><br><span class="line">		&#125;</span><br><span class="line">	]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>在路由组件中写路由标签(注意需要带着父路由的路径)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">		&lt;h2&gt;Home组件内容&lt;&#x2F;h2&gt;</span><br><span class="line">		&lt;div&gt;</span><br><span class="line">			&lt;ul class&#x3D;&quot;nav nav-tabs&quot;&gt;</span><br><span class="line">				&lt;li&gt;</span><br><span class="line">					&lt;router-link class&#x3D;&quot;list-group-item&quot; active-class&#x3D;&quot;active&quot; to&#x3D;&quot;&#x2F;home&#x2F;news&quot;&gt;News&lt;&#x2F;router-link&gt;</span><br><span class="line">				&lt;&#x2F;li&gt;</span><br><span class="line">				&lt;li&gt;</span><br><span class="line">					&lt;router-link class&#x3D;&quot;list-group-item&quot; active-class&#x3D;&quot;active&quot; to&#x3D;&quot;&#x2F;home&#x2F;message&quot;&gt;Message&lt;&#x2F;router-link&gt;</span><br><span class="line">				&lt;&#x2F;li&gt;</span><br><span class="line">			&lt;&#x2F;ul&gt;</span><br><span class="line">			&lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">		&lt;&#x2F;div&gt;</span><br><span class="line">	&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>
<h3 id="路由params参数"><a href="#路由params参数" class="headerlink" title="路由params参数"></a>路由params参数</h3><ol>
<li><p>方式一：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;router-link :to&#x3D;&quot;&#96;&#x2F;home&#x2F;message&#x2F;detail&#x2F;$&#123;m.id&#125;&#x2F;$&#123;m.title&#125;&#96;&quot;&gt;&#123;&#123;m.title&#125;&#125;&lt;&#x2F;router-link&gt;</span><br><span class="line">&#x2F;&#x2F;vue配置</span><br><span class="line">&#123;</span><br><span class="line">	path:&#39;detail&#x2F;:id&#x2F;:title&#39;,</span><br><span class="line">	component:Detail,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>方式二(注意这里就不能写path了只能用name指定路由)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 跳转路由并携带params参数，to的对象写法 --&gt;</span><br><span class="line">&lt;router-link :to&#x3D;&quot;&#123;</span><br><span class="line">                  name:&#39;xiangqing&#39;,</span><br><span class="line">                  params:&#123;</span><br><span class="line">                    id:m.id,</span><br><span class="line">                    title:m.title</span><br><span class="line">                  &#125;</span><br><span class="line">                  &#125;&quot;&gt;</span><br><span class="line">    &#123;&#123;m.title&#125;&#125;</span><br><span class="line">&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure>
<p>获得路径参数：</p>
</li>
</ol>
<p><code>this.$route.params.参数</code></p>
<h3 id="路由query参数"><a href="#路由query参数" class="headerlink" title="路由query参数"></a>路由query参数</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 方式1： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;`/home/message/detail?id=$&#123;m.id&#125;&amp;title=$&#123;m.title&#125;`&quot;</span>&gt;</span>&#123;&#123;m.title&#125;&#125;<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 方式2：跳转路由并携带query参数，to的对象写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">                  path:&#x27;/home/message/detail&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="string">                  query:&#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">                  id:m.id,</span></span></span><br><span class="line"><span class="tag"><span class="string">                  title:m.title</span></span></span><br><span class="line"><span class="tag"><span class="string">                  &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">                  &#125;&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;m.title&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>获取query参数：</p>
<p><code>&lt;li&gt;消息编号：&#123;&#123;$route.query.id&#125;&#125;&lt;/li&gt;</code></p>
<p><code>&lt;li&gt;消息标题：&#123;&#123;$route.query.title&#125;&#125;&lt;/li&gt;</code></p>
<h3 id="路由props属性"><a href="#路由props属性" class="headerlink" title="路由props属性"></a>路由props属性</h3><p>路由配置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    name:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">        path:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">            component:Detail,</span><br><span class="line"></span><br><span class="line">                <span class="comment">//props的第一种写法，值为对象，该对象中的所有key-value都会以props的形式传给Detail组件。</span></span><br><span class="line">                <span class="comment">// props:&#123;a:1,b:&#x27;hello&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//props的第二种写法，值为布尔值，若布尔值为真，就会把该路由组件收到的所有params参数，以props的形式传给Detail组件。</span></span><br><span class="line">                <span class="comment">// props:true</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//props的第三种写法，值为函数</span></span><br><span class="line">                <span class="function"><span class="title">props</span>(<span class="params">$route</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    id:$route.query.id,</span><br><span class="line">                    title:$route.query.title,</span><br><span class="line">                    a:<span class="number">1</span>,</span><br><span class="line">                    b:<span class="string">&#x27;hello&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>组件接收：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;ul&gt;</span><br><span class="line">		&lt;li&gt;消息编号：&#123;&#123;id&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">		&lt;li&gt;消息标题：&#123;&#123;title&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">	&lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">	export default &#123;</span><br><span class="line">		name:&#39;Detail&#39;,</span><br><span class="line">		props:[&#39;id&#39;,&#39;title&#39;],</span><br><span class="line">	&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<h3 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h3><ul>
<li><p>全局路由守卫</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建并暴露一个路由器</span></span><br><span class="line"><span class="keyword">const</span> router =  <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes:[</span><br><span class="line">        &#123;</span><br><span class="line">            name:<span class="string">&#x27;xinwen&#x27;</span>,</span><br><span class="line">            path:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">            component:News,</span><br><span class="line">            meta:&#123;<span class="attr">isAuth</span>:<span class="literal">true</span>,<span class="attr">title</span>:<span class="string">&#x27;新闻&#x27;</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局前置路由守卫————初始化的时候被调用、每次路由切换之前被调用</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;前置路由守卫&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line">    <span class="keyword">if</span>(to.meta.isAuth)&#123; <span class="comment">//判断是否需要鉴权</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;school&#x27;</span>)===<span class="string">&#x27;cy&#x27;</span>)&#123;</span><br><span class="line">            next()</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            alert(<span class="string">&#x27;学校名不对，无权限查看！&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        next()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局后置路由守卫————初始化的时候被调用、每次路由切换之后被调用</span></span><br><span class="line">router.afterEach(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;后置路由守卫&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line">    <span class="built_in">document</span>.title = to.meta.title || <span class="string">&#x27;系统&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li>
<li><p>独享路由守卫（只有前置没有后置）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    name:<span class="string">&#x27;xinwen&#x27;</span>,</span><br><span class="line">    path:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">    component:News,</span><br><span class="line">    meta:&#123;<span class="attr">isAuth</span>:<span class="literal">true</span>,<span class="attr">title</span>:<span class="string">&#x27;新闻&#x27;</span>&#125;,</span><br><span class="line">    beforeEnter: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;独享路由守卫&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line">        <span class="keyword">if</span>(to.meta.isAuth)&#123; <span class="comment">//判断是否需要鉴权</span></span><br><span class="line">             <span class="keyword">if</span>(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;school&#x27;</span>)===<span class="string">&#x27;cy&#x27;</span>)&#123;</span><br><span class="line">                   next()</span><br><span class="line">             &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                  alert(<span class="string">&#x27;学校名不对，无权限查看！&#x27;</span>)</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             next()</span><br><span class="line">        &#125;</span><br><span class="line">   	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>组件内路由守卫</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过路由规则，进入该组件时被调用</span></span><br><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;About--beforeRouteEnter&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line">    <span class="keyword">if</span>(to.meta.isAuth)&#123; <span class="comment">//判断是否需要鉴权</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;school&#x27;</span>)===<span class="string">&#x27;atguigu&#x27;</span>)&#123;</span><br><span class="line">            next()</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            alert(<span class="string">&#x27;学校名不对，无权限查看！&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        next()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过路由规则，离开该组件时被调用</span></span><br><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;About--beforeRouteLeave&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line">   next()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="缓存路由组件"><a href="#缓存路由组件" class="headerlink" title="缓存路由组件"></a>缓存路由组件</h3></li>
</ul>
<p>keep-alive是 Vue内置的一个组件，可以使被包含的组件保留状态，或避免重新渲染。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 缓存多个路由组件 include中只能写组件名--&gt;</span><br><span class="line">&lt;!-- &lt;keep-alive :include&#x3D;&quot;[&#39;News&#39;,&#39;Message&#39;]&quot;&gt; --&gt;</span><br><span class="line">				</span><br><span class="line">&lt;!-- 缓存一个路由组件 --&gt;</span><br><span class="line">&lt;keep-alive include&#x3D;&quot;News&quot;&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">&lt;&#x2F;keep-alive&gt;</span><br></pre></td></tr></table></figure>
<h3 id="有关路由的生命周期钩子"><a href="#有关路由的生命周期钩子" class="headerlink" title="有关路由的生命周期钩子"></a>有关路由的生命周期钩子</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 当该路由组件被激活时调用--&gt;</span><br><span class="line">activated() &#123;</span><br><span class="line">			console.log(&#39;News组件被激活了&#39;)</span><br><span class="line">			this.timer &#x3D; setInterval(() &#x3D;&gt; &#123;</span><br><span class="line">				console.log(&#39;@&#39;)</span><br><span class="line">				this.opacity -&#x3D; 0.01</span><br><span class="line">				if(this.opacity &lt;&#x3D; 0) this.opacity &#x3D; 1</span><br><span class="line">			&#125;,16)</span><br><span class="line">		&#125;</span><br><span class="line">&lt;!-- 当该路由组件失活时调用--&gt;                                    </span><br><span class="line">deactivated() &#123;</span><br><span class="line">	console.log(&#39;News组件失活了&#39;)</span><br><span class="line">	clearInterval(this.timer)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue实现动画</title>
    <url>/2022/09/07/vue%E5%AE%9E%E7%8E%B0%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<h1 id="动画效果"><a href="#动画效果" class="headerlink" title="动画效果"></a>动画效果</h1><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="方式1："><a href="#方式1：" class="headerlink" title="方式1："></a>方式1：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;button @click&#x3D;&quot;isShow &#x3D; !isShow&quot;&gt;显示&#x2F;隐藏&lt;&#x2F;button&gt;</span><br><span class="line">      &lt;!-- apper默认开始就显示动画 --&gt;</span><br><span class="line">      &lt;transition name&#x3D;&quot;hello&quot; appear&gt;</span><br><span class="line">          &lt;h1 v-show&#x3D;&quot;isShow&quot;&gt;你好呀！&lt;&#x2F;h1&gt;</span><br><span class="line">      &lt;&#x2F;transition&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#39;Test&#39;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            isShow:true,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    h1&#123;</span><br><span class="line">        background-color: aqua;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .hello-enter-active&#123;</span><br><span class="line">        animation: move 1s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .hello-leave-active&#123;</span><br><span class="line">        animation: move 1s reverse;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @keyframes move&#123;</span><br><span class="line">        from&#123;</span><br><span class="line">            transform: translateX(-100%);</span><br><span class="line">        &#125;</span><br><span class="line">        to&#123;</span><br><span class="line">            transform: translateX(0px);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>
<h3 id="方式2："><a href="#方式2：" class="headerlink" title="方式2："></a>方式2：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;button @click&#x3D;&quot;isShow &#x3D; !isShow&quot;&gt;显示&#x2F;隐藏&lt;&#x2F;button&gt;</span><br><span class="line">      </span><br><span class="line">      &lt;transition-group name&#x3D;&quot;hello&quot; appear&gt;</span><br><span class="line">          &lt;h1 v-show&#x3D;&quot;!isShow&quot; key&#x3D;&quot;1&quot;&gt;你好呀！&lt;&#x2F;h1&gt;</span><br><span class="line">          &lt;h1 v-show&#x3D;&quot;isShow&quot; key&#x3D;&quot;2&quot;&gt;你好2呀！&lt;&#x2F;h1&gt;</span><br><span class="line">      &lt;&#x2F;transition-group&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#39;Test2&#39;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            isShow:true,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    h1&#123;</span><br><span class="line">        background-color: aqua;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;* 进入的起点与离开的终点 *&#x2F;</span><br><span class="line">    .hello-enter,.hello-leave-to&#123;</span><br><span class="line">        transform: translateX(-100%);</span><br><span class="line">    &#125;</span><br><span class="line">    .hello-enter-active,.hello-leave-active&#123;</span><br><span class="line">        transition: 0.5s linear;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;* 进入的终点离开的起点 *&#x2F;</span><br><span class="line">    .hello-enter-to,.hello-leave&#123;</span><br><span class="line">        transform: translateX(0);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>
<h2 id="第三方动画库"><a href="#第三方动画库" class="headerlink" title="第三方动画库"></a>第三方动画库</h2><ul>
<li><p>Animate.css</p>
<ol>
<li><p>安装css库：npm install animate.css</p>
</li>
<li><p>直接引入样式：import ‘animate.css’</p>
</li>
<li><p>配置属性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;transition-group </span><br><span class="line">    appear</span><br><span class="line">    name&#x3D;&quot;animate__animated animate__bounce&quot; </span><br><span class="line">    enter-active-class&#x3D;&quot;animate__swing&quot;</span><br><span class="line">    leave-active-class&#x3D;&quot;animate__backOutLeft&quot;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>二分查找</title>
    <url>/2021/05/22/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul>
<li><p>首先必须是有序数组</p>
</li>
<li><p>先定义一个中心指针</p>
</li>
<li><p>循环看查找的数是否和中心点相等</p>
</li>
<li><p>若比中心点小肯定在它左边就继续对比左边，反之对比右边</p>
</li>
<li><p>如果左边界大于右边界了就退出循环</p>
</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 算法;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 二分查找 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">3</span>, <span class="number">14</span>, <span class="number">53</span>, <span class="number">214</span>, <span class="number">542</span>, <span class="number">748</span>&#125;;</span><br><span class="line">        System.out.println(binaryFind(arr, <span class="number">111</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binaryFind</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = arr.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[mid] == num) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (arr[mid] &gt; num) &#123;</span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>基本算法模板</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">	<span class="comment">// 区间[l,r]被划分为[l,mid]和[mid + 1,r]时使用:</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">bsearch_1</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">	  	<span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">	     	<span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>; <span class="comment">//取中间值</span></span><br><span class="line">	      <span class="keyword">if</span>(check(mid)) r = mid;<span class="comment">//如果处于右半边满足条件则答案在mid的左边包括mid也有可能</span></span><br><span class="line">	      <span class="keyword">else</span> l = mid + <span class="number">1</span>; <span class="comment">//不满足条件答案在mid的右边不包括mid</span></span><br><span class="line">	    &#125;</span><br><span class="line">	  	<span class="keyword">return</span> l;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 区间[l,r]被划分为[l,mid-1]和[mid,r]时使用:</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">bsearch_2</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">	  	<span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">	     	<span class="keyword">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>; <span class="comment">//取中间值 但是由于取得l=mid防止下标越界需要+1处理</span></span><br><span class="line">	      <span class="keyword">if</span>(check(mid)) l = mid;<span class="comment">//左半边满足条件答案在mid的右边并且包括mid</span></span><br><span class="line">	      <span class="keyword">else</span> r = mid - <span class="number">1</span>;<span class="comment">//处于右半边不满足条件答案在mid的左边不包括mid</span></span><br><span class="line">	    &#125;</span><br><span class="line">	  	<span class="keyword">return</span> l;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//浮点数二分</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">bsearch_3</span><span class="params">(<span class="keyword">double</span> l,<span class="keyword">double</span> r)</span></span>&#123;</span><br><span class="line">	  <span class="keyword">while</span>(r - l &gt; <span class="number">1e-6</span>)&#123; <span class="comment">//这里需比答案要求高出两位才能保证精度正确</span></span><br><span class="line">	  	<span class="keyword">double</span> mid = (l + r)/<span class="number">2</span>; <span class="comment">//取中点</span></span><br><span class="line">	    <span class="keyword">if</span>(check(mid)) r = mid; <span class="comment">//左右两边都有可能是答案,因为浮点数只能确定范围不能精确到某个位置</span></span><br><span class="line">	    <span class="keyword">else</span> l = mid; </span><br><span class="line">	  &#125;</span><br><span class="line">	  <span class="keyword">return</span> l;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>查找</tag>
      </tags>
  </entry>
  <entry>
    <title>vue组件化</title>
    <url>/2022/09/01/vue%E7%BB%84%E4%BB%B6%E5%8C%96/</url>
    <content><![CDATA[<h1 id="Vue组件化"><a href="#Vue组件化" class="headerlink" title="Vue组件化"></a>Vue组件化</h1><h3 id="组件化的诞生"><a href="#组件化的诞生" class="headerlink" title="组件化的诞生"></a>组件化的诞生</h3><p>由于之前的传统页面编写方式存在的问题：</p>
<ul>
<li>依赖关系混乱不好维护</li>
<li>代码复用性低</li>
</ul>
<p>所以Vue提供了组件化的方式: 每个组件有自己相应的css、html、js等代码,体现了组件的封装，解决了传统方式存在的问题</p>
<h3 id="组件化的基本使用"><a href="#组件化的基本使用" class="headerlink" title="组件化的基本使用"></a>组件化的基本使用</h3><p>具体步骤：</p>
<ol>
<li>使用组件构造器创建组件</li>
<li>注册组件</li>
<li>使用组件</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mycpn</span>&gt;</span><span class="tag">&lt;/<span class="name">mycpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app2&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//1.使用组件构造器创建组件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> cpnc = Vue.extend(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//自定义的模板</span></span></span><br><span class="line">        template:`</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            	<span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            	<span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="comment">//2.注册组件，并起标签名（该组件为全局组件可以在多个vue实例中使用）</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;mycpn&#x27;</span>,cpnc)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="javascript">            message:<span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app2 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">&#x27;#app2&#x27;</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="javascript">            message:<span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        components:&#123;</span><br><span class="line"><span class="javascript">            <span class="comment">//cpn使用组件时的标签名</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//这种为局部组件</span></span></span><br><span class="line">            cpn:cpnc</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p> 语法糖写法：<code>Vue.component(&#39;mycpn&#39;,&#123;template:</code><div><h2>我是标题</h2></div><code>&#125;)</code></p>
</blockquote>
<h3 id="组件的嵌套"><a href="#组件的嵌套" class="headerlink" title="组件的嵌套"></a>组件的嵌套</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">school</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">        Vue.config.productionTip = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> student = Vue.extend(&#123;</span></span><br><span class="line">            template:`</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生姓名：</span><span class="template-variable">&#123;&#123;<span class="name">stuName</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生年龄：</span><span class="template-variable">&#123;&#123;<span class="name">age</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">                    stuName:<span class="string">&#x27;小王&#x27;</span>,</span></span><br><span class="line">                    age:18</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> school = Vue.extend(&#123;</span></span><br><span class="line">            template:`</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校名称：</span><span class="template-variable">&#123;&#123;<span class="name">schoolName</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校地址：</span><span class="template-variable">&#123;&#123;<span class="name">address</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">student</span>&gt;</span><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">                    schoolName:<span class="string">&#x27;家里蹲&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    address:<span class="string">&#x27;屋头&#x27;</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            <span class="comment">//组件的嵌套</span></span></span><br><span class="line">            components:&#123;</span><br><span class="line">                student</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="comment">//局部注册</span></span></span><br><span class="line">            components:&#123;</span><br><span class="line">                school</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="模板的抽离"><a href="#模板的抽离" class="headerlink" title="模板的抽离"></a>模板的抽离</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 抽离模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用模板 --&gt;</span></span><br><span class="line">template:&#x27;#cpn&#x27;</span><br></pre></td></tr></table></figure>
<h3 id="父子组件的通信"><a href="#父子组件的通信" class="headerlink" title="父子组件的通信"></a>父子组件的通信</h3><h4 id="父组件向子组件通信"><a href="#父组件向子组件通信" class="headerlink" title="父组件向子组件通信"></a>父组件向子组件通信</h4><p>通过props向子组件传递数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//子组件利用props属性接收</span></span><br><span class="line"><span class="comment">//方式1以数组的方式接收</span></span><br><span class="line">props:[<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>,<span class="string">&#x27;age&#x27;</span>] 简单接收</span><br><span class="line"><span class="comment">//方式2对象得复杂写法，可以进行类型的限制</span></span><br><span class="line">props:&#123;</span><br><span class="line">    name:<span class="built_in">String</span>,</span><br><span class="line">    age:<span class="built_in">Number</span>,</span><br><span class="line">    sex:<span class="built_in">String</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方式3最复杂写法</span></span><br><span class="line">props:&#123;</span><br><span class="line">    name:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>, <span class="comment">//类型</span></span><br><span class="line">        required:<span class="literal">true</span> <span class="comment">//是否必要的</span></span><br><span class="line">    &#125;,</span><br><span class="line">    age:&#123;</span><br><span class="line">        type:<span class="built_in">Number</span>,</span><br><span class="line">        <span class="keyword">default</span>:<span class="number">99</span> <span class="comment">//默认值</span></span><br><span class="line">    &#125;,</span><br><span class="line">    sex:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>,</span><br><span class="line">        required:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//父组件以标签属性传值,注意不使用v-bind会直接以字符串形式传递</span></span><br><span class="line">&lt;Student :name=<span class="string">&quot;李四&quot;</span> :sex=<span class="string">&quot;女&quot;</span> :age=<span class="string">&quot;18&quot;</span>/&gt; </span><br></pre></td></tr></table></figure>
<h4 id="子组件向父组件通信"><a href="#子组件向父组件通信" class="headerlink" title="子组件向父组件通信"></a>子组件向父组件通信</h4><p>通过自定义事件向父组件发送数据</p>
<p>子组件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;stu&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生名:&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>性别：&#123;&#123;sex&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sendName&quot;</span>&gt;</span>把学生名传给app<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;unbind&quot;</span>&gt;</span>解绑事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name:<span class="string">&#x27;Student&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">           name:<span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="javascript">           sex:<span class="string">&#x27;男&#x27;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">sendName</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//触发绑定的getName事件,并传参</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.$emit(<span class="string">&#x27;getName&#x27;</span>,<span class="built_in">this</span>.name);</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">unbind</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//解绑事件(只适用单个事件,多个参数传[]数据,不传参数就等于解绑所有自定义事件)</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.$off(<span class="string">&#x27;getName&#x27;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>父组件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 给子组件绑定一个自定义事件：实现子给父传数据 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Student</span> <span class="attr">v-on:getName</span>=<span class="string">&quot;getStudentName&quot;</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--@click.native表明该事件为原生事件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span> <span class="attr">ref</span>=<span class="string">&quot;student&quot;</span> @<span class="attr">click.native</span>=<span class="string">&quot;show&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Student <span class="keyword">from</span> <span class="string">&#x27;./components/Student.vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name:<span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line">    components: &#123; Student &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        msg:<span class="string">&#x27;你好啊！！！&#x27;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">getStudentName</span>(<span class="params">name</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;学生名：&quot;</span>+name);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//同样可以绑定事件</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$refs.student.$on(<span class="string">&#x27;getName&#x27;</span>,<span class="built_in">this</span>.getStudentName)</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="父子组件之间的访问"><a href="#父子组件之间的访问" class="headerlink" title="父子组件之间的访问"></a>父子组件之间的访问</h3><h4 id="父组件访问子组件"><a href="#父组件访问子组件" class="headerlink" title="父组件访问子组件"></a>父组件访问子组件</h4><p>使用$children或$refs</p>
<ol>
<li><code>this.$children</code>获得子组件数组</li>
<li><code>this.refs</code>获取标有ref属性的子组件数组，若是原生DOM则获取的是原生DOM元素</li>
</ol>
<h4 id="子组件访问父组件"><a href="#子组件访问父组件" class="headerlink" title="子组件访问父组件"></a>子组件访问父组件</h4><p> 使用$parent</p>
<ol>
<li><code>this.$parent</code>获得父组件（不常用）</li>
</ol>
<h4 id="访问根组件"><a href="#访问根组件" class="headerlink" title="访问根组件"></a>访问根组件</h4><p>使用$root</p>
<ol>
<li><code>this.$root</code>获得根组件</li>
</ol>
<h3 id="组件之间的访问"><a href="#组件之间的访问" class="headerlink" title="组件之间的访问"></a>组件之间的访问</h3><h4 id="全局事件总线"><a href="#全局事件总线" class="headerlink" title="全局事件总线"></a>全局事件总线</h4><p>可以任意组件间进行通信</p>
<p>总线特点：</p>
<pre><code> 1. 对于所有组件都可见
 2. 可以调用$on、$off、$emit
</code></pre>
<p>Vue的原型对象刚好符合(最好放在这里)</p>
<ul>
<li><p>在main.js中布局全局事件总线</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入Vue</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入App</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">//关闭Vue的生产提示</span></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const demo = Vue.extend(&#123;&#125;)</span></span><br><span class="line"><span class="comment">// Vue.prototype.x = new demo()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">    <span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Vue.prototype.$bus = <span class="built_in">this</span>  <span class="comment">//布局全局事件总线</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>进行组件间通信</p>
<p>组件1（接收方，给总线绑定事件）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;stu&quot;&gt;</span><br><span class="line">      &lt;h2&gt;学生名:&#123;&#123;name&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">      &lt;h2&gt;性别：&#123;&#123;sex&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#39;Student&#39;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">           name:&#39;张三&#39;,</span><br><span class="line">           sex:&#39;男&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted()&#123;</span><br><span class="line">        this.$bus.$on(&#39;hello&#39;,((data)&#x3D;&gt;&#123;</span><br><span class="line">            console.log(&#39;我是Student组件，收到了数据&#39;,data)</span><br><span class="line">        &#125;))</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeDestroy()&#123;</span><br><span class="line">        this.$bus.$off(&#39;hello&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .stu&#123;</span><br><span class="line">        background-color: aquamarine;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>
<p>组件2发送数据方（调用接收方给总线绑定的事件）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;school&quot;&gt;</span><br><span class="line">      &lt;h2&gt;学校名称:&#123;&#123;schoolName&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">      &lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">      &lt;button @click&#x3D;&quot;sendSchoolName&quot;&gt;把学校名给student组件&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#39;School&#39;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">           schoolName:&#39;家里蹲&#39;,</span><br><span class="line">           address:&#39;屋头&#39; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        sendSchoolName()&#123;</span><br><span class="line">            this.$bus.$emit(&#39;hello&#39;, this.schoolName)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .school&#123;</span><br><span class="line">        background-color: aquamarine;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>
<h4 id="消息订阅与发布"><a href="#消息订阅与发布" class="headerlink" title="消息订阅与发布"></a>消息订阅与发布</h4></li>
</ul>
<p>同样用于任意组件间通信</p>
<p>基于pubsub-js </p>
<ol>
<li><p>安装pubsub-js ： npm i pubsub-js</p>
</li>
<li><p>引入js ：import pubsub from ‘pubsub-js’</p>
</li>
<li><p>接收数据方需要订阅消息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mounted()&#123;</span><br><span class="line">        this.pubId &#x3D; pubsub.subscribe(&#39;hello&#39;,(msgName,data)&#x3D;&gt;&#123;</span><br><span class="line">            console.log(&#39;有人发布了&#39;+msgName+&#39;消息&#39;,+data)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeCreate()&#123;</span><br><span class="line">        pubsub.unsubscribe(this.pubId)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>发送数据方需要发布消息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">        sendSchoolName()&#123;</span><br><span class="line">            pubsub.publish(&#39;hello&#39;,666)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h3></li>
<li><p>语法：<code>this.$nextTick(&#39;xxx&#39;,数据)</code></p>
</li>
<li><p>作用：在下一次DOM更新结束后执行其指定的回调</p>
</li>
</ol>
<h3 id="slot插槽"><a href="#slot插槽" class="headerlink" title="slot插槽"></a>slot插槽</h3><p>插槽的作用：</p>
<ol>
<li>组件的插槽也是为了让我们封装的组件更加具有扩展性。</li>
<li>让使用者可以决定组件内部的一些内容到底展示什么。</li>
</ol>
<h4 id="1-默认插槽"><a href="#1-默认插槽" class="headerlink" title="1.默认插槽"></a>1.默认插槽</h4><p>子组件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div class&#x3D;&quot;category&quot;&gt;</span><br><span class="line">		&lt;h3&gt;&#123;&#123;title&#125;&#125;分类&lt;&#x2F;h3&gt;</span><br><span class="line">		&lt;!-- 定义一个插槽（挖个坑，等着组件的使用者进行填充） --&gt;</span><br><span class="line">		&lt;slot&gt;我是一些默认值，当使用者没有传递具体结构时，我会出现&lt;&#x2F;slot&gt;</span><br><span class="line">	&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>
<p>父组件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">		&lt;Category title&#x3D;&quot;美食&quot; &gt;</span><br><span class="line">			&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;s3.ax1x.com&#x2F;2021&#x2F;01&#x2F;16&#x2F;srJlq0.jpg&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">		&lt;&#x2F;Category&gt;</span><br><span class="line"></span><br><span class="line">		&lt;Category title&#x3D;&quot;游戏&quot; &gt;</span><br><span class="line">			&lt;ul&gt;</span><br><span class="line">				&lt;li v-for&#x3D;&quot;(g,index) in games&quot; :key&#x3D;&quot;index&quot;&gt;&#123;&#123;g&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">			&lt;&#x2F;ul&gt;</span><br><span class="line">		&lt;&#x2F;Category&gt;</span><br><span class="line"></span><br><span class="line">		&lt;Category title&#x3D;&quot;电影&quot;&gt;</span><br><span class="line">			&lt;video controls src&#x3D;&quot;http:&#x2F;&#x2F;clips.vorwaerts-gmbh.de&#x2F;big_buck_bunny.mp4&quot;&gt;&lt;&#x2F;video&gt;</span><br><span class="line">		&lt;&#x2F;Category&gt;</span><br><span class="line">	&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>
<h4 id="2-具名插槽"><a href="#2-具名插槽" class="headerlink" title="2.具名插槽"></a>2.具名插槽</h4><p>子组件中的插槽加个name，以便引用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;slot name&#x3D;&quot;center&quot;&gt;我是一些默认值，当使用者没有传递具体结构时，我会出现1&lt;&#x2F;slot&gt;</span><br><span class="line">&lt;slot name&#x3D;&quot;footer&quot;&gt;我是一些默认值，当使用者没有传递具体结构时，我会出现2&lt;&#x2F;slot&gt;</span><br></pre></td></tr></table></figure>
<p>父组件中的组件用slot属性指明插入哪个插槽(同样可以用v-slot:center)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Category title&#x3D;&quot;美食&quot; &gt;</span><br><span class="line">	&lt;img slot&#x3D;&quot;center&quot; src&#x3D;&quot;https:&#x2F;&#x2F;s3.ax1x.com&#x2F;2021&#x2F;01&#x2F;16&#x2F;srJlq0.jpg&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">	&lt;a slot&#x3D;&quot;footer&quot; href&#x3D;&quot;http:&#x2F;&#x2F;www.baidu.com&quot;&gt;更多美食&lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;Category&gt;</span><br></pre></td></tr></table></figure>
<h4 id="3-作用域插槽"><a href="#3-作用域插槽" class="headerlink" title="3.作用域插槽"></a>3.作用域插槽</h4><p>子组件可以通过slot向插槽使用者传输数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div class&#x3D;&quot;category&quot;&gt;</span><br><span class="line">		&lt;h3&gt;&#123;&#123;title&#125;&#125;分类&lt;&#x2F;h3&gt;</span><br><span class="line">		&lt;slot :games&#x3D;&quot;games&quot; msg&#x3D;&quot;hello&quot;&gt;我是默认的一些内容&lt;&#x2F;slot&gt;</span><br><span class="line">	&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>
<p>父组件 必须用template标签包裹，不然接收不到数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line"></span><br><span class="line">		&lt;Category title&#x3D;&quot;游戏&quot;&gt;</span><br><span class="line">			&lt;template scope&#x3D;&quot;wht&quot;&gt;</span><br><span class="line">				&lt;ul&gt;</span><br><span class="line">					&lt;li v-for&#x3D;&quot;(g,index) in wht.games&quot; :key&#x3D;&quot;index&quot;&gt;&#123;&#123;g&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">				&lt;&#x2F;ul&gt;</span><br><span class="line">			&lt;&#x2F;template&gt;</span><br><span class="line">		&lt;&#x2F;Category&gt;</span><br><span class="line"></span><br><span class="line">		&lt;Category title&#x3D;&quot;游戏&quot;&gt;</span><br><span class="line">			&lt;template scope&#x3D;&quot;&#123;games&#125;&quot;&gt;</span><br><span class="line">				&lt;ol&gt;</span><br><span class="line">					&lt;li style&#x3D;&quot;color:red&quot; v-for&#x3D;&quot;(g,index) in games&quot; :key&#x3D;&quot;index&quot;&gt;&#123;&#123;g&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">				&lt;&#x2F;ol&gt;</span><br><span class="line">			&lt;&#x2F;template&gt;</span><br><span class="line">		&lt;&#x2F;Category&gt;</span><br><span class="line"></span><br><span class="line">	&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>
<h3 id="mixin混入"><a href="#mixin混入" class="headerlink" title="mixin混入"></a>mixin混入</h3><p>混合js文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mixin = &#123;</span><br><span class="line">    methods:&#123;</span><br><span class="line">        <span class="function"><span class="title">showName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            alert(<span class="built_in">this</span>.name)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>局部混合</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;引入混合(局部混合)</span><br><span class="line">import &#123;mixin&#125; from &#39;..&#x2F;mixin&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#39;Student&#39;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">           name:&#39;张三&#39;,</span><br><span class="line">           sex:&#39;男&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">   mixins:[mixin]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>全局混入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;全局混合</span><br><span class="line">import &#123;mixin&#125; from &#39;.&#x2F;mixin&#39;</span><br><span class="line">Vue.mixin(mixin)</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>vue</tag>
        <tag>组件化</tag>
      </tags>
  </entry>
  <entry>
    <title>享元模式</title>
    <url>/2021/03/11/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><p>它使用共享物件，用来尽可能减少内存使用量以及分享资讯给尽可能多的相似物件；它适合用于只是因重复而导致使用无法令人接受的大量内存的大量物件。主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式。（例如各种池技术就是使用的享元模式）</p>
<h2 id="2-具体实现"><a href="#2-具体实现" class="headerlink" title="2.具体实现"></a>2.具体实现</h2><h3 id="2-1代码"><a href="#2-1代码" class="headerlink" title="2.1代码"></a>2.1代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 设计模式;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyweightPattern</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FlyweightFactory factory = <span class="keyword">new</span> FlyweightFactory();</span><br><span class="line">        Flyweight f01 = factory.getFlyweight(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        Flyweight f02 = factory.getFlyweight(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        Flyweight f03 = factory.getFlyweight(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        Flyweight f11 = factory.getFlyweight(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        Flyweight f12 = factory.getFlyweight(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        f01.operation(<span class="keyword">new</span> UnsharedConcreteFlyweight(<span class="string">&quot;第1次调用a。&quot;</span>));</span><br><span class="line">        f02.operation(<span class="keyword">new</span> UnsharedConcreteFlyweight(<span class="string">&quot;第2次调用a。&quot;</span>));</span><br><span class="line">        f11.operation(<span class="keyword">new</span> UnsharedConcreteFlyweight(<span class="string">&quot;第1次调用b。&quot;</span>));</span><br><span class="line">        f12.operation(<span class="keyword">new</span> UnsharedConcreteFlyweight(<span class="string">&quot;第2次调用b。&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//非享元外部信息</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnsharedConcreteFlyweight</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String info;</span><br><span class="line">    UnsharedConcreteFlyweight(String info) &#123;</span><br><span class="line">        <span class="keyword">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInfo</span><span class="params">(String info)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//抽象享元对象</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Flyweight</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(UnsharedConcreteFlyweight state)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//具体享元对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteFlyweight</span> <span class="keyword">implements</span> <span class="title">Flyweight</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line">    ConcreteFlyweight(String key) &#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        System.out.println(<span class="string">&quot;具体享元&quot;</span> + key + <span class="string">&quot;被创建！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(UnsharedConcreteFlyweight outState)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;具体享元&quot;</span> + key + <span class="string">&quot;被调用，&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;非享元信息是:&quot;</span> + outState.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//享元工厂角色</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyweightFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String, Flyweight&gt; flyweights = <span class="keyword">new</span> HashMap&lt;String, Flyweight&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Flyweight <span class="title">getFlyweight</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        Flyweight flyweight = (Flyweight) flyweights.get(key);</span><br><span class="line">        <span class="keyword">if</span> (flyweight != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;具体享元&quot;</span> + key + <span class="string">&quot;已经存在，被成功获取！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            flyweight = <span class="keyword">new</span> ConcreteFlyweight(key);</span><br><span class="line">            flyweights.put(key, flyweight);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flyweight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="3-优点"><a href="#3-优点" class="headerlink" title="3.优点"></a>3.优点</h2><ul>
<li>相同对象只要保存一份，这降低了系统中对象的数量，大大减少对象的创建，降低系统的内存，使效率提高。</li>
</ul>
<h2 id="4-缺点"><a href="#4-缺点" class="headerlink" title="4.缺点"></a>4.缺点</h2><ul>
<li>为了使对象可以共享，需要将一些不能共享的状态外部化，这将增加程序的复杂性。</li>
<li>读取享元模式的外部状态会使得运行时间稍微变长。</li>
</ul>
<h2 id="5-使用场景"><a href="#5-使用场景" class="headerlink" title="5.使用场景"></a>5.使用场景</h2><ul>
<li>当系统中多处需要同一组信息时，可以把这些信息封装到一个对象中，然后对该对象进行缓存，这样，一个对象就可以提供给多出需要使用的地方，避免大量同一对象的多次创建，降低大量内存空间的消耗。</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>享元模式</tag>
      </tags>
  </entry>
  <entry>
    <title>代理模式</title>
    <url>/2021/03/09/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><p>为其他对象提供一种代理以控制对这个对象的访问。在某些情况下，一个对象不适合或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用。</p>
<h2 id="2-具体实现"><a href="#2-具体实现" class="headerlink" title="2.具体实现"></a>2.具体实现</h2><h3 id="2-1代码"><a href="#2-1代码" class="headerlink" title="2.1代码"></a>2.1代码</h3><ol>
<li>静态代理</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 设计模式;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyPattern01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IphoneProxy iphoneProxy = <span class="keyword">new</span> IphoneProxy(<span class="keyword">new</span> IphoneFactoryImpl());</span><br><span class="line">        iphoneProxy.create();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//服务类接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IphoneFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//直接实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IphoneFactoryImpl</span> <span class="keyword">implements</span> <span class="title">IphoneFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;厂家直销&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代理实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IphoneProxy</span> <span class="keyword">implements</span> <span class="title">IphoneFactory</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IphoneFactoryImpl impl;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IphoneProxy</span><span class="params">(IphoneFactoryImpl impl)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.impl=impl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我来代理&quot;</span>);</span><br><span class="line">        impl.create();</span><br><span class="line">        System.out.println(<span class="string">&quot;有优惠&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><p>动态代理</p>
<p> 2.1 使用 Proxy代理</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyPattern02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Producer producer = <span class="keyword">new</span> Producer();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 动态代理：</span></span><br><span class="line"><span class="comment">         *  特点：字节码随用随创建，随用随加载</span></span><br><span class="line"><span class="comment">         *  作用：不修改源码的基础上对方法增强</span></span><br><span class="line"><span class="comment">         *  分类：</span></span><br><span class="line"><span class="comment">         *      基于接口的动态代理</span></span><br><span class="line"><span class="comment">         *      基于子类的动态代理</span></span><br><span class="line"><span class="comment">         *  基于接口的动态代理：</span></span><br><span class="line"><span class="comment">         *      涉及的类：Proxy</span></span><br><span class="line"><span class="comment">         *      提供者：JDK官方</span></span><br><span class="line"><span class="comment">         *  如何创建代理对象：</span></span><br><span class="line"><span class="comment">         *      使用Proxy类中的newProxyInstance方法</span></span><br><span class="line"><span class="comment">         *  创建代理对象的要求：</span></span><br><span class="line"><span class="comment">         *      被代理类最少实现一个接口，如果没有则不能使用</span></span><br><span class="line"><span class="comment">         *  newProxyInstance方法的参数：</span></span><br><span class="line"><span class="comment">         *      ClassLoader：类加载器</span></span><br><span class="line"><span class="comment">         *          它是用于加载代理对象字节码的。和被代理对象使用相同的类加载器。固定写法。</span></span><br><span class="line"><span class="comment">         *      Class[]：字节码数组</span></span><br><span class="line"><span class="comment">         *          它是用于让代理对象和被代理对象有相同方法。固定写法。</span></span><br><span class="line"><span class="comment">         *      InvocationHandler：用于提供增强的代码</span></span><br><span class="line"><span class="comment">         *          它是让我们写如何代理。我们一般都是些一个该接口的实现类，通常情况下都是匿名内部类，但不是必须的。</span></span><br><span class="line"><span class="comment">         *          此接口的实现类都是谁用谁写。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        IProducer proxyProducer = (IProducer) Proxy.newProxyInstance(producer.getClass().getClassLoader(),</span><br><span class="line">                producer.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 作用：执行被代理对象的任何接口方法都会经过该方法</span></span><br><span class="line"><span class="comment">                     * 方法参数的含义</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> proxy   代理对象的引用</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> method  当前执行的方法</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> args    当前执行方法所需的参数</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@return</span>        和被代理对象方法有相同的返回值</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                        <span class="comment">//提供增强的代码</span></span><br><span class="line">                        Object returnValue = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//1.获取方法执行的参数</span></span><br><span class="line">                        Float money = (Float)args[<span class="number">0</span>];</span><br><span class="line">                        <span class="comment">//2.判断当前方法是不是销售</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="string">&quot;saleProduct&quot;</span>.equals(method.getName())) &#123;</span><br><span class="line">                            returnValue = method.invoke(producer, money*<span class="number">0.8f</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> returnValue;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        proxyProducer.saleProduct(<span class="number">10000f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对生产厂家要求的接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销售</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saleProduct</span><span class="params">(<span class="keyword">float</span> money)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 售后</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterService</span><span class="params">(<span class="keyword">float</span> money)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个生产者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">IProducer</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销售</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saleProduct</span><span class="params">(<span class="keyword">float</span> money)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;销售产品，并拿到钱：&quot;</span>+money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 售后</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterService</span><span class="params">(<span class="keyword">float</span> money)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;提供售后服务，并拿到钱：&quot;</span>+money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 2.2 CGLIB代理</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyPattern03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Producer producer = <span class="keyword">new</span> Producer();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 动态代理：</span></span><br><span class="line"><span class="comment">         *  特点：字节码随用随创建，随用随加载</span></span><br><span class="line"><span class="comment">         *  作用：不修改源码的基础上对方法增强</span></span><br><span class="line"><span class="comment">         *  分类：</span></span><br><span class="line"><span class="comment">         *      基于接口的动态代理</span></span><br><span class="line"><span class="comment">         *      基于子类的动态代理</span></span><br><span class="line"><span class="comment">         *  基于子类的动态代理：</span></span><br><span class="line"><span class="comment">         *      涉及的类：Enhancer</span></span><br><span class="line"><span class="comment">         *      提供者：第三方cglib库</span></span><br><span class="line"><span class="comment">         *  如何创建代理对象：</span></span><br><span class="line"><span class="comment">         *      使用Enhancer类中的create方法</span></span><br><span class="line"><span class="comment">         *  创建代理对象的要求：</span></span><br><span class="line"><span class="comment">         *      被代理类不能是最终类</span></span><br><span class="line"><span class="comment">         *  create方法的参数：</span></span><br><span class="line"><span class="comment">         *      Class：字节码</span></span><br><span class="line"><span class="comment">         *          它是用于指定被代理对象的字节码。</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *      Callback：用于提供增强的代码</span></span><br><span class="line"><span class="comment">         *          它是让我们写如何代理。我们一般都是些一个该接口的实现类，通常情况下都是匿名内部类，但不是必须的。</span></span><br><span class="line"><span class="comment">         *          此接口的实现类都是谁用谁写。</span></span><br><span class="line"><span class="comment">         *          我们一般写的都是该接口的子接口实现类：MethodInterceptor</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Producer cglibProducer = (Producer)Enhancer.create(producer.getClass(), <span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 执行对象的任何方法都会经过该方法</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> proxy</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">             *    以上三个参数和基于接口的动态代理中invoke方法的参数是一样的</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> methodProxy ：当前执行方法的代理对象</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">             * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object proxy, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="comment">//提供增强的代码</span></span><br><span class="line">                Object returnValue = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//1.获取方法执行的参数</span></span><br><span class="line">                Float money = (Float)args[<span class="number">0</span>];</span><br><span class="line">                <span class="comment">//2.判断当前方法是不是销售</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="string">&quot;saleProduct&quot;</span>.equals(method.getName())) &#123;</span><br><span class="line">                    returnValue = method.invoke(producer, money*<span class="number">0.8f</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> returnValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        cglibProducer.saleProduct(<span class="number">12000f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个生产者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销售</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saleProduct</span><span class="params">(<span class="keyword">float</span> money)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;销售产品，并拿到钱：&quot;</span>+money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 售后</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterService</span><span class="params">(<span class="keyword">float</span> money)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;提供售后服务，并拿到钱：&quot;</span>+money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="3-优点"><a href="#3-优点" class="headerlink" title="3.优点"></a>3.优点</h2><ul>
<li>代理模式在客户端与目标对象之间起到一个中介作用和保护目标对象的作用；</li>
<li>代理对象可以扩展目标对象的功能；</li>
<li>代理模式能将客户端与目标对象分离，在一定程度上降低了系统的耦合度，增加了程序的可扩展性</li>
</ul>
<h2 id="4-缺点"><a href="#4-缺点" class="headerlink" title="4.缺点"></a>4.缺点</h2><ul>
<li>代理模式会造成系统设计中类的数量增加</li>
<li>在客户端和目标对象之间增加一个代理对象，会造成请求处理速度变慢；</li>
<li>增加了系统的复杂度；</li>
</ul>
<h2 id="5-使用场景"><a href="#5-使用场景" class="headerlink" title="5.使用场景"></a>5.使用场景</h2><ul>
<li>当无法或不想直接引用某个对象或访问某个对象存在困难时，可以通过代理对象来间接访问。使用代理模式主要有两个目的：一是保护目标对象，二是增强目标对象。</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>代理模式</tag>
      </tags>
  </entry>
  <entry>
    <title>冒泡排序</title>
    <url>/2021/05/03/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Iooooot/photos@master/blogAboutPic/162002842044.png" alt="image-20210324151736927"></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 算法;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 冒泡排序 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">3</span>,<span class="number">9</span>,-<span class="number">1</span>,<span class="number">10</span>,<span class="number">20</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> len = arr.length;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            flag = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; len-<span class="number">1</span>-i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[i]&gt;arr[j])&#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">                    arr[i] = arr[j];</span><br><span class="line">                    arr[j] = temp;</span><br><span class="line">                    flag =<span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>前缀和</title>
    <url>/2022/01/22/%E5%89%8D%E7%BC%80%E5%92%8C/</url>
    <content><![CDATA[<h1 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h1><h2 id="一维前缀和"><a href="#一维前缀和" class="headerlink" title="一维前缀和"></a>一维前缀和</h2><h3 id="简单分析"><a href="#简单分析" class="headerlink" title="简单分析"></a>简单分析</h3><p>一维前缀和：该位之前所有数之和，需要拿一个数组来存，前缀和的目的就是为了方便之后需要求数组中某一段的和不再需要重新遍历，只需要利用前缀和进行操作。</p>
<p>如：输入一个长度为 n 的整数序列。接下来再输入 m 个询问，每个询问输入一对 l,r。对于每个询问，输出原序列中从第 l个数到第 r个数的和。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100010</span></span><br><span class="line"><span class="keyword">int</span> a[N],s[N]; <span class="comment">//将比较大的数组定义为全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,l,r;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]); <span class="comment">//录入数组</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) s[i] = s[i<span class="number">-1</span>] + a[i]; <span class="comment">//求前缀和</span></span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;l,&amp;r);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; s[r] - s[l - <span class="number">1</span>]&lt;&lt;<span class="built_in">endl</span>; <span class="comment">//利用前缀和求l到r的和</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二维前缀和"><a href="#二维前缀和" class="headerlink" title="二维前缀和"></a>二维前缀和</h2><h3 id="简单分析-1"><a href="#简单分析-1" class="headerlink" title="简单分析"></a>简单分析</h3><p>二维前缀和：同样是指该点向上之前矩阵中所有数之和；需要二维数组来存，依然是为了方便求二维矩阵数组中某个子矩阵的和。</p>
<p>如：输入一个 n 行 m 列的整数矩阵，再输入 q 个询问，每个询问包含四个整数 x1,y1,x2,y2表示一个子矩阵的左上角坐标和右下角坐标。对于每个询问输出子矩阵中所有数的和。</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1010</span></span><br><span class="line"><span class="keyword">int</span> a[N][N],s[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,q,x1,y1,x2,y2;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123; <span class="comment">//注意要从1开始</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i][j]); <span class="comment">//录入数组</span></span><br><span class="line">            s[i][j] = s[i<span class="number">-1</span>][j] + s[i][j<span class="number">-1</span>] - s[i<span class="number">-1</span>][j<span class="number">-1</span>] + a[i][j]; <span class="comment">//根据公式计算前缀和</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2); <span class="comment">//录入坐标</span></span><br><span class="line">        <span class="keyword">int</span> ans = s[x2][y2] - s[x1 - <span class="number">1</span>][y2] - s[x2][y1 - <span class="number">1</span>] + s[x1 - <span class="number">1</span>][y1 - <span class="number">1</span>]; <span class="comment">//根据公式计算两坐标之间子矩阵和</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>博客的搭建</title>
    <url>/2021/02/22/%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="博客的搭建"><a href="#博客的搭建" class="headerlink" title="博客的搭建"></a>博客的搭建</h1><h2 id="1-环境的准备"><a href="#1-环境的准备" class="headerlink" title="1.环境的准备"></a>1.环境的准备</h2><h3 id="1-1下载node-js"><a href="#1-1下载node-js" class="headerlink" title="1.1下载node.js"></a>1.1下载node.js</h3><p>官方地址：<a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a></p>
<h3 id="1-2安装node-js"><a href="#1-2安装node-js" class="headerlink" title="1.2安装node.js"></a>1.2安装node.js</h3><p>….此处省略(只会要一直next即可有手就行:smiley:)</p>
<h2 id="1-3使用命令行-在win10环境下"><a href="#1-3使用命令行-在win10环境下" class="headerlink" title="1.3使用命令行(在win10环境下)"></a>1.3使用命令行(在win10环境下)</h2><h3 id="1-3-1查看是否安装成功"><a href="#1-3-1查看是否安装成功" class="headerlink" title="1.3.1查看是否安装成功"></a>1.3.1查看是否安装成功</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>
<p>若没有显示版本则未安装成功</p>
<h3 id="1-3-2安装镜像源cnpm"><a href="#1-3-2安装镜像源cnpm" class="headerlink" title="1.3.2安装镜像源cnpm"></a>1.3.2安装镜像源cnpm</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https:<span class="comment">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure>
<h3 id="1-3-3安装hexo博客框架"><a href="#1-3-3安装hexo博客框架" class="headerlink" title="1.3.3安装hexo博客框架"></a>1.3.3安装hexo博客框架</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>同样可以使用 hexo -v来查看版本和是否安装成功</p>
<h3 id="1-3-4-安装git"><a href="#1-3-4-安装git" class="headerlink" title="1.3.4 安装git"></a>1.3.4 安装git</h3><p>官方地址:<a href="https://git-scm.com/">https://git-scm.com/</a></p>
<p>同样一直next,若安装成功鼠标右会多两个git选项</p>
<h3 id="1-3-5创建文件夹"><a href="#1-3-5创建文件夹" class="headerlink" title="1.3.5创建文件夹"></a>1.3.5创建文件夹</h3><p>选择一个你想存放博客的地方创建一个文件夹</p>
<h3 id="1-3-6开始安装博客"><a href="#1-3-6开始安装博客" class="headerlink" title="1.3.6开始安装博客"></a>1.3.6开始安装博客</h3><ul>
<li>在你文件夹下右键点击Git Bash Here进入git命令行</li>
<li>输入hexo init 命令</li>
<li>出现Start blogging with Hexo!说明安装成功</li>
</ul>
<h3 id="1-3-7hexo基本命令"><a href="#1-3-7hexo基本命令" class="headerlink" title="1.3.7hexo基本命令"></a>1.3.7hexo基本命令</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//开启博客</span></span><br><span class="line">$ hexo server</span><br><span class="line"><span class="comment">//创建一篇博文(生成的md文件在source\_posts路径下)</span></span><br><span class="line"><span class="comment">//md文件推荐使用Typora编辑</span></span><br><span class="line">$ hexo <span class="keyword">new</span> <span class="string">&quot;题目&quot;</span></span><br><span class="line"><span class="comment">//生成静态文件  </span></span><br><span class="line">$ hexo generate</span><br><span class="line"><span class="comment">//清理缓存文件</span></span><br><span class="line">$ hexo clean</span><br><span class="line"><span class="comment">//部署网站</span></span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>更多具体命令参考<a href="https://hexo.io/zh-cn/docs/commands.html">https://hexo.io/zh-cn/docs/commands.html</a></p>
<h3 id="1-3-7基本使用"><a href="#1-3-7基本使用" class="headerlink" title="1.3.7基本使用"></a>1.3.7基本使用</h3><ol>
<li>先使用hexo n “xxxx”创建一篇文章</li>
<li>然后再hexo clean清理缓存</li>
<li>hexo generate 生成静态文件</li>
<li>hexo s启动博客</li>
<li>在浏览器中输入<a href="http://localhost:4000/%E5%8D%B3%E5%8F%AF%E8%AE%BF%E9%97%AE">http://localhost:4000/即可访问</a></li>
</ol>
<p>​    </p>
<h2 id="1-4将博客部署到github上-其他人就可以公网访问"><a href="#1-4将博客部署到github上-其他人就可以公网访问" class="headerlink" title="1.4将博客部署到github上(其他人就可以公网访问)"></a>1.4将博客部署到github上(其他人就可以公网访问)</h2><h3 id="1-4-1github创建一个远程厂库"><a href="#1-4-1github创建一个远程厂库" class="headerlink" title="1.4.1github创建一个远程厂库"></a>1.4.1github创建一个远程厂库</h3><p>….此处省略(仓库名一定为[github的昵称].github.io)</p>
<h3 id="1-4-2返回命令行安装git插件"><a href="#1-4-2返回命令行安装git插件" class="headerlink" title="1.4.2返回命令行安装git插件"></a>1.4.2返回命令行安装git插件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//输入该命令即可</span></span><br><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>
<h3 id="1-4-3设置-config-yml"><a href="#1-4-3设置-config-yml" class="headerlink" title="1.4.3设置_config.yml"></a>1.4.3设置_config.yml</h3><ul>
<li><p>原生样子：</p>
<p>  <img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Iooooot/photos@master/blogAboutPic/image-20210215183314966.png" alt="image-20210215183314966"></p>
</li>
<li><p>修改后</p>
<p>  <img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Iooooot/photos@master/blogAboutPic/image-20210215183609944.png" alt="image-20210215183609944"></p>
</li>
</ul>
<h3 id="1-4-4部署到远端"><a href="#1-4-4部署到远端" class="headerlink" title="1.4.4部署到远端"></a>1.4.4部署到远端</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//部署命令的简写</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<h3 id="1-4-5部署成功并访问"><a href="#1-4-5部署成功并访问" class="headerlink" title="1.4.5部署成功并访问"></a>1.4.5部署成功并访问</h3><p>地址为：[github的昵称].github.io</p>
<h2 id="自定义主题"><a href="#自定义主题" class="headerlink" title="自定义主题"></a>自定义主题</h2><h3 id="1-在github上找hexo主题"><a href="#1-在github上找hexo主题" class="headerlink" title="1.在github上找hexo主题"></a>1.在github上找hexo主题</h3><p>….此处自行查找觉得ok的:sunglasses:</p>
<h3 id="2-下载主题"><a href="#2-下载主题" class="headerlink" title="2.下载主题"></a>2.下载主题</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.使用git 克隆到你的博客地址下的themes文件夹下</span></span><br></pre></td></tr></table></figure>
<p>$ git clone <a href="https://github.com/litten/hexo-theme-yilia.git">https://github.com/litten/hexo-theme-yilia.git</a>  themes/yilia</p>
<h3 id="3-再次修改-config-yml文件"><a href="#3-再次修改-config-yml文件" class="headerlink" title="3.再次修改_config.yml文件"></a>3.再次修改_config.yml文件</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Iooooot/photos@master/blogAboutPic/image-20210215190253523.png" alt="image-20210215190253523">    </p>
<p>这样theme 改成你克隆的主题，可以参考相应博客说明文档进行个性美化。</p>
<h3 id="4-重新清理缓存并生成一下"><a href="#4-重新清理缓存并生成一下" class="headerlink" title="4.重新清理缓存并生成一下"></a>4.重新清理缓存并生成一下</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure>
<h3 id="5-开启博客"><a href="#5-开启博客" class="headerlink" title="5.开启博客"></a>5.开启博客</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<h3 id="6-最后一步再次部署到远端"><a href="#6-最后一步再次部署到远端" class="headerlink" title="6.最后一步再次部署到远端"></a>6.最后一步再次部署到远端</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>若出现 ERROR Deployer not found: git</p>
<p>npm install <code>--</code>save hexo-deployer-git即可</p>
<hr>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>butterfly</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/2021/03/03/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><p>单例模式，属于创建类型的一种常用的设计模式。通过单例模式的方法创建的类在当前进程中只有一个实例，保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p>
<h2 id="2-具体实现"><a href="#2-具体实现" class="headerlink" title="2.具体实现"></a>2.具体实现</h2><h3 id="2-1常用实现方式"><a href="#2-1常用实现方式" class="headerlink" title="2.1常用实现方式"></a>2.1常用实现方式</h3><h4 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="双重检查"><a href="#双重检查" class="headerlink" title="双重检查"></a>双重检查</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">                    instance=<span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Instace</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Instace.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    INSTANCE;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whateverMethod</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​    一般情况下，建议使用饿汉方式。只有在要明确实现 lazy loading 效果时，才会使用静态内部类方式。如果涉及到反序列化创建对象时，可以尝试使用枚举方式。如果有其他特殊的需求，可以考虑使用双检锁方式。</p>
<h2 id="3-优点"><a href="#3-优点" class="headerlink" title="3.优点"></a>3.优点</h2><ul>
<li>在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。</li>
<li>避免对资源的多重占用（比如写文件操作）。</li>
</ul>
<h2 id="4-缺点"><a href="#4-缺点" class="headerlink" title="4.缺点"></a>4.缺点</h2><p>没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。</p>
<h2 id="5-使用场景"><a href="#5-使用场景" class="headerlink" title="5.使用场景"></a>5.使用场景</h2><ul>
<li><p>要求生产唯一序列号。</p>
</li>
<li><p>WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。</p>
</li>
<li><p>创建的一个对象需要消耗的资源过多，比如 I/O 与数据库的连接等。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>哈希排序</title>
    <url>/2021/05/20/%E5%93%88%E5%B8%8C%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul>
<li>先将数组分为length/2组，然后依次/2分组</li>
<li>每组进行插入排序</li>
<li>最后再进行总的插入排序</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Iooooot/photos@master/blogAboutPic/162002842082.png" alt="image-20210331111130034">    </p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 算法;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 希尔排序 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">8</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        shellSort(arr);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = arr.length;</span><br><span class="line">        <span class="comment">//循环进行分组，i表示分组数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = len/<span class="number">2</span>; i &gt;<span class="number">0</span> ; i/=<span class="number">2</span>) &#123;</span><br><span class="line">            <span class="comment">//开始插入排序</span></span><br><span class="line">          	<span class="comment">//因为分了组所以只遍历len-i次</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; len; j++) &#123;</span><br><span class="line">              	<span class="comment">//从k位开始遍历比较</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = j-i; k &gt;=<span class="number">0</span> ; k-=i) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(arr[k]&gt;arr[k+i])&#123;</span><br><span class="line">                        <span class="keyword">int</span> temp = arr[k];</span><br><span class="line">                        arr[k] = arr[k+i];</span><br><span class="line">                        arr[k+i] = temp;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>优化：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 算法;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 希尔排序 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">8</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        shellSort(arr);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = arr.length;</span><br><span class="line">        <span class="comment">//循环进行分组，i表示分组数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = len/<span class="number">2</span>; i &gt;<span class="number">0</span> ; i/=<span class="number">2</span>) &#123;</span><br><span class="line">            <span class="comment">//开始插入排序</span></span><br><span class="line">          	<span class="comment">//因为分了组所以只遍历len-i次</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; len; j++) &#123;</span><br><span class="line">              <span class="keyword">int</span> index = j;</span><br><span class="line">              <span class="keyword">int</span> temp = arr[index];</span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">int</span> k = j-i; k &gt;=<span class="number">0</span> ; k-=i) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(temp&lt;arr[k])&#123;</span><br><span class="line">                        arr[index]=arr[k];</span><br><span class="line">                      	index = k;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              arr[index] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>基数排序</title>
    <url>/2021/05/19/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>基数排序(Radix Sort)是<strong>桶排序</strong>的扩展，它的基本思想是：将整数按位数切割成不同的数字，然后按每个位数分别比较。<br>具体做法是：将所有待比较数值统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Iooooot/photos@master/blogAboutPic/162002841955.png" alt="image-20210406150910890"></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 算法;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 基数排序 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">53</span>,<span class="number">3</span>,<span class="number">542</span>,<span class="number">748</span>,<span class="number">1114</span>,<span class="number">214</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        radixSort(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">radixSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">        <span class="comment">//设置二维数组作为桶</span></span><br><span class="line">        <span class="keyword">int</span>[][] bucket = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>][arr.length];</span><br><span class="line">        <span class="comment">//设置每个桶的指针</span></span><br><span class="line">        <span class="keyword">int</span>[] bucketIndex = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">int</span> max = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;max)&#123;</span><br><span class="line">                max = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> len = (max+<span class="string">&quot;&quot;</span>).length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="comment">//算出这个数在哪个桶</span></span><br><span class="line">                <span class="keyword">int</span> numIndex = (arr[j]/((<span class="keyword">int</span>)Math.pow(<span class="number">10</span>, i)))%<span class="number">10</span>;</span><br><span class="line">                <span class="comment">//将这个数放入桶中</span></span><br><span class="line">                bucket[numIndex][bucketIndex[numIndex]]=arr[j];</span><br><span class="line">                bucketIndex[numIndex]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; bucketIndex.length; k++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(bucketIndex[k]!=<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt;bucketIndex[k] ; l++) &#123;</span><br><span class="line">                        arr[index++] = bucket[k][l];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                bucketIndex[k] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>外观模式</title>
    <url>/2021/03/12/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><p>外观模式（Facade Pattern）隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口。这种类型的设计模式属于结构型模式，它向现有的系统添加一个接口，来隐藏系统的复杂性。</p>
<h2 id="2-具体实现"><a href="#2-具体实现" class="headerlink" title="2.具体实现"></a>2.具体实现</h2><h3 id="2-1代码"><a href="#2-1代码" class="headerlink" title="2.1代码"></a>2.1代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 设计模式;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FacadePattern</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Facade facade = <span class="keyword">new</span> Facade();</span><br><span class="line">        facade.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//外观类 集成了多个子系统类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Facade</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SubSystem01 obj1 = <span class="keyword">new</span> SubSystem01();</span><br><span class="line">    <span class="keyword">private</span> SubSystem02 obj2 = <span class="keyword">new</span> SubSystem02();</span><br><span class="line">    <span class="keyword">private</span> SubSystem03 obj3 = <span class="keyword">new</span> SubSystem03();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        obj1.method1();</span><br><span class="line">        obj2.method2();</span><br><span class="line">        obj3.method3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子系统类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubSystem01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子系统01的method1()被调用！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子系统类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubSystem02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子系统02的method2()被调用！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子系统类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubSystem03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子系统03的method3()被调用！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="3-优点"><a href="#3-优点" class="headerlink" title="3.优点"></a>3.优点</h2><ul>
<li>实现了子系统与客户端之间的松耦合关系，提高灵活性，提高了安全性。</li>
<li>客户端屏蔽了子系统组件，减少了客户端所需处理的对象数目，并使得子系统使用起来更加容易。</li>
</ul>
<h2 id="4-缺点"><a href="#4-缺点" class="headerlink" title="4.缺点"></a>4.缺点</h2><ul>
<li>不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。</li>
</ul>
<h2 id="5-使用场景"><a href="#5-使用场景" class="headerlink" title="5.使用场景"></a>5.使用场景</h2><ul>
<li>设计初期阶段，应该有意识的将不同层分离，层与层之间建立外观模式。</li>
<li>开发阶段，子系统越来越复杂，增加外观模式提供一个简单的调用接口。</li>
<li>维护一个大型遗留系统的时候，可能这个系统已经非常难以维护和扩展，但又包含非常重要的功能，为其开发一个外观类，以便新系统与其交互。</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>外观模式</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用markdown</title>
    <url>/2021/02/23/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8markdown/</url>
    <content><![CDATA[<h1 id="Markdown简单使用-typora"><a href="#Markdown简单使用-typora" class="headerlink" title="Markdown简单使用(typora)"></a>Markdown简单使用(typora)</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[TOC]如下</span><br></pre></td></tr></table></figure>
<p>[TOC]</p>
<h2 id="1-如何写代码块"><a href="#1-如何写代码块" class="headerlink" title="1.如何写代码块"></a>1.如何写代码块</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.代码块语法</span></span><br><span class="line">​```java (语言类型)</span><br></pre></td></tr></table></figure>
<h2 id="2-标题"><a href="#2-标题" class="headerlink" title="2.标题"></a>2.标题</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题  </span><br></pre></td></tr></table></figure>
<h2 id="3-字体"><a href="#3-字体" class="headerlink" title="3.字体"></a>3.字体</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加粗</span></span><br><span class="line">**字**</span><br><span class="line"><span class="comment">//代码高亮显示</span></span><br><span class="line">==字==</span><br><span class="line"><span class="comment">//删除线</span></span><br><span class="line">~~字~~</span><br><span class="line"><span class="comment">//斜体</span></span><br><span class="line"> *字*</span><br></pre></td></tr></table></figure>
<p>//加粗<br><strong>字</strong><br>//代码高亮显示<br>==字==<br>//删除线<br><del>字</del><br>//斜体<br> <em>字</em></p>
<h2 id="4-引用"><a href="#4-引用" class="headerlink" title="4.引用"></a>4.引用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;引用<span class="number">1</span></span><br><span class="line">&gt;&gt;引用<span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;引用<span class="number">3</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>引用1</p>
<blockquote>
<p>引用2</p>
</blockquote>
<blockquote>
<blockquote>
<p>引用3</p>
</blockquote>
</blockquote>
</blockquote>
<h2 id="5-分割线"><a href="#5-分割线" class="headerlink" title="5.分割线"></a>5.分割线</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">分割线<span class="number">1</span>：---</span><br><span class="line">分割线<span class="number">2</span>：***</span><br></pre></td></tr></table></figure>
<hr>
<hr>
<h2 id="6-图片插入"><a href="#6-图片插入" class="headerlink" title="6.图片插入"></a>6.图片插入</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在线图片/本地图偏</span></span><br><span class="line">![我的照片](路径) --照片</span><br></pre></td></tr></table></figure>
<h2 id="7-超链接"><a href="#7-超链接" class="headerlink" title="7.超链接"></a>7.超链接</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[说明](超链接url地址)</span><br></pre></td></tr></table></figure>
<h2 id="8-列表"><a href="#8-列表" class="headerlink" title="8.列表"></a>8.列表</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//无序列表</span></span><br><span class="line">-目录<span class="number">1</span></span><br><span class="line">-目录<span class="number">2</span></span><br><span class="line"><span class="comment">//有序列表</span></span><br><span class="line">数字键+.标题</span><br></pre></td></tr></table></figure>
<ul>
<li>无序目录1</li>
</ul>
<ol>
<li>有序目录2</li>
</ol>
<h2 id="9-表格"><a href="#9-表格" class="headerlink" title="9.表格"></a>9.表格</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">一般使用右键插入列表！！</span><br></pre></td></tr></table></figure>
<h2 id="10-补充"><a href="#10-补充" class="headerlink" title="10.补充"></a>10.补充</h2><p>markdown支持html语法，会对相应标签进行解析！所以html标签也适用哦:smiley:</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>typora</tag>
      </tags>
  </entry>
  <entry>
    <title>工厂方法模式</title>
    <url>/2021/03/01/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><p>工厂方法模式（FACTORY METHOD）是一种常用的类==创建型==设计模式，意义是定义一个创建产品对象的工厂接口，将实际创建工作==推迟到子类当中==。“工厂方法模式”是对简单工厂模式的进一步抽象化，其好处是可以使系统在不修改原来代码的情况下引进新的产品，即满足开闭原则。</p>
<h2 id="2-具体实现"><a href="#2-具体实现" class="headerlink" title="2.具体实现"></a>2.具体实现</h2><h3 id="2-1类图"><a href="#2-1类图" class="headerlink" title="2.1类图"></a>2.1类图</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Iooooot/photos@master/blogAboutPic/161457850443.png" alt="image-20210223185316918"></p>
<h3 id="2-2代码"><a href="#2-2代码" class="headerlink" title="2.2代码"></a>2.2代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 设计模式;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryMethodPattern</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Water water = <span class="keyword">new</span> DrinksFactory().createWater();</span><br><span class="line">        Water water1 = <span class="keyword">new</span> SodaWaterFactory().createWater();</span><br><span class="line">        water.show();</span><br><span class="line">        water1.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象产品:提供产品接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span>  <span class="title">Water</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//产品A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Drinks</span> <span class="keyword">implements</span> <span class="title">Water</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;我是饮料&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//产品B</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SodaWater</span> <span class="keyword">implements</span> <span class="title">Water</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是苏打水&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//抽象工厂：提供生成产品接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AbstractFactory</span></span>&#123;</span><br><span class="line">    <span class="function">Water <span class="title">createWater</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//具体的子工厂A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrinksFactory</span> <span class="keyword">implements</span> <span class="title">AbstractFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Water <span class="title">createWater</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;饮料生产中.......&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Drinks();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//具体的子工厂B</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SodaWaterFactory</span> <span class="keyword">implements</span> <span class="title">AbstractFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Water <span class="title">createWater</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;苏打水生产中.......&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SodaWater();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="3-优点"><a href="#3-优点" class="headerlink" title="3.优点"></a>3.优点</h2><ul>
<li>用户只需要知道具体工厂的名称就可得到所要的产品，无须知道产品的具体创建过程。</li>
<li>灵活性增强，对于新产品的创建，只需多写一个相应的工厂类。</li>
<li>典型的解耦框架。高层模块只需要知道产品的抽象类，无须关心其他实现类，满足迪米特法则、依赖倒置原则和里氏替换原则。</li>
</ul>
<h2 id="4-缺点"><a href="#4-缺点" class="headerlink" title="4.缺点"></a>4.缺点</h2><ul>
<li>类的个数容易过多，增加复杂度</li>
<li>增加了系统的抽象性和理解难度</li>
<li>抽象产品只能生产一种产品，此弊端可使用抽象工厂模式解决。</li>
</ul>
<h2 id="5-使用场景"><a href="#5-使用场景" class="headerlink" title="5.使用场景"></a>5.使用场景</h2><ul>
<li><p>客户只知道创建产品的工厂名，而不知道具体的产品名。如 TCL 电视工厂、海信电视工厂等。</p>
</li>
<li><p>创建对象的任务由多个具体子工厂中的某一个完成，而抽象工厂只提供创建产品的接口。</p>
</li>
<li><p>客户不关心创建产品的细节，只关心产品的品牌</p>
</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>工厂方法</tag>
      </tags>
  </entry>
  <entry>
    <title>差值查找</title>
    <url>/2021/05/26/%E5%B7%AE%E5%80%BC%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<h1 id="插值查找"><a href="#插值查找" class="headerlink" title="插值查找"></a>插值查找</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>相当于对二分查找的一种优化，让mid指针更加精确</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Iooooot/photos@master/blogAboutPic/162002842031.png" alt="image-20210409173339371"></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 算法;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 插值查找 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">100</span> ; i++) &#123;</span><br><span class="line">           arr[i] = i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> index = insertValueSearch(arr, <span class="number">0</span>, arr.length-<span class="number">1</span>, <span class="number">99999</span>);</span><br><span class="line">        System.out.println(index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">insertValueSearch</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> left,<span class="keyword">int</span> right,<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(num&lt;arr[left]||num&gt;arr[right])&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> l =left;</span><br><span class="line">        <span class="keyword">int</span> r = right;</span><br><span class="line">        <span class="keyword">int</span> mid = l + (r-l)*(num-arr[l])/(arr[r]-arr[l]);</span><br><span class="line">        <span class="keyword">while</span> (l&lt;=r)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[mid]==num)&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(arr[mid]&gt;num)&#123;</span><br><span class="line">                r = mid-<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                l = mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mid = l + (r-l)*(num-arr[l])/(arr[r]-arr[l]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>查找</tag>
      </tags>
  </entry>
  <entry>
    <title>差分</title>
    <url>/2022/01/23/%E5%B7%AE%E5%88%86/</url>
    <content><![CDATA[<h1 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h1><p>差分和前缀和是密不可分的，如有一个数组a，就会对应有一个差分数组b。差分数组b的特性是：</p>
<p>a[i]=b1+b2+b3+…+bi,即为将数组a看做b的前缀和数组,a与b互为逆运算.</p>
<h2 id="一维差分"><a href="#一维差分" class="headerlink" title="一维差分"></a>一维差分</h2><h3 id="简单分析"><a href="#简单分析" class="headerlink" title="简单分析"></a>简单分析</h3><p>一维差分就是由一维数组组成的差分，主要运用差分数组的特性将求原数组a(b的前缀和数组)的某子区间进行加减操作从O(n)转化为O(1).</p>
<p>如：输入一个长度为 n 的整数序列。接下来输入 m 个操作，每个操作包含三个整数 l,r,c，表示将序列中 [l,r]之间的每个数加上 c。请你输出进行完所有操作后的序列。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100010</span></span><br><span class="line"><span class="keyword">int</span> a[N],b[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    b[l] += num; <span class="comment">//将第l个加上num因为a为b的前缀和所以l之后所有a[i]都会加上num</span></span><br><span class="line">    b[r+<span class="number">1</span>] -= num; <span class="comment">//由于只需要加到r所以需要将r+1处的b减去num用来抵消上面加的num</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]); <span class="comment">//录入原数组</span></span><br><span class="line">        insert(i,i,a[i]); <span class="comment">//求差分数组 就等于初始化原数组为0将每一位都加上a[i]</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="keyword">int</span> l,r,c;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;l,&amp;r,&amp;c);</span><br><span class="line">        insert(l,r,c); <span class="comment">//根据询问执行插入得到新的差分数组</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        a[i] = a[i<span class="number">-1</span>] + b[i];  <span class="comment">//重新逆运算求回原数组(即为求b数组的前缀和)</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二维差分"><a href="#二维差分" class="headerlink" title="二维差分"></a>二维差分</h2><h3 id="简单分析-1"><a href="#简单分析-1" class="headerlink" title="简单分析"></a>简单分析</h3><p>二维差分与一维类似只不过由线段变为矩阵，差分数组b变为一个矩阵，作用依然是运用差分数组的特性将求原数组a(b的前缀和数组)的某子区间进行加减操作从O(n)转化为O(1).</p>
<p>如：输入一个 n 行 m 列的整数矩阵，再输入 q个操作，每个操作包含五个整数 x1,y1,x2,y2,c其中 (x1,y1)(x1,y1) 和 (x2,y2)(x2,y2) 表示一个子矩阵的左上角坐标和右下角坐标。每个操作都要将选中的子矩阵中的每个元素的值加上 c。请你将进行完所有操作后的矩阵输出。</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p>差分公式分析</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.bmp.ovh/imgs/2022/01/7eb06571f25a9c17.png" alt="image-20220124132208934"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1010</span></span><br><span class="line"><span class="keyword">int</span> a[N][N],b[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x1,<span class="keyword">int</span> y1,<span class="keyword">int</span> x2,<span class="keyword">int</span> y2,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">    b[x1][y1] += c; <span class="comment">//先将起始坐标的差分数组+c等同于对于a数组(b的前缀和数组)x1,y1之后的整个矩阵都加上了c</span></span><br><span class="line">    <span class="comment">//由于只需要加到x2，y2坐标 就需要把x2，y2之后多余的矩阵减去c与刚才加的c抵消</span></span><br><span class="line">    b[x2 + <span class="number">1</span>][y1] -= c;</span><br><span class="line">    b[x1][y2 + <span class="number">1</span>] -= c;</span><br><span class="line">    b[x2 + <span class="number">1</span>][y2 + <span class="number">1</span>] += c; <span class="comment">//但是会减去两次一个重复的矩阵需要加回来一个</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i][j]); <span class="comment">//录入原矩阵</span></span><br><span class="line">            <span class="comment">//同样假设一开始a数组都为0则差分数组b也都为0，这样求a数组的差分数组就等同于从一开始的0插入a[i][j]依次得到新的差分数组</span></span><br><span class="line">            <span class="comment">//当原数组录入完则差分数组也计算完</span></span><br><span class="line">            insert(i,j,i,j,a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123; <span class="comment">//q次询问</span></span><br><span class="line">        <span class="keyword">int</span> x1,y1,x2,y2,c;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d%d&quot;</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2,&amp;c); <span class="comment">//录入两坐标和,需加的值c</span></span><br><span class="line">        insert(x1,y1,x2,y2,c); <span class="comment">//直接调用插入函数 更新差分数组</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据差分数组 逆运算求回所对应新的原数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">            a[i][j] =a[i - <span class="number">1</span>][j] + a[i][j - <span class="number">1</span>] - a[i - <span class="number">1</span>][j - <span class="number">1</span>] + b[i][j]; <span class="comment">//二维前缀和公式</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i][j]); <span class="comment">//边求边打印</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>快速排序</title>
    <url>/2021/05/15/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>1．先从数列中取出一个数作为基准数。</p>
<p>2．分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边。</p>
<p>3．再对左右区间重复第二步，直到各区间只有一个数。  </p>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Iooooot/photos@master/blogAboutPic/162002841931.png" alt="image-20210401125650931"></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ul>
<li>双向划分(最基础版)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 算法;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 快速排序 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">9</span>,<span class="number">78</span>,<span class="number">0</span>,<span class="number">23</span>,-<span class="number">567</span>,<span class="number">70</span>&#125;;</span><br><span class="line">        quickSort(arr, <span class="number">0</span>, arr.length-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left&lt;right)&#123;</span><br><span class="line">            <span class="keyword">int</span> l = left;<span class="comment">//左下标</span></span><br><span class="line">            <span class="keyword">int</span> r = right;<span class="comment">//右下标</span></span><br><span class="line">            <span class="keyword">int</span> temp = arr[l];<span class="comment">//基准数</span></span><br><span class="line">            <span class="comment">//循环进行分组</span></span><br><span class="line">            <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">                <span class="comment">//从右边找比它小的数</span></span><br><span class="line">                <span class="keyword">while</span>(r&gt;l&amp;&amp;arr[r]&gt;=temp)&#123;</span><br><span class="line">                    r--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//如果找到则将它放在左边</span></span><br><span class="line">                <span class="keyword">if</span>(l&lt;r)&#123;</span><br><span class="line">                    arr[l]=arr[r];</span><br><span class="line">                    l++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//从左边找比它大的数</span></span><br><span class="line">                <span class="keyword">while</span>(l&lt;r&amp;&amp;arr[l]&lt;=temp)&#123;</span><br><span class="line">                    l++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//如果找到则将它放在右边</span></span><br><span class="line">                <span class="keyword">if</span>(l&lt;r)&#123;</span><br><span class="line">                    arr[r]=arr[l];</span><br><span class="line">                    r--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//这里l==r</span></span><br><span class="line">            <span class="comment">//注意需要将temp填回中间</span></span><br><span class="line">            arr[l]=temp;</span><br><span class="line">            <span class="comment">//分别对中间两边再进行分组排序</span></span><br><span class="line">            <span class="comment">//左边</span></span><br><span class="line">            quickSort(arr,left,l-<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//右边</span></span><br><span class="line">            quickSort(arr, l+<span class="number">1</span>,right);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><p>双向划分升级版</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">  	<span class="keyword">if</span>(left &gt;= right) <span class="keyword">return</span>; <span class="comment">//数组只有一个或零个元素肯定有序直接返回</span></span><br><span class="line">  	<span class="comment">//并用i，j记录左右划分起点，但是由于使用的dowhile肯定会先++所以需要再往外取1</span></span><br><span class="line">  	<span class="keyword">int</span> x = arr[left + right &gt;&gt; <span class="number">1</span>],i = left - <span class="number">1</span>,j = right + <span class="number">1</span>; <span class="comment">//取中点为基准</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt; j)&#123; </span><br><span class="line">      <span class="keyword">do</span> i++;<span class="keyword">while</span>(arr[i] &lt; x); <span class="comment">//从左向右找找大于等于x的数</span></span><br><span class="line">      <span class="keyword">do</span> j--;<span class="keyword">while</span>(arr[i] &gt; x);	<span class="comment">//从右向左找找小于等于x的数</span></span><br><span class="line">      <span class="keyword">if</span>(i &lt; j)&#123;								<span class="comment">//如果i，j没有相遇则交换使左边小于等于x，右边大于等于x</span></span><br><span class="line">        <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  	quickSort(arr,left,j); 			<span class="comment">//递归遍历左边</span></span><br><span class="line">  	quickSort(arr,j+<span class="number">1</span>,right);		<span class="comment">//递归遍历右边</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>单向划分</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">  	<span class="keyword">if</span>(left &gt;= right) <span class="keyword">return</span>; <span class="comment">//数组只有一个或零个元素肯定有序直接返回</span></span><br><span class="line">  	<span class="keyword">int</span> x = arr[<span class="number">1</span>],i = left; <span class="comment">//取最左边为基准 i作为分隔点,左边全为小于x的数据包括i右边大于等于x</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = left + <span class="number">1</span>;j &lt;= r;j++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(arr[j] &lt; x)&#123; <span class="comment">//用j来从左向右找小于x的值与++i交换 因为i所在的元素已经小于x</span></span><br><span class="line">        <span class="keyword">int</span> temp = arr[++i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> temp = arr[left]; <span class="comment">//最后将基准与i即为基准的最终位置交换</span></span><br><span class="line">    arr[left] = arr[i];</span><br><span class="line">    arr[i] = temp;</span><br><span class="line">    </span><br><span class="line">  	quickSort(arr,left,i-<span class="number">1</span>); 			<span class="comment">//递归遍历左边</span></span><br><span class="line">  	quickSort(arr,i+<span class="number">1</span>,right);		<span class="comment">//递归遍历右边</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>归并排序</title>
    <url>/2021/05/21/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blogpic-1305209282.cos.ap-chengdu.myqcloud.com/img/162002841968.png" alt="162002841968"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://blogpic-1305209282.cos.ap-chengdu.myqcloud.com/img/162002841965.png" alt="162002841965"></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 算法;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 归并排序 </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">6</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">8</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        sort(nums, <span class="number">0</span>,nums.length-<span class="number">1</span>, temp);</span><br><span class="line">        System.out.println(Arrays.toString(nums));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> left,<span class="keyword">int</span> right,<span class="keyword">int</span>[] temp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left&lt;right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (left+right)/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//对左半边进行归并排序</span></span><br><span class="line">            sort(arr, left, mid,temp);</span><br><span class="line">            <span class="comment">//对右半边进行归并排序</span></span><br><span class="line">            sort(arr, mid+<span class="number">1</span>, right,temp);</span><br><span class="line">            <span class="comment">//开始分治中的治操作，在归的途中进行合并</span></span><br><span class="line">            merge(arr,left,mid,right,temp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> left,<span class="keyword">int</span> mid,<span class="keyword">int</span> right,<span class="keyword">int</span>[] temp)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//左分支的指针</span></span><br><span class="line">        <span class="keyword">int</span> i = left;</span><br><span class="line">        <span class="comment">//右分支的指针</span></span><br><span class="line">        <span class="keyword">int</span> j = mid+<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//temp数组的指针</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//在左右两分支找最小的数放在temp数组中</span></span><br><span class="line">        <span class="keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=right)&#123;</span><br><span class="line">            <span class="comment">//找那边更小，找到指针也需要移动</span></span><br><span class="line">            <span class="keyword">if</span>(arr[i]&lt;arr[j])&#123;</span><br><span class="line">                temp[index++] = arr[i++];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                temp[index++] = arr[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找完将剩余元素之间放入temp中</span></span><br><span class="line">        <span class="keyword">while</span>(i&lt;=mid)&#123;</span><br><span class="line">            temp[index++] = arr[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;=right)&#123;</span><br><span class="line">            temp[index++] = arr[j++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最后将temp复制回原数组</span></span><br><span class="line">        index=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            arr[left++]=temp[index++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>插入排序</title>
    <url>/2021/05/12/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul>
<li>遍历 len-1 次</li>
<li>每次将第i个插入数组，并判断与当前最前面的数的大小。</li>
</ul>
<p>​    <img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Iooooot/photos@master/blogAboutPic/162002842034.png" alt="image-20210326131234044"></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 算法;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 插入排序 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">101</span>,<span class="number">34</span>,<span class="number">119</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> index = i;</span><br><span class="line">            <span class="keyword">int</span> num = arr[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i-<span class="number">1</span>; j &gt;= <span class="number">0</span> ; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span>(num&lt;arr[j])&#123;</span><br><span class="line">                    arr[index] = arr[j];</span><br><span class="line">                    index = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[index] = num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>抽象工厂模式</title>
    <url>/2021/03/02/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><p>抽象工厂模式（Abstract Factory Pattern）隶属于设计模式中的==创建型==模式，用于产品族的构建。抽象工厂模式可以向客户端提供一个==接口==，使客户端在==不必指定产品的具体情况下，创建多个产品族中的产品对象。==可以看做是简单工厂的改进(或进一步抽象)。</p>
<h2 id="2-具体实现"><a href="#2-具体实现" class="headerlink" title="2.具体实现"></a>2.具体实现</h2><h3 id="2-1类图"><a href="#2-1类图" class="headerlink" title="2.1类图"></a>2.1类图</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Iooooot/photos@master/blogAboutPic/161468748894.png" alt="image-20210225212201347"></p>
<h3 id="2-2代码"><a href="#2-2代码" class="headerlink" title="2.2代码"></a>2.2代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 设计模式;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象模式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wht</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactoryPattern</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CdFactory cdFactory = <span class="keyword">new</span> CdFactory();</span><br><span class="line">        ScFactory scFactory = <span class="keyword">new</span> ScFactory();</span><br><span class="line">        Pizza sausage = cdFactory.getPizza(<span class="string">&quot;Sausage&quot;</span>);</span><br><span class="line">        Pizza cheese = scFactory.getPizza(<span class="string">&quot;Cheese&quot;</span>);</span><br><span class="line">        System.out.println(sausage);</span><br><span class="line">        System.out.println(cheese);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象产品接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Pizza</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 准备材料</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ready</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 烹饪pizza</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cook</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 成都香肠披萨</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CdSausagePizza</span> <span class="keyword">implements</span> <span class="title">Pizza</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ready</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;准备香肠&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;准备面粉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始加工香肠pizza&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 成都奶酪披萨</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CdCheesePizza</span> <span class="keyword">implements</span> <span class="title">Pizza</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ready</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;准备奶酪&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;准备面粉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始加工奶酪pizza&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 四川香肠披萨</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScSausagePizza</span> <span class="keyword">implements</span> <span class="title">Pizza</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ready</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;准备香肠&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;准备面粉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始加工香肠pizza&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 四川奶酪披萨</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScCheesePizza</span> <span class="keyword">implements</span> <span class="title">Pizza</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ready</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;准备奶酪&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;准备面粉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始加工奶酪pizza&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象工厂类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AbsFactory</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得披萨</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Pizza <span class="title">getPizza</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体工厂类1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CdFactory</span> <span class="keyword">implements</span> <span class="title">AbsFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">getPizza</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(name.equals(<span class="string">&quot;Sausage&quot;</span>))&#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> CdSausagePizza();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(name.equals(<span class="string">&quot;Cheese&quot;</span>))&#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> CdCheesePizza();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体工厂类2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScFactory</span> <span class="keyword">implements</span> <span class="title">AbsFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">getPizza</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(name.equals(<span class="string">&quot;Sausage&quot;</span>))&#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> ScSausagePizza();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(name.equals(<span class="string">&quot;Cheese&quot;</span>))&#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> ScCheesePizza();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="3-优点"><a href="#3-优点" class="headerlink" title="3.优点"></a>3.优点</h2><ul>
<li>分离了具体的类。客户通过抽象接口操纵实例，产品的类名也在具体工厂的实现中被分离，它们不出现在客户代码中。</li>
<li>易于交换产品系列。一个具体工厂类只在初始化时出现一次，这使得改变一个应用的具体工厂变得很容易，只需改变具体的工厂即可使用不同的产品配置。</li>
<li>有利于产品的一致性。当一个系列的产品对象被设计成一起工作时，一个应用一次只能使用同一个系列中的对象，这一点很重要，而抽象工厂很容易实现这一点。</li>
</ul>
<h2 id="4-缺点"><a href="#4-缺点" class="headerlink" title="4.缺点"></a>4.缺点</h2><ul>
<li>难以支持新种类的产品。因为抽象工厂接口确定了可以被创建的产品集合，所以难以扩展抽象工厂以生产新种类的产品。</li>
</ul>
<h2 id="5-使用场景"><a href="#5-使用场景" class="headerlink" title="5.使用场景"></a>5.使用场景</h2><ul>
<li>当需要创建的对象是一系列相互关联或相互依赖的产品族时。</li>
<li>系统中有多个产品族，但每次只使用其中的某一族产品。</li>
<li>系统中提供了产品的类库，且所有产品的接口相同，客户端不依赖产品实例的创建细节和内部结构。</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>抽象工厂</tag>
      </tags>
  </entry>
  <entry>
    <title>桥接模式</title>
    <url>/2021/03/14/%E6%A1%A5%E6%8E%A5/</url>
    <content><![CDATA[<h1 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><p>桥接模式是将抽象部分与它的实现部分分离，使它们都可以独立地变化。它是一种对象结构型模式，又称为柄体(Handle and Body)模式或接口(interface)模式。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。</p>
<h2 id="2-具体实现"><a href="#2-具体实现" class="headerlink" title="2.具体实现"></a>2.具体实现</h2><h3 id="2-1代码"><a href="#2-1代码" class="headerlink" title="2.1代码"></a>2.1代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 设计模式;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BridgePattern</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Implementor imple = <span class="keyword">new</span> ConcreteImplementorA();</span><br><span class="line">        Abstraction abs = <span class="keyword">new</span> RefinedAbstraction(imple);</span><br><span class="line">        abs.Operation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现化角色</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Implementor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OperationImpl</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//具体实现化角色</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteImplementorA</span> <span class="keyword">implements</span> <span class="title">Implementor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OperationImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;具体实现化(Concrete Implementor)角色被访问&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//抽象化角色</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Abstraction</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Implementor imple;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Abstraction</span><span class="params">(Implementor imple)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.imple = imple;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Operation</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//扩展抽象化角色</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RefinedAbstraction</span> <span class="keyword">extends</span> <span class="title">Abstraction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">RefinedAbstraction</span><span class="params">(Implementor imple)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(imple);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;扩展抽象化(Refined Abstraction)角色被访问&quot;</span>);</span><br><span class="line">        imple.OperationImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-优点"><a href="#3-优点" class="headerlink" title="3.优点"></a>3.优点</h2><ul>
<li>抽象与实现分离，扩展能力强</li>
<li>符合开闭原则</li>
<li>符合合成复用原则</li>
<li>其实现细节对客户透明</li>
</ul>
<h2 id="4-缺点"><a href="#4-缺点" class="headerlink" title="4.缺点"></a>4.缺点</h2><ul>
<li>由于聚合关系建立在抽象层，要求开发者针对抽象化进行设计与编程，能正确地识别出系统中两个独立变化的维度，这增加了系统的理解与设计难度。</li>
</ul>
<h2 id="5-使用场景"><a href="#5-使用场景" class="headerlink" title="5.使用场景"></a>5.使用场景</h2><ul>
<li>如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。</li>
<li>对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。</li>
<li>一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>桥接模式</tag>
      </tags>
  </entry>
  <entry>
    <title>模板方法模式</title>
    <url>/2021/03/06/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="模板模式"><a href="#模板模式" class="headerlink" title="模板模式"></a>模板模式</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><p>在模板模式（Template Pattern）中，定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。它是一种类行为型模式。</p>
<h2 id="2-具体实现"><a href="#2-具体实现" class="headerlink" title="2.具体实现"></a>2.具体实现</h2><h3 id="2-1代码"><a href="#2-1代码" class="headerlink" title="2.1代码"></a>2.1代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 设计模式;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TemplateMethodPattern</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AbstractClass abstractClass = <span class="keyword">new</span> ConcreteClass();</span><br><span class="line">        abstractClass.TemplateMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//抽象模板类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractClass</span></span>&#123;</span><br><span class="line">    <span class="comment">//模板方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TemplateMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SpecificMethod();</span><br><span class="line">        abstractMethod1();</span><br><span class="line">        abstractMethod2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//具体方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SpecificMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;抽象类中的具体方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//抽象方法1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">abstractMethod1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//抽象方法2</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">abstractMethod2</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteClass</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">abstractMethod1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;抽象方法1的实现被调用...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">abstractMethod2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;抽象方法2的实现被调用...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="3-优点"><a href="#3-优点" class="headerlink" title="3.优点"></a>3.优点</h2><ul>
<li>利用模板方法将相同处理逻辑的代码放到抽象父类中，可以提高代码的复用性。</li>
<li>将不同的代码不同的子类中，通过对子类的扩展增加新的行为，提高代码的扩展性。</li>
<li>把不变的行为写在父类上，去除子类的重复代码，提供了一个很好的代码复用平台，符合开闭原则。</li>
</ul>
<h2 id="4-缺点"><a href="#4-缺点" class="headerlink" title="4.缺点"></a>4.缺点</h2><ul>
<li>类数目的增加，每一个抽象类都需要一个子类来实现，这样导致类的个数增加。</li>
<li>类数量的增加，间接地增加了系统实现的复杂度。</li>
<li>继承关系自身缺点，如果父类添加新的抽象方法，所有子类都要改一遍。</li>
</ul>
<h2 id="5-使用场景"><a href="#5-使用场景" class="headerlink" title="5.使用场景"></a>5.使用场景</h2><ul>
<li> 有多个子类共有的方法，且逻辑相同。</li>
<li> 重要的、复杂的方法，可以考虑作为模板方法。</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>模板方法模式</tag>
      </tags>
  </entry>
  <entry>
    <title>策略模式</title>
    <url>/2021/03/13/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><p>在策略模式（Strategy Pattern）中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。</p>
<h2 id="2-具体实现"><a href="#2-具体实现" class="headerlink" title="2.具体实现"></a>2.具体实现</h2><h3 id="2-1代码"><a href="#2-1代码" class="headerlink" title="2.1代码"></a>2.1代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 设计模式;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyPattern</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Context c = <span class="keyword">new</span> Context();</span><br><span class="line">        c.setStrategy(<span class="keyword">new</span> ConcreteStrategyA());</span><br><span class="line">        c.strategyMethod();</span><br><span class="line">        c.setStrategy(<span class="keyword">new</span> ConcreteStrategyB());</span><br><span class="line">        c.strategyMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//抽象策略类</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">strategyMethod</span><span class="params">()</span></span>;    <span class="comment">//策略方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//具体策略类A..</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyA</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">strategyMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;具体策略A的策略方法被访问！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//具体策略类B...</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyB</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">strategyMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;具体策略B的策略方法被访问！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//环境类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Strategy strategy;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Strategy <span class="title">getStrategy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> strategy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStrategy</span><span class="params">(Strategy strategy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">strategyMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        strategy.strategyMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="3-优点"><a href="#3-优点" class="headerlink" title="3.优点"></a>3.优点</h2><ul>
<li>多重条件语句不易维护，而使用策略模式可以避免使用多重条件语句，如 if…else 语句、switch…case 语句。</li>
<li>策略模式提供了一系列的可供重用的算法族，恰当使用继承可以把算法族的公共代码转移到父类里面，从而避免重复的代码。</li>
<li>策略模式可以提供相同行为的不同实现，客户可以根据不同时间或空间要求选择不同的。</li>
<li>策略模式提供了对开闭原则的完美支持，可以在不修改原代码的情况下，灵活增加新算法。</li>
<li>策略模式把算法的使用放到环境类中，而算法的实现移到具体策略类中，实现了二者的分离。</li>
</ul>
<h2 id="4-缺点"><a href="#4-缺点" class="headerlink" title="4.缺点"></a>4.缺点</h2><ul>
<li>客户端必须理解所有策略算法的区别，以便适时选择恰当的算法类。</li>
<li>策略模式造成很多的策略类，增加维护难度。</li>
</ul>
<h2 id="5-使用场景"><a href="#5-使用场景" class="headerlink" title="5.使用场景"></a>5.使用场景</h2><ul>
<li> 多个类只区别在表现行为不同，可以使用Strategy模式，在运行时动态选择具体要执行的行为。</li>
<li> 需要在不同情况下使用不同的策略(算法)，或者策略还可能在未来用其它方式来实现。</li>
<li> 对客户隐藏具体策略(算法)的实现细节，彼此完全独立。</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>策略模式</tag>
      </tags>
  </entry>
  <entry>
    <title>简单工厂模式</title>
    <url>/2021/02/27/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><p>简单工厂模式是属于创建型模式，又叫做静态工厂方法（Static Factory Method）模式，简而言之就是提供一个==工厂==接收不同的==参数==来提供不同的==对象==。</p>
<h2 id="2-具体实现"><a href="#2-具体实现" class="headerlink" title="2.具体实现"></a>2.具体实现</h2><h3 id="2-1类图"><a href="#2-1类图" class="headerlink" title="2.1类图"></a>2.1类图</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Iooooot/photos@master/blogAboutPic/161441395090.png" alt="image-20210214230702319"></p>
<h3 id="2-2-代码"><a href="#2-2-代码" class="headerlink" title="2.2 代码"></a>2.2 代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 设计模式;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactoryPattern</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Shoes nike = SimpleFactory.getShoes(<span class="string">&quot;Nike&quot;</span>);</span><br><span class="line">        nike.createShoes();</span><br><span class="line">        Shoes adidas = SimpleFactory.getShoes(<span class="string">&quot;Adidas&quot;</span>);</span><br><span class="line">        adidas.createShoes();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象的产品类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shoes</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">createShoes</span><span class="params">()</span></span>;<span class="comment">//具体如何造鞋的业务逻辑，留给具体子类实现</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体的实现类1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NikeShoes</span> <span class="keyword">extends</span> <span class="title">Shoes</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createShoes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//具体逻辑</span></span><br><span class="line">        System.out.println(<span class="string">&quot;我是nike厂家&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;先这样...&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;再这样...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体的实现类2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdidasShoes</span> <span class="keyword">extends</span> <span class="title">Shoes</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createShoes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//具体逻辑</span></span><br><span class="line">        System.out.println(<span class="string">&quot;我是Adidas厂家&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;先这样...&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;再这样...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单工厂类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Shoes <span class="title">getShoes</span><span class="params">(String arg)</span></span>&#123;</span><br><span class="line">        Shoes shoes = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(arg.equals(<span class="string">&quot;Nike&quot;</span>))&#123;</span><br><span class="line">            shoes = <span class="keyword">new</span> NikeShoes();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(arg.equals(<span class="string">&quot;Adidas&quot;</span>))&#123;</span><br><span class="line">            shoes = <span class="keyword">new</span> AdidasShoes();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> shoes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="3-优点"><a href="#3-优点" class="headerlink" title="3.优点"></a>3.优点</h2><p>比较容易理解，操作简单,外界只需要提供指定参数就可以，无需究竟如何创建及如何组织的。明确了各自的职责和权利，有利于整个软件体系结构优化。</p>
<h2 id="4-缺点"><a href="#4-缺点" class="headerlink" title="4.缺点"></a>4.缺点</h2><p>违背了设计模式的ocp(对扩展开放,对修改关闭)原则.</p>
<h2 id="5-使用场景"><a href="#5-使用场景" class="headerlink" title="5.使用场景"></a>5.使用场景</h2><ul>
<li><p>工厂类负责创建的对象比较少；</p>
</li>
<li><p>并会大量的创建某种或某批对象时</p>
</li>
<li><p>客户只知道传入工厂类的参数，对于如何创建对象（逻辑）不关心；</p>
</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>简单工厂</tag>
      </tags>
  </entry>
  <entry>
    <title>观察者模式</title>
    <url>/2021/03/04/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><p>观察者模式（有时又被称为模型（Model）-视图（View）模式、源-收听者(Listener)模式或从属者模式),在此种模式中，一个目标物件管理所有相依于它的观察者物件，并且在它本身的状态改变时主动发出通知。这通常透过呼叫各观察者所提供的方法来实现。此种模式通常被用来实现事件处理系统。</p>
<h2 id="2-具体实现"><a href="#2-具体实现" class="headerlink" title="2.具体实现"></a>2.具体实现</h2><h3 id="2-1类图"><a href="#2-1类图" class="headerlink" title="2.1类图"></a>2.1类图</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Iooooot/photos@master/blogAboutPic/image-20210301184421521.png" alt="image-20210301184421521"></p>
<h3 id="2-2-代码"><a href="#2-2-代码" class="headerlink" title="2.2 代码"></a>2.2 代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 设计模式;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObserverPattern</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Ring ring = <span class="keyword">new</span> OverClassRing();</span><br><span class="line">        Student student1 = <span class="keyword">new</span> MiddleSchoolStudent();</span><br><span class="line">        Student student2 = <span class="keyword">new</span> collegeStudent();</span><br><span class="line">        ring.add(student1);</span><br><span class="line">        ring.add(student2);</span><br><span class="line">        ring.notice();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//抽象目标:铃声</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Ring</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> List&lt;Student&gt; students = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加观察者</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Student student)</span></span>&#123;</span><br><span class="line">        students.add(student);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除观察者</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Student student)</span></span>&#123;</span><br><span class="line">        students.remove(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">notice</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//具体目标:下课铃声</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OverClassRing</span> <span class="keyword">extends</span> <span class="title">Ring</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Student student : students) &#123;</span><br><span class="line">            student.response();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象观察者：学生</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">response</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//具体观察者1:大学生</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">collegeStudent</span> <span class="keyword">implements</span> <span class="title">Student</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">response</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;高数课下课了，我们会寝室学习吧(玩耍)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//具体观察者2:中学生</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiddleSchoolStudent</span> <span class="keyword">implements</span> <span class="title">Student</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">response</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;语文课下课了，我们开始预习下节数学课吧&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="3-优点"><a href="#3-优点" class="headerlink" title="3.优点"></a>3.优点</h2><p>观察者模式解除了主题和具体观察者的耦合，让耦合的双方都依赖于抽象，而不是依赖具体。</p>
<h2 id="4-缺点"><a href="#4-缺点" class="headerlink" title="4.缺点"></a>4.缺点</h2><p>在应用观察者模式时需要考虑一下开发小路问题，程序中包括一个被观察者和多个被观察者，开发和调试比较复杂，而且Java中的消息的通知默认是顺序执行的，一个观察者的卡顿会影响整体的执行效率。在这种情况下，一般考虑采用异步的方式。</p>
<h2 id="5-使用场景"><a href="#5-使用场景" class="headerlink" title="5.使用场景"></a>5.使用场景</h2><ul>
<li><p>当一个抽象模型有两个方面，其中一个方面依赖于另一方面。将这二者封装在独立的对象中以使它们可以各自独立地改变和复用。</p>
</li>
<li><p>当对一个对象的改变需要同时改变其他对象，而不知道具体有多少对象需要被改变。</p>
</li>
<li><p>当一个对象必须通知其他对象，而它又不能假定其他对象是谁。换言之，不希望这些对象是紧密耦合的。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>观察者模式</tag>
      </tags>
  </entry>
  <entry>
    <title>责任链模式</title>
    <url>/2021/03/07/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><p>责任链模式是一种设计模式，意义是为了避免请求发送者与多个请求处理者耦合在一起，于是将所有请求的处理者通过前一对象记住其下一个对象的引用而连成一条链；当有请求发生时，可将请求沿着这条链传递，直到有对象处理它为止。</p>
<h2 id="2-具体实现"><a href="#2-具体实现" class="headerlink" title="2.具体实现"></a>2.具体实现</h2><h3 id="2-1类图"><a href="#2-1类图" class="headerlink" title="2.1类图"></a>2.1类图</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Iooooot/photos@master/blogAboutPic/161510211442.png" alt="image-20210307152259270"></p>
<h3 id="2-2代码"><a href="#2-2代码" class="headerlink" title="2.2代码"></a>2.2代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 设计模式;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChainOfResponsibilityPattern</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Handler handler1 = <span class="keyword">new</span> ConcreteHandler1();</span><br><span class="line">        Handler handler2 = <span class="keyword">new</span> ConcreteHandler2();</span><br><span class="line">        handler1.setNext(handler2);</span><br><span class="line">        <span class="comment">//提交请求</span></span><br><span class="line">        handler1.handleRequest(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//抽象的处理类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Handler next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Handler <span class="title">getNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(Handler next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模拟一个处理请求的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(String request)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//责任链上的具体处理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler1</span> <span class="keyword">extends</span> <span class="title">Handler</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(String request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(request.equals(<span class="string">&quot;1&quot;</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这个请求由我handler1处理&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(getNext()!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                getNext().handleRequest(request);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;这个请求没有handler能够处理&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//责任链上的具体处理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler2</span> <span class="keyword">extends</span> <span class="title">Handler</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(String request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(request.equals(<span class="string">&quot;2&quot;</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这个请求由我handler2处理&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(getNext()!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                getNext().handleRequest(request);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;这个请求没有handler能够处理&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="3-优点"><a href="#3-优点" class="headerlink" title="3.优点"></a>3.优点</h2><ul>
<li>降低耦合度。它将请求的发送者和接收者解耦 </li>
<li>简化了对象，使得对象不需要知道链的结构 </li>
<li>增强给对象指派职责的灵活性，允许动态地新增或者删除责任链 </li>
<li>增加新的请求处理类方便</li>
</ul>
<h2 id="4-缺点"><a href="#4-缺点" class="headerlink" title="4.缺点"></a>4.缺点</h2><ul>
<li>不能保证请求一定被接收</li>
<li>系统性能将受到一定影响，调试时不方便，可能会造成循环调用</li>
</ul>
<h2 id="5-使用场景"><a href="#5-使用场景" class="headerlink" title="5.使用场景"></a>5.使用场景</h2><ul>
<li>多个对象可以处理一个请求，但具体由哪个对象处理该请求在运行时自动确定。</li>
<li>可动态指定一组对象处理请求，或添加新的处理者。</li>
<li>需要在不明确指定请求处理者的情况下，向多个处理者中的一个提交请求。</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>责任链模式</tag>
      </tags>
  </entry>
  <entry>
    <title>适配器模式</title>
    <url>/2021/03/05/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><p>适配器模式（有时候也称包装样式或者包装）将一个类的接口适配成用户所期待的。一个适配允许通常因为接口不兼容而不能在一起工作的类工作在一起，做法是将类自己的接口包裹在一个已存在的类中。</p>
<h2 id="2-具体实现"><a href="#2-具体实现" class="headerlink" title="2.具体实现"></a>2.具体实现</h2><h3 id="2-1代码"><a href="#2-1代码" class="headerlink" title="2.1代码"></a>2.1代码</h3><ol>
<li>类适配器模式的代码如下：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 设计模式;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassAdapterPattern</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Target target = <span class="keyword">new</span> ClassAdapter();</span><br><span class="line">        target.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//目标接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//适配者接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">specificRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在适配中.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类适配器类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassAdapter</span> <span class="keyword">extends</span> <span class="title">Adaptee</span> <span class="keyword">implements</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        specificRequest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>对象适配器模式的代码如下：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectAdapterPattern</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Adaptee adaptee = <span class="keyword">new</span> Adaptee();</span><br><span class="line">        Target target = <span class="keyword">new</span> ObjectAdapter(adaptee);</span><br><span class="line">        target.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//目标接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//适配者接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">specificRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在适配中.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对象适配器类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjectAdapter</span> <span class="keyword">implements</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Adaptee adaptee;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ObjectAdapter</span><span class="params">(Adaptee adaptee)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.adaptee=adaptee;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        adaptee.specificRequest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-优点"><a href="#3-优点" class="headerlink" title="3.优点"></a>3.优点</h2><ul>
<li>将目标类和适配者类解耦</li>
<li>增加了类的透明性和复用性，将具体的实现封装在适配者类中，对于客户端类来说是透明的，而且提高了适配者的复用性</li>
<li>灵活性和扩展性都非常好，符合开闭原则</li>
</ul>
<h2 id="4-缺点"><a href="#4-缺点" class="headerlink" title="4.缺点"></a>4.缺点</h2><ul>
<li>类适配器，对于Java不支持多重继承的语言，一次最多只能适配一个适配者类，而且目标抽象类只能为接口，不能为类，其使用有一定的局限性，不能将一个适配者类和他的子类同时适配到目标接口。所以多用对象适配器。</li>
</ul>
<h2 id="5-使用场景"><a href="#5-使用场景" class="headerlink" title="5.使用场景"></a>5.使用场景</h2><ul>
<li>接口中规定了所有要实现的方法</li>
<li>但一个要实现此接口的具体类，只用到了其中的几个方法，而其它的方法都是没有用的。</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>适配器模式</tag>
      </tags>
  </entry>
  <entry>
    <title>高精度大整数计算</title>
    <url>/2022/01/12/%E9%AB%98%E7%B2%BE%E5%BA%A6%E5%A4%A7%E6%95%B4%E6%95%B0%E8%AE%A1%E7%AE%97/</url>
    <content><![CDATA[<h1 id="高精度大整数计算"><a href="#高精度大整数计算" class="headerlink" title="高精度大整数计算"></a>高精度大整数计算</h1><h2 id="两个高精度大整数相加"><a href="#两个高精度大整数相加" class="headerlink" title="两个高精度大整数相加"></a>两个高精度大整数相加</h2><h3 id="简单分析"><a href="#简单分析" class="headerlink" title="简单分析"></a>简单分析</h3><p>​    由于两个都是大整数，需要用数组或容器来存。具体运算就跟手算一样，各位相加留下10的余数多于10的进位，从个位开始一直重复到最高位即可，最后需要注意进位是否还多出一位来。</p>
<img src= "/img/loading.gif" data-lazy-src="https://s3.bmp.ovh/imgs/2022/01/5abbe8d9d1897999.png" alt="image-20220112161731792" style="zoom: 67%;" />

<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// c++代码</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">add</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;B)</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; c;  <span class="comment">//用于存和</span></span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">0</span>; <span class="comment">//进位</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; A.size() || i &lt; B.size();i++)&#123; <span class="comment">//遍历从个位开始到最高位</span></span><br><span class="line">        <span class="keyword">if</span>(i &lt; A.size()) t += A[i]; <span class="comment">//如果数A还有数则与进位加在一起</span></span><br><span class="line">        <span class="keyword">if</span>(i &lt; B.size()) t += B[i];	<span class="comment">//如果数B还有数则与进位加在一起</span></span><br><span class="line">        c.push_back(t % <span class="number">10</span>); <span class="comment">//10的余数为该位结果</span></span><br><span class="line">        t /= <span class="number">10</span>; <span class="comment">//进位</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(t) c.push_back(t); <span class="comment">//检查是否还有进位</span></span><br><span class="line">    <span class="keyword">return</span> c; <span class="comment">//返回结果</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a,b; <span class="comment">//用字符串先接受输入 如123 注意1是最高位 3是最低位</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A; <span class="comment">//装操作数的容器</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; B;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = a.size() - <span class="number">1</span>;i &gt;= <span class="number">0</span>;i--)A.push_back(a[i] - <span class="string">&#x27;0&#x27;</span>); <span class="comment">//从个位开始装</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = b.size() - <span class="number">1</span>;i &gt;= <span class="number">0</span>;i--)B.push_back(b[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; c = add(A,B); <span class="comment">//调用函数计算结果</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = c.size() - <span class="number">1</span>;i &gt;= <span class="number">0</span>;i--)<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,c[i]); <span class="comment">// 还是还原正常的高位到低位输出</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="两个高精度大整数相减"><a href="#两个高精度大整数相减" class="headerlink" title="两个高精度大整数相减"></a>两个高精度大整数相减</h2><h3 id="简单分析-1"><a href="#简单分析-1" class="headerlink" title="简单分析"></a>简单分析</h3><p>​    同样由于两个都是大整数，需要用数组或容器来存。具体运算就跟手算一样，首先保证A要大于等于B，然后设t为借位，还是从低位到高位每次将A的各位 - B的各位 - 借位t，将其对10求余则为两数差该位的答案，再由其正负确定是否向高位借位。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.bmp.ovh/imgs/2022/01/d4812b2c66dfe326.png" alt="image-20220113183730046"></p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// c++代码</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//比较两数大小</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;B)</span></span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(A.size()!= B.size())&#123; <span class="comment">//如果长度不同则谁长谁大</span></span><br><span class="line">        <span class="keyword">return</span> A.size()&gt; B.size();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = A.size() - <span class="number">1</span>;i &gt;= <span class="number">0</span> ;i--)&#123;<span class="comment">//注意是从高位开始比较</span></span><br><span class="line">                <span class="keyword">if</span>(A[i] != B[i])&#123;  <span class="comment">//依次比较每一位  不相等则该位谁大就谁大</span></span><br><span class="line">                    <span class="keyword">return</span> A[i] &gt; B[i];</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//完全相等直接返回1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">sub</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;B)</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; c; <span class="comment">//结果容器</span></span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">0</span>; <span class="comment">//借位</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; A.size();i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = A[i] - t; <span class="comment">//先将借位减去</span></span><br><span class="line">        <span class="keyword">if</span>(i &lt; B.size()) temp -= B[i]; <span class="comment">//如果B数还有数就减去</span></span><br><span class="line">        c.push_back((temp + <span class="number">10</span>) % <span class="number">10</span>); <span class="comment">//结果对10求余为该位答案</span></span><br><span class="line">        <span class="keyword">if</span>(temp &gt;= <span class="number">0</span>)t = <span class="number">0</span>; <span class="comment">//判断借位</span></span><br><span class="line">        <span class="keyword">else</span> t = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(c.size() != <span class="number">1</span> &amp;&amp; c.back()==<span class="number">0</span>)c.pop_back(); <span class="comment">//去除前缀0 如10-10=00只需要输出一个0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a,b;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A,B;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = a.size() - <span class="number">1</span>;i &gt;= <span class="number">0</span>;i--)A.push_back(a[i] - <span class="string">&#x27;0&#x27;</span>);<span class="comment">//从个位开始装</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = b.size() - <span class="number">1</span>;i &gt;= <span class="number">0</span>;i--)B.push_back(b[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C = cmp(A,B) ? sub(A,B) : sub(B,A); <span class="comment">//保证A&gt;=B</span></span><br><span class="line">    <span class="keyword">if</span>(!cmp(A,B))<span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;-&quot;</span>; <span class="comment">//如果A&lt;B需要将结果加负号</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = C.size() - <span class="number">1</span>;i &gt;= <span class="number">0</span>;i--)<span class="built_in">cout</span>&lt;&lt;C[i]; <span class="comment">// 还是还原正常的高位到低位输出</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="高精度大整数乘小整数"><a href="#高精度大整数乘小整数" class="headerlink" title="高精度大整数乘小整数"></a>高精度大整数乘小整数</h2><h3 id="简单分析-2"><a href="#简单分析-2" class="headerlink" title="简单分析"></a>简单分析</h3><p>​    只有一个大整数所以只需要一个容器来存另一个用整数即可，与手算有点点区别，还是从低位到高位依次用大整数的每一位乘以小数b得到一个小整数，将其对10求余就是该位的答案并将多余的进位运算,同样注意前缀0问题;</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.bmp.ovh/imgs/2022/01/b8fec126fd347f2d.png"></p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// c++代码</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">mul</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; c; <span class="comment">//存结果</span></span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">0</span>; <span class="comment">//进位</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; A.size() || t;i++)&#123; <span class="comment">//从低位开始如果遍历完A但是依然还有进位继续循环</span></span><br><span class="line">        <span class="keyword">if</span>(i &lt; A.size()) t += A[i] * b; <span class="comment">//得到每位的总结果</span></span><br><span class="line">        c.push_back(t%<span class="number">10</span>); <span class="comment">//对10求余得到当前位的结果</span></span><br><span class="line">        t /= <span class="number">10</span>; <span class="comment">//其余进位</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(c.size() != <span class="number">1</span> &amp;&amp; c.back() == <span class="number">0</span>)c.pop_back(); <span class="comment">//去除前缀0 如12*0=00只要一个0  			return c;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b; </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = a.size() - <span class="number">1</span>;i &gt;= <span class="number">0</span>;i--)A.push_back(a[i] - <span class="string">&#x27;0&#x27;</span>); <span class="comment">//依然倒置让个位在前</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C = mul(A,b);  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = C.size() - <span class="number">1</span>;i &gt;= <span class="number">0</span>;i--)<span class="built_in">cout</span>&lt;&lt;C[i]; <span class="comment">// 还是还原正常的高位到低位输出</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="高精度大整数除以小整数"><a href="#高精度大整数除以小整数" class="headerlink" title="高精度大整数除以小整数"></a>高精度大整数除以小整数</h2><h3 id="简单分析-3"><a href="#简单分析-3" class="headerlink" title="简单分析"></a>简单分析</h3><p>​    只有一个大整数所以只需要一个容器来存另一个用整数即可，与手算有区别，从高位开始算，将每一位加上上一位的余数*10除以b，继续将余数留给下一位，直到大数的每一位计算完，需要注意答案是从高位到低位排列的，要去除前缀0需要先逆置;</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.bmp.ovh/imgs/2022/01/dfb3720a5e295c7c.png"></p>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// c++代码</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> r;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">div</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; c;</span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">0</span>; <span class="comment">//上一位的余数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = A.size() - <span class="number">1</span>;i &gt;= <span class="number">0</span>;i--)&#123; <span class="comment">//除法需要从高位开始除</span></span><br><span class="line">        <span class="keyword">int</span> temp = t*<span class="number">10</span> + A[i];  <span class="comment">//上一位余数因为高一位需要*10加上该位</span></span><br><span class="line">        c.push_back(temp / b); <span class="comment">//得到该位的答案</span></span><br><span class="line">        t = temp % b; <span class="comment">//将该位余数记录</span></span><br><span class="line">    &#125;</span><br><span class="line">    r = t; <span class="comment">//最终余数</span></span><br><span class="line">    reverse(c.begin(),c.end()); <span class="comment">//由于从高位开始算的高位在前面所以需要逆置去除前缀零</span></span><br><span class="line">    <span class="keyword">while</span>(c.size() != <span class="number">1</span> &amp;&amp; c.back() == <span class="number">0</span>)c.pop_back();</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = a.size() - <span class="number">1</span>;i &gt;=<span class="number">0</span>;i--)A.push_back(a[i] - <span class="string">&#x27;0&#x27;</span>);<span class="comment">//依然倒置让个位在前</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C = div(A,b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = C.size() - <span class="number">1</span>;i &gt;=<span class="number">0</span>;i--)<span class="built_in">cout</span>&lt;&lt;C[i]; <span class="comment">// 还是还原正常的高位到低位输出</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;r;<span class="comment">//输出余数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>选择排序</title>
    <url>/2021/05/08/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul>
<li>遍历 len-1 次</li>
<li>每次选择出最小的值放在前面</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Iooooot/photos@master/blogAboutPic/162002842041.png" alt="image-20210325162602291">    </p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 算法;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 选择排序 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">101</span>,<span class="number">34</span>,<span class="number">119</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> min，minIndex;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            min = arr[i];</span><br><span class="line">            minIndex = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j]&lt;min)&#123;</span><br><span class="line">                    min = arr[j];</span><br><span class="line">                    minIndex = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">           <span class="keyword">if</span>(minIndex!=i)&#123;</span><br><span class="line">             arr[minIndex]=arr[i];</span><br><span class="line">             arr[i]=min;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>排序</tag>
      </tags>
  </entry>
</search>
